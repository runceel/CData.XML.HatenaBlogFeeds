<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"
      xmlns:app="http://www.w3.org/2007/app">
    <link rel="first" href="https://blog.hatena.ne.jp/sugimomoto/kageura.hatenadiary.jp/atom/entry" />
    <link rel="next" href="https://blog.hatena.ne.jp/sugimomoto/kageura.hatenadiary.jp/atom/entry?page=1571383984" />
    <title>Morning Girl</title>
    <subtitle>Web API, Windows, C#, .NET, Dynamics 365/CRM etc..</subtitle>
    <link rel="alternate" href="http://kageura.hatenadiary.jp/"/>
    <updated>2019-12-17T21:37:27+09:00</updated>
    <author>
        <name>sugimomoto</name>
    </author>
    <generator uri="https://blog.hatena.ne.jp/" version="3977fa1b6c9f31b5eab4610099c62851">Hatena::Blog</generator>
    <id>hatenablog://blog/8454420450088934728</id>
    <entry>
        <id>tag:blog.hatena.ne.jp,2013:blog-sugimomoto-8454420450088934728-26006613485837941</id>
        <link rel="edit" href="https://blog.hatena.ne.jp/sugimomoto/kageura.hatenadiary.jp/atom/entry/26006613485837941"/>
        <link rel="alternate" type="text/html" href="http://kageura.hatenadiary.jp/entry/blazorsmaregi"/>
        <author>
            <name>sugimomoto</name>
        </author>
        <title>Blazor で API Explorer を作って色々悩んだお話 ＃GyutanKaigi2019</title>
        <updated>2019-12-17T21:37:27+09:00</updated>
        <published>2019-12-17T21:37:27+09:00</published>
        <app:edited>2019-12-17T21:38:19+09:00</app:edited>
        <summary type="text">先週土曜日に仙台で開催した「牛タン会議2019」でBlazorについての発表をしてきました！ 今回はその内容をもうちょっとまとめて、Blogとして公開したものになります。 speakerdeck.com vsuc.connpass.com ちなみに、この記事は Blazor アド…</summary>
        <content type="text/x-markdown">先週土曜日に仙台で開催した「牛タン会議2019」でBlazorについての発表をしてきました！　今回はその内容をもうちょっとまとめて、Blogとして公開したものになります。

[https://speakerdeck.com/sugimomoto/blazor-de-api-explorer-wozuo-tutese-nao-ndaohua-number-gyutankaigi2019:embed:cite]

[https://vsuc.connpass.com/event/156131/:embed:cite]

ちなみに、この記事は Blazor アドベントカレンダー 12日目です。めちゃくちゃ遅くなってごめんなさい・・・orz

[https://qiita.com/advent-calendar/2019/blazor:embed:cite]

# こんなものを作ってみた

実は私、ちょうど2ヶ月ほど前から Blazor を触り始めたんですが、なんて素晴らしい！　　JavaScriptのフレームワークが苦手な私でもこれならなんか作って公開できそうだ！（思い違い）　と感激していました。

そこで、当時開発でよく悩んでいたスマレジのAPIを手軽に実行できるアプリを作ってみたのです。

[f:id:sugimomoto:20191217212509p:plain]

スマレジ API はすごく柔軟な機能を提供していて、数多くの操作、リソースをコントロールできるのですが

[f:id:sugimomoto:20191217212518p:plain]

API リクエストの仕様がちょっと独特かつ、項目が多いので気軽に試すのが難しいかなーというAPIでした。

[f:id:sugimomoto:20191217212525p:plain]

なので、Facebookや Microsoft が公開しているような API Explorer を作って公開しちゃえば、このつらみから開放されるのではないか！？　と考えたのです。

そして作ってみたのがこんな感じのものです。

[https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/smaregi.gif:image=https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/smaregi.gif]

まだ手直し真っ只中ですが、以下のAzure Web Apps で公開しています。（低料金プランとSignalIR未設定のためか、ちょっと重い・・・）

[https://smaregiapiexplorer.azurewebsites.net/]

さて、なんとか自分がイメージしていたものが動くところまでは至ったのですが、そこで色々とぶつかっていたので、それを共有したいと思います。

## 私が遭遇した課題 その1

このAPI Explorer を実装する上で、一番の課題だったところは、一番の機能的ポイントでもある、動的なテーブル形式のInputフォームでした。

[f:id:sugimomoto:20191217212534p:plain]


スマレジ APIは各カラムのフィルターを柔軟に書けるようになっている反面、この部分のリクエストをJSONで書くのがなかなか大変だったので、この部分の実現が一番の肝でした。

ただ、この動的なInputフォーム動的であるが故に、Blazorの強力なバインディング機能でプロパティに値をバインディングできない（できないよね？　できたら教えて下さい）！

バインディングできないと、値のとり方がわかんない！

# 私の試みた解決策 その1

まあ、しょうがない。それじゃあDOM APIにアクセスして、動的に取ってくればいいんでしょ？　と考えたので Blazor で DOM APIにアクセスするライブラリはなーんだ？　と探したわけですが

[https://github.com/aspnet/Blazor/wiki/FAQ#q-can-i-access-the-dom-from-a-blazor-app:title]

&gt; Q: Can I access the DOM from a Blazor app?

&gt; You can access the DOM through JavaScript interop from .NET code. However, Blazor is a component based framework that minimizes the need to access the DOM directly.

&gt; （あなたはBlazor で DOM にアクセスできるよ！　そう、JavaScript ならね！：意訳）

JavaScriptか・・・！

Blazor では JavaScript 相互運用機能（Interop）という、.NET MethodからJavaScriptを呼び出す機能が備わっており、この機能でJavaScriptが取得したDOM APIのデータをJSONなどの形式にまとめて、レスポンスとして .NET 側に返す機能が備わっています。

[https://docs.microsoft.com/ja-jp/aspnet/core/blazor/javascript-interop?view=aspnetcore-3.1:embed:cite]

できる限り、JavaScriptを書きたくなかった私ですが、ここで諦めてHTMLテーブルのInputをなめて、JSONを返すJavaScriptMethodを書き、対応することにしました。

## 私が遭遇した課題 その2

しかし、ここでも躓きます。JavaScriptでDOM APIにアクセスして、テーブルの情報を取得することはできました。

ただ、Blazorは各Inputやバインディングの値が変更された際に、DOM要素をレンダリングし直します。

[https://docs.microsoft.com/ja-jp/aspnet/core/blazor/lifecycle?view=aspnetcore-3.1:embed:cite]

その結果、JavaScript 相互運用で非同期処理をしていることにより、リクエスト生成ボタンをクリックする（JavaScript が DOM の値を取得する）前に、Blazor が DOMを初期状態に書き換えてしまい、値が取得できないということが発生。

取得できていても非同期処理がレンダリングのタイミングがずれて、裏の変数では値を保持しているのに、レンダリングしている値と一致しないということまで発生しました。

## 私の試みた解決策 その2

結局私が最終的に試みたアプローチは、テーブルInputが変更される度に JavaScriptで値を取得して、テーブルを構成するためのListプロパティに逐次差し戻し、最新化するというものでした。

以下の「columnInput」がテーブルを構成するための要素をすべて保持しており、

```cs
                &lt;BSTable IsSmall=&quot;true&quot; IsBordered=&quot;true&quot; IsStriped=&quot;true&quot; Class=&quot;overflow-auto&quot; style=&quot;max-height: 200px;&quot;&gt;
                    &lt;BSTableHead&gt;
                        &lt;BSTableRow&gt;
                            &lt;BSTableHeadCell&gt;Select&lt;/BSTableHeadCell&gt;
                            &lt;BSTableHeadCell&gt;Id&lt;/BSTableHeadCell&gt;
                            &lt;BSTableHeadCell&gt;ColumnName&lt;/BSTableHeadCell&gt;
                            &lt;BSTableHeadCell&gt;ColumnName(J)&lt;/BSTableHeadCell&gt;
                            &lt;BSTableHeadCell&gt;ColumnType&lt;/BSTableHeadCell&gt;
                            &lt;BSTableHeadCell&gt;ConditionType&lt;/BSTableHeadCell&gt;
                            &lt;BSTableHeadCell&gt;ConditionValue&lt;/BSTableHeadCell&gt;
                            &lt;BSTableHeadCell&gt;Description&lt;/BSTableHeadCell&gt;
                        &lt;/BSTableRow&gt;
                    &lt;/BSTableHead&gt;
                    &lt;BSTableBody&gt;
                        @foreach (var column in columnInput)
                            {
                        &lt;BSTableRow&gt;
                            &lt;BSTableCell&gt;
                                &lt;BSBasicInput Class=&quot;form-control-sm&quot; InputType=&quot;InputType.Checkbox&quot; Value=&quot;@column.Select&quot;&gt;&lt;/BSBasicInput&gt;
                            &lt;/BSTableCell&gt;
                            &lt;BSTableCell&gt;@column.No&lt;/BSTableCell&gt;
                            &lt;BSTableCell&gt;@column.Name&lt;/BSTableCell&gt;
                            &lt;BSTableCell&gt;@column.JapaneseLabel&lt;/BSTableCell&gt;
                            &lt;BSTableCell&gt;@column.Type&lt;/BSTableCell&gt;
                            &lt;BSTableCell&gt;
                                &lt;BSBasicInput Class=&quot;form-control-sm&quot; InputType=&quot;InputType.Select&quot; Value=&quot;@column.ConditionType&quot; @onselect=&quot;@SetColumnInput&quot;&gt;
                                    &lt;option&gt;&lt;/option&gt;
                                    &lt;option&gt;=&lt;/option&gt;
                                    &lt;option&gt;like&lt;/option&gt;
                                    &lt;option&gt;&amp;lt;&lt;/option&gt;
                                    &lt;option&gt;&amp;lt;=&lt;/option&gt;
                                    &lt;option&gt;&amp;gt;&lt;/option&gt;
                                    &lt;option&gt;&amp;gt;=&lt;/option&gt;
                                &lt;/BSBasicInput&gt;
                            &lt;/BSTableCell&gt;
                            &lt;BSTableCell&gt;&lt;BSBasicInput Class=&quot;form-control-sm&quot; InputType=&quot;InputType.Text&quot; Value=&quot;@column.ConditionValue&quot; @onchange=&quot;@SetColumnInput&quot;&gt;&lt;/BSBasicInput&gt;&lt;/BSTableCell&gt;
                            &lt;BSTableCell&gt;@column.Description&lt;/BSTableCell&gt;
                        &lt;/BSTableRow&gt;
                            }

                        @if (columnInput.Count == 0)
                            {
                        &lt;tr&gt;
                            &lt;td colspan=&quot;8&quot;&gt;No Records&lt;/td&gt;
                        &lt;/tr&gt;
                            }
                    &lt;/BSTableBody&gt;

                &lt;/BSTable&gt;
```

SelectボックスなどのInputが操作されるたびに、JavaScriptが値を取り直しています。

```
        public async void SetColumnInput()
        {
            columnInput = await JSRuntime.InvokeAsync&lt;List&lt;ColumnInput&gt;&gt;(&quot;tableDataManager.getTableValues&quot;);
        }
```

これにより、テーブルを構成しているオブジェクトの値を最新に保つようにしています。

## Blazor でアプリを作る上で感じたポイント

と、ここまで私の課題と解決アプローチをお話してきたのですが、これが「まっとうな」「ベスト」といえるアプローチに行き着くことができていない、というのが正直なところです。

なので、この発表をした牛タン会議では、最終的に会場に居る素晴らしいMS MVP の方々へ「どうしたらよかっただろう？」というのを聞く！　というが本来の目的だったのですが

[f:id:sugimomoto:20191217212547p:plain]

ちょっと会場の時間が押していたこともあり、なくなく断念となりました（泣

というわけで、せっかくなので、このBlogでもヒドイコードを晒して対応アプローチを募ってみたい、と思っています。

[https://github.com/sugimomoto/SmaregiAPP.APIExplorer.Blazor:embed:cite]

ちなみに、私がこの経験を通じて得た教訓は「できる限り値はバインディングするに限る。直接的なバインディングなのか、間接的なバインディングに問わず」というものでした。

（こんなBlogでいいのだろうか。）

おしまい</content>
        <hatena:formatted-content type="text/html" xmlns:hatena="http://www.hatena.ne.jp/info/xmlns#">&lt;p&gt;先週土曜日に仙台で開催した「牛タン会議2019」でBlazorについての発表をしてきました！　今回はその内容をもうちょっとまとめて、Blogとして公開したものになります。&lt;/p&gt;

&lt;p&gt;&lt;iframe id=&quot;talk_frame_584384&quot; src=&quot;//speakerdeck.com/player/dde0a1294c5a485f83a0cdeac7631e5f&quot; width=&quot;710&quot; height=&quot;399&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;allowfullscreen&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/sugimomoto/blazor-de-api-explorer-wozuo-tutese-nao-ndaohua-number-gyutankaigi2019&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fvsuc.connpass.com%2Fevent%2F156131%2F&quot; title=&quot;牛タン会議 2019 (2019/12/14 13:00〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://vsuc.connpass.com/event/156131/&quot;&gt;vsuc.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、この記事は Blazor &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%D9%A5%F3%A5%C8%A5%AB%A5%EC%A5%F3%A5%C0%A1%BC&quot;&gt;アドベントカレンダー&lt;/a&gt; 12日目です。めちゃくちゃ遅くなってごめんなさい・・・orz&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fadvent-calendar%2F2019%2Fblazor&quot; title=&quot;Blazor Advent Calendar 2019 - Qiita&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2019/blazor&quot;&gt;qiita.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h1&gt;こんなものを作ってみた&lt;/h1&gt;

&lt;p&gt;実は私、ちょうど2ヶ月ほど前から Blazor を触り始めたんですが、なんて素晴らしい！　　&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF&quot;&gt;フレームワーク&lt;/a&gt;が苦手な私でもこれならなんか作って公開できそうだ！（思い違い）　と感激していました。&lt;/p&gt;

&lt;p&gt;そこで、当時開発でよく悩んでいたスマレジの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を手軽に実行できるアプリを作ってみたのです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191217/20191217212509.png&quot; alt=&quot;f:id:sugimomoto:20191217212509p:plain&quot; title=&quot;f:id:sugimomoto:20191217212509p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;スマレジ &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; はすごく柔軟な機能を提供していて、数多くの操作、リソースをコン&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A5%ED%A1%BC%A5%EB&quot;&gt;トロール&lt;/a&gt;できるのですが&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191217/20191217212518.png&quot; alt=&quot;f:id:sugimomoto:20191217212518p:plain&quot; title=&quot;f:id:sugimomoto:20191217212518p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; リク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トの仕様がちょっと独特かつ、項目が多いので気軽に試すのが難しいかなーという&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;でした。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191217/20191217212525.png&quot; alt=&quot;f:id:sugimomoto:20191217212525p:plain&quot; title=&quot;f:id:sugimomoto:20191217212525p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;なので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Facebook&quot;&gt;Facebook&lt;/a&gt;や &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Microsoft&quot;&gt;Microsoft&lt;/a&gt; が公開しているような &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Explorer&quot;&gt;Explorer&lt;/a&gt; を作って公開しちゃえば、このつらみから開放されるのではないか！？　と考えたのです。&lt;/p&gt;

&lt;p&gt;そして作ってみたのがこんな感じのものです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/smaregi.gif&quot; class=&quot;http-image&quot;&gt;&lt;img src=&quot;https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/smaregi.gif&quot; class=&quot;http-image&quot; alt=&quot;https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/smaregi.gif&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まだ手直し真っ只中ですが、以下のAzure Web Apps で公開しています。（低料金プランとSignalIR未設定のためか、ちょっと重い・・・）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://smaregiapiexplorer.azurewebsites.net/&quot;&gt;https://smaregiapiexplorer.azurewebsites.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;さて、なんとか自分がイメージしていたものが動くところまでは至ったのですが、そこで色々とぶつかっていたので、それを共有したいと思います。&lt;/p&gt;

&lt;h2&gt;私が遭遇した課題 その1&lt;/h2&gt;

&lt;p&gt;この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Explorer&quot;&gt;Explorer&lt;/a&gt; を実装する上で、一番の課題だったところは、一番の機能的ポイントでもある、動的なテーブル形式のInputフォームでした。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191217/20191217212534.png&quot; alt=&quot;f:id:sugimomoto:20191217212534p:plain&quot; title=&quot;f:id:sugimomoto:20191217212534p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;スマレジ &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;は各カラムのフィルターを柔軟に書けるようになっている反面、この部分のリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;で書くのがなかなか大変だったので、この部分の実現が一番の肝でした。&lt;/p&gt;

&lt;p&gt;ただ、この動的なInputフォーム動的であるが故に、Blazorの強力な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0&quot;&gt;バインディング&lt;/a&gt;機能でプロパティに値を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0&quot;&gt;バインディング&lt;/a&gt;できない（できないよね？　できたら教えて下さい）！&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0&quot;&gt;バインディング&lt;/a&gt;できないと、値のとり方がわかんない！&lt;/p&gt;

&lt;h1&gt;私の試みた解決策 その1&lt;/h1&gt;

&lt;p&gt;まあ、しょうがない。それじゃあDOM &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;にアクセスして、動的に取ってくればいいんでしょ？　と考えたので Blazor で DOM &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;にアクセスするライブラリはなーんだ？　と探したわけですが&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/aspnet/Blazor/wiki/FAQ#q-can-i-access-the-dom-from-a-blazor-app&quot;&gt;FAQ &amp;middot; aspnet/Blazor Wiki &amp;middot; GitHub&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Q: Can I &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/access&quot;&gt;access&lt;/a&gt; the DOM from a Blazor app?&lt;/p&gt;

&lt;p&gt;You can &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/access&quot;&gt;access&lt;/a&gt; the DOM through &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/interop&quot;&gt;interop&lt;/a&gt; from&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%20.NET&quot;&gt; .NET&lt;/a&gt; code. However, Blazor is a component based framework that minimizes the need to &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/access&quot;&gt;access&lt;/a&gt; the DOM directly.&lt;/p&gt;

&lt;p&gt;（あなたはBlazor で DOM にアクセスできるよ！　そう、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt; ならね！：意訳）&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;か・・・！&lt;/p&gt;

&lt;p&gt;Blazor では &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt; 相互運用機能（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Interop&quot;&gt;Interop&lt;/a&gt;）という、.NET Methodから&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;を呼び出す機能が備わっており、この機能で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;が取得したDOM &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のデータを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;などの形式にまとめて、レスポンスとして&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%20.NET&quot;&gt; .NET&lt;/a&gt; 側に返す機能が備わっています。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.microsoft.com%2Fja-jp%2Faspnet%2Fcore%2Fblazor%2Fjavascript-interop%3Fview%3Daspnetcore-3.1&quot; title=&quot;ASP.NET Core Blazor JavaScript 相互運用機能&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://docs.microsoft.com/ja-jp/aspnet/core/blazor/javascript-interop?view=aspnetcore-3.1&quot;&gt;docs.microsoft.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;できる限り、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;を書きたくなかった私ですが、ここで諦めてHTMLテーブルのInputをなめて、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;を返すJavaScriptMethodを書き、対応することにしました。&lt;/p&gt;

&lt;h2&gt;私が遭遇した課題 その2&lt;/h2&gt;

&lt;p&gt;しかし、ここでも躓きます。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;でDOM &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;にアクセスして、テーブルの情報を取得することはできました。&lt;/p&gt;

&lt;p&gt;ただ、Blazorは各Inputや&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0&quot;&gt;バインディング&lt;/a&gt;の値が変更された際に、DOM要素を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;し直します。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.microsoft.com%2Fja-jp%2Faspnet%2Fcore%2Fblazor%2Flifecycle%3Fview%3Daspnetcore-3.1&quot; title=&quot;ASP.NET Core Blazor ライフサイクル&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://docs.microsoft.com/ja-jp/aspnet/core/blazor/lifecycle?view=aspnetcore-3.1&quot;&gt;docs.microsoft.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;その結果、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt; 相互運用で非同期処理をしていることにより、リク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;ト生成ボタンをクリックする（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt; が DOM の値を取得する）前に、Blazor が DOMを初期状態に書き換えてしまい、値が取得できないということが発生。&lt;/p&gt;

&lt;p&gt;取得できていても非同期処理が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;のタイミングがずれて、裏の変数では値を保持しているのに、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;している値と一致しないということまで発生しました。&lt;/p&gt;

&lt;h2&gt;私の試みた解決策 その2&lt;/h2&gt;

&lt;p&gt;結局私が最終的に試みたアプローチは、テーブルInputが変更される度に &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;で値を取得して、テーブルを構成するためのListプロパティに逐次差し戻し、最新化するというものでした。&lt;/p&gt;

&lt;p&gt;以下の「columnInput」がテーブルを構成するための要素をすべて保持しており、&lt;/p&gt;

&lt;pre class=&quot;code lang-cs&quot; data-lang=&quot;cs&quot; data-unlink&gt;                &amp;lt;BSTable IsSmall=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; IsBordered=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; IsStriped=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; Class=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;overflow-auto&amp;quot;&lt;/span&gt; style=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;max-height: 200px;&amp;quot;&lt;/span&gt;&amp;gt;
                    &amp;lt;BSTableHead&amp;gt;
                        &amp;lt;BSTableRow&amp;gt;
                            &amp;lt;BSTableHeadCell&amp;gt;Select&amp;lt;/BSTableHeadCell&amp;gt;
                            &amp;lt;BSTableHeadCell&amp;gt;Id&amp;lt;/BSTableHeadCell&amp;gt;
                            &amp;lt;BSTableHeadCell&amp;gt;ColumnName&amp;lt;/BSTableHeadCell&amp;gt;
                            &amp;lt;BSTableHeadCell&amp;gt;ColumnName(J)&amp;lt;/BSTableHeadCell&amp;gt;
                            &amp;lt;BSTableHeadCell&amp;gt;ColumnType&amp;lt;/BSTableHeadCell&amp;gt;
                            &amp;lt;BSTableHeadCell&amp;gt;ConditionType&amp;lt;/BSTableHeadCell&amp;gt;
                            &amp;lt;BSTableHeadCell&amp;gt;ConditionValue&amp;lt;/BSTableHeadCell&amp;gt;
                            &amp;lt;BSTableHeadCell&amp;gt;Description&amp;lt;/BSTableHeadCell&amp;gt;
                        &amp;lt;/BSTableRow&amp;gt;
                    &amp;lt;/BSTableHead&amp;gt;
                    &amp;lt;BSTableBody&amp;gt;
                        @&lt;span class=&quot;synStatement&quot;&gt;foreach&lt;/span&gt; (var column &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt; columnInput)
                            {
                        &amp;lt;BSTableRow&amp;gt;
                            &amp;lt;BSTableCell&amp;gt;
                                &amp;lt;BSBasicInput Class=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-control-sm&amp;quot;&lt;/span&gt; InputType=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;InputType.Checkbox&amp;quot;&lt;/span&gt; Value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;@column.Select&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;/BSBasicInput&amp;gt;
                            &amp;lt;/BSTableCell&amp;gt;
                            &amp;lt;BSTableCell&amp;gt;@column.No&amp;lt;/BSTableCell&amp;gt;
                            &amp;lt;BSTableCell&amp;gt;@column.Name&amp;lt;/BSTableCell&amp;gt;
                            &amp;lt;BSTableCell&amp;gt;@column.JapaneseLabel&amp;lt;/BSTableCell&amp;gt;
                            &amp;lt;BSTableCell&amp;gt;@column.Type&amp;lt;/BSTableCell&amp;gt;
                            &amp;lt;BSTableCell&amp;gt;
                                &amp;lt;BSBasicInput Class=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-control-sm&amp;quot;&lt;/span&gt; InputType=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;InputType.Select&amp;quot;&lt;/span&gt; Value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;@column.ConditionType&amp;quot;&lt;/span&gt; @onselect=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;@SetColumnInput&amp;quot;&lt;/span&gt;&amp;gt;
                                    &amp;lt;option&amp;gt;&amp;lt;/option&amp;gt;
                                    &amp;lt;option&amp;gt;=&amp;lt;/option&amp;gt;
                                    &amp;lt;option&amp;gt;like&amp;lt;/option&amp;gt;
                                    &amp;lt;option&amp;gt;&amp;amp;lt;&amp;lt;/option&amp;gt;
                                    &amp;lt;option&amp;gt;&amp;amp;lt;=&amp;lt;/option&amp;gt;
                                    &amp;lt;option&amp;gt;&amp;amp;gt;&amp;lt;/option&amp;gt;
                                    &amp;lt;option&amp;gt;&amp;amp;gt;=&amp;lt;/option&amp;gt;
                                &amp;lt;/BSBasicInput&amp;gt;
                            &amp;lt;/BSTableCell&amp;gt;
                            &amp;lt;BSTableCell&amp;gt;&amp;lt;BSBasicInput Class=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;form-control-sm&amp;quot;&lt;/span&gt; InputType=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;InputType.Text&amp;quot;&lt;/span&gt; Value=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;@column.ConditionValue&amp;quot;&lt;/span&gt; @onchange=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;@SetColumnInput&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;/BSBasicInput&amp;gt;&amp;lt;/BSTableCell&amp;gt;
                            &amp;lt;BSTableCell&amp;gt;@column.Description&amp;lt;/BSTableCell&amp;gt;
                        &amp;lt;/BSTableRow&amp;gt;
                            }

                        @&lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (columnInput.Count == &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;)
                            {
                        &amp;lt;tr&amp;gt;
                            &amp;lt;td colspan=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;8&amp;quot;&lt;/span&gt;&amp;gt;No Records&amp;lt;/td&amp;gt;
                        &amp;lt;/tr&amp;gt;
                            }
                    &amp;lt;/BSTableBody&amp;gt;

                &amp;lt;/BSTable&amp;gt;
&lt;/pre&gt;


&lt;p&gt;SelectボックスなどのInputが操作されるたびに、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;が値を取り直しています。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;        public async void SetColumnInput()
        {
            columnInput = await JSRuntime.InvokeAsync&amp;lt;List&amp;lt;ColumnInput&amp;gt;&amp;gt;(&amp;#34;tableDataManager.getTableValues&amp;#34;);
        }&lt;/pre&gt;


&lt;p&gt;これにより、テーブルを構成しているオブジェクトの値を最新に保つようにしています。&lt;/p&gt;

&lt;h2&gt;Blazor でアプリを作る上で感じたポイント&lt;/h2&gt;

&lt;p&gt;と、ここまで私の課題と解決アプローチをお話してきたのですが、これが「まっとうな」「ベスト」といえるアプローチに行き着くことができていない、というのが正直なところです。&lt;/p&gt;

&lt;p&gt;なので、この発表をした牛タン会議では、最終的に会場に居る素晴らしいMS MVP の方々へ「どうしたらよかっただろう？」というのを聞く！　というが本来の目的だったのですが&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191217/20191217212547.png&quot; alt=&quot;f:id:sugimomoto:20191217212547p:plain&quot; title=&quot;f:id:sugimomoto:20191217212547p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ちょっと会場の時間が押していたこともあり、なくなく断念となりました（泣&lt;/p&gt;

&lt;p&gt;というわけで、せっかくなので、このBlogでもヒドイコードを晒して対応アプローチを募ってみたい、と思っています。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fsugimomoto%2FSmaregiAPP.APIExplorer.Blazor&quot; title=&quot;sugimomoto/SmaregiAPP.APIExplorer.Blazor&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/sugimomoto/SmaregiAPP.APIExplorer.Blazor&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、私がこの経験を通じて得た教訓は「できる限り値は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0&quot;&gt;バインディング&lt;/a&gt;するに限る。直接的な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0&quot;&gt;バインディング&lt;/a&gt;なのか、間接的な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0&quot;&gt;バインディング&lt;/a&gt;に問わず」というものでした。&lt;/p&gt;

&lt;p&gt;（こんなBlogでいいのだろうか。）&lt;/p&gt;

&lt;p&gt;おしまい&lt;/p&gt;
</hatena:formatted-content>
        <category term="Blazor" />
        <category term="C#" />
        <category term="API" />
        <app:control>
            <app:draft>no</app:draft>
        </app:control>
    </entry>
    <entry>
        <id>tag:blog.hatena.ne.jp,2013:blog-sugimomoto-8454420450088934728-26006613479269217</id>
        <link rel="edit" href="https://blog.hatena.ne.jp/sugimomoto/kageura.hatenadiary.jp/atom/entry/26006613479269217"/>
        <link rel="alternate" type="text/html" href="http://kageura.hatenadiary.jp/entry/2019/12/09/mulesoftkintone"/>
        <author>
            <name>sugimomoto</name>
        </author>
        <title>MuleSoft AnyPoint Studio で kintone をデータソースとした Customer アプリ参照APIを作成する：CData kintone MuleSoft Connector</title>
        <updated>2019-12-09T20:48:18+09:00</updated>
        <published>2019-12-09T20:48:18+09:00</published>
        <app:edited>2019-12-09T20:51:20+09:00</app:edited>
        <summary type="text">この記事は MuleSoft Advent Calendar 2019 の9日目の記事として投稿しています。 qiita.com 今回この記事では、CData Software で提供しているkintone をデータソースとして、kintone の顧客管理用のアプリを抽象化したA…</summary>
        <content type="text/x-markdown">この記事は MuleSoft Advent Calendar 2019 の9日目の記事として投稿しています。

[https://qiita.com/advent-calendar/2019/MuleSoft:embed:cite]

今回この記事では、CData Software で提供しているkintone をデータソースとして、kintone の顧客管理用のアプリを抽象化したAPIを作成してみようと思います。

[f:id:sugimomoto:20191209203429p:plain]



[:contents]



&lt;!-- more --&gt;


# そもそもなぜ抽象化したAPIを作成するのか？

この記事で実際にできあがるものは、シンプルなAPI一つです。

以下のような kintone の顧客管理用アプリ（Customersとしています）を


[f:id:sugimomoto:20191209203435p:plain]


「GET 0.0.0.0:8081/api/customers/1」のようなHTTPリクエストで取得できるようにする、というものです。

[f:id:sugimomoto:20191209203444p:plain]

でも、kintone をご存知の方であれば、別に kintone のAPIをそのまま実行すればいいだけじゃないか？　と思いませんか？

ここからは、MuleSoft のコンセプトそのものの話（詳しくはこちらもどうぞ https://qiita.com/mitch_oka/items/63d6323782c27e02fba6）となりますが、MuleSoftは単純なAPI作成のサービスではなく、企業のビジネスモデルをAPIという側面から全体整理し開発者・エンドユーザーへのエクスペリエンスを高めるためのトータルソリューションです。

それは、RDBで構成されたデータをAPI化するといった単純なものではなく、すでに企業内に存在する各種SaaSやPaaSのAPIも含めて、APIファシリティを整え、オーケストレーションし、監視・管理を行います。

おそらくそのアーキテクチャを端的にわかりやすく示しているのが、MuleSoftが推奨している以下の3レイヤーの考え方でしょう。


[f:id:sugimomoto:20191209203449p:plain]

https://www.MuleSoft.com/resources/api/leveraging-digital-transformation-right

すべての企業データは現在様々なサービス・DB（RDB・NoSQL問わず）管理され、フロントエンドはそれらの情報単一のデータソースではなく、複合的なデータソースから、特定のビジネスシナリオを元に要求します。

そうなった時、各データソースのAPIエクスペリエンスがばらばらであっては、開発はもちろんのこと、再利用性、監視、管理の観点で大きくコストが発生します。顧客のデータを取得したいのに、取得したいデータの実体は、SalesforceとMarketoとSAPに存在していた、そしてそれら一つ一つの仕様の違うAPIリクエストロジックを書いていたら・・・、と考えると、なかなか怖いことがイメージできるのではないでしょうか。

MuleSoftはそこをまず、System APIs レイヤーとして、データモデルベースでシンプルなAPIとして調え、Process APIsレイヤーでフロントエンドの要求するAPIの処理を束ねます。

これにより、様々な媒体・チャネルから要求されるAPIのエクスペリエンスを高めようというのが、MuleSoftのコンセプトであると考えられます。

そんなMuleSoftでは、System APIs レイヤーの拡張性を高めるために、数々のコネクターを提供しています。SalesforceやBox、Marketoなど、50種類ほどの提供されています。

https://docs.MuleSoft.com/connectors/

しかしながら、例えばSendgridやSharePointを使いたい、もしくは日本国内の企業であれば kintone や Sansan に顧客情報が管理されていて、それらをデータソースとして使えないと厳しいといった場合もあると思います。

そこを、CData MuleSoft Connectors でカバーしてしまうというのが今回のお話です。

[f:id:sugimomoto:20191209203458p:plain]

# kintone Cusomter API の作り方

それでは、早速 kitnone Cusotmer APIを作ってみたいと思います。なお、必要な環境はMuleSoft AnyPoint Studioに準じます。

また、Design CenterとExchangeも使うので、予めAnypoint Platform のアカウントも用意しておいてください。

今回作成するAPIは、以下のRAMLで定義されたシンプルなAPIです。



[https://gist.github.com/sugimomoto/d4b9dbee5955767166ef2d55adbb6212:embed:cite]



前述の通り、以下のようなAPIリクエストを行い、URIに含まれるIDを元にして、kintone の Customer アプリを検索し、レスポンスを返します。

「GET 0.0.0.0:8081/api/customers/1」

# kintone MuleSoft Connector のダウンロード・セットアップ

最初に kintone MuleSoft Connector をダウンロードします。以下のURLからトライアルがダウンロード可能となっています。

https://www.cdata.com/drivers/kintone/mule/

[f:id:sugimomoto:20191209203521p:plain]

ZIPファイルがダウンロードできるので、任意のフォルダへ解凍してください。

[f:id:sugimomoto:20191209203529p:plain]

トライアルライセンスはjava コマンドから実行することで、アクティベーションできます。

java -jar cdata.muleLicenseInstaller.kintone.jar

[f:id:sugimomoto:20191209203535p:plain]

## API定義の作成

次にAnypoint Platform にログインし、Design Center を使って、API定義を作成します。

[f:id:sugimomoto:20191209203544p:plain]

「Design Center」→「Create API specification」を選択し

[f:id:sugimomoto:20191209203554p:plain]

Code editor でCustomer APIを作成します。

[f:id:sugimomoto:20191209203601p:plain]

「https://gist.github.com/sugimomoto/d4b9dbee5955767166ef2d55adbb6212」のRAML定義を貼り付けて、ExchangeにPublishすれば準備完了です。

[f:id:sugimomoto:20191209203607p:plain]

## AnyPoint Studio の準備

次に、AnyPoint Studioを立ち上げてプロジェクトを作成します。

ここで、API 定義をExhcnageからインポートします。

[f:id:sugimomoto:20191209203615p:plain]

対象のAccountを追加し、Cusomter APIを検索すると、先程Exchangeに登録したAPI定義が表示されるので、これを追加します。

[f:id:sugimomoto:20191209203620p:plain]

併せてProject内で kintone MuleSoft Connector を使えるようにセットアップします。

「Install Artifact in local repository」をクリックし

[f:id:sugimomoto:20191209203626p:plain]

先程配置したkintone MuleSoft connector の「KintoneMuleSoftConnector\connectors」フォルダから「cdata-kintone-connector-19.0.7216-mule-plugin.jar」を参照して、インストールします。

[f:id:sugimomoto:20191209203631p:plain]

[f:id:sugimomoto:20191209203635p:plain]

あとはProjectの「pom.xml」を開いて、以下のXMLを追加（バージョンはHelpに記載されているものを使用してください）すれば設定完了です。

```xml

        &lt;!-- CData kintone --&gt;
		&lt;dependency&gt;
		    &lt;groupId&gt;org.cdata.connectors&lt;/groupId&gt;
		    &lt;artifactId&gt;cdata-kintone-connector&lt;/artifactId&gt;
		    &lt;version&gt;19.0.7216&lt;/version&gt;
		    &lt;classifier&gt;mule-plugin&lt;/classifier&gt;
		&lt;/dependency&gt;

```
	
[f:id:sugimomoto:20191209203644p:plain]

うまく設定されていれば、以下のようにCData kintone MuleSoft Connectorの各モジュールがパレットに表示されます。

[f:id:sugimomoto:20191209203650p:plain]

## Cusomter APIの処理を実装する

それでは、実際にCusomter APIの内部処理を作っていきましょう。

まずは、ListnerでAPIをコールできるように設定を行います。

[f:id:sugimomoto:20191209203715p:plain]

今回はローカルだけで試すので、ProtocolはHTTP、Hostは「0.0.0.0」、Portは「8081」を設定しました。

[f:id:sugimomoto:20191209203721p:plain]

次に、kitnone からのデータ取得処理を記述します。パレットからCData kintone の「Select」モジュールを以下のように配置します。

[f:id:sugimomoto:20191209203726p:plain]

Connector Configrationをクリックし、kintone への接続情報を入力します。最低限必要な情報は以下の3種類です。

- URL：kintone のURL：例 htt@s://XXXX.cybozu.com
- User：kintoneのログインユーザー
- Password：kintone のログインユーザーパスワード

入力後 Test Conection をクリックし、接続で切れいればOKです。

[f:id:sugimomoto:20191209203733p:plain]


次に、kintone からデータを取得する部分を記述します。CData kinonte MuleSoft Connector はkinonte のAPIをRDBに仮想化し、SQLでデータの操作を可能にします。

まず、InputParameterでURLパラメータから渡ってきて、事前に変数に格納されているcustomerIdを定義します。「{&quot;Id&quot;: vars.customerId}」

次にSQL Query のフォームでIDを元にkintone の Recordを検索するクエリ「SELECT * FROM Customers Where RecordId = :Id;」を書きます。これだけで、kintone のAPI仕様を意識することなく、データの取得処理を記述できます。

[f:id:sugimomoto:20191209203739p:plain]

あとは、取得したデータを最終的なレスポンスのJSONにマッピングします。

Transform Messageにて、渡ってきたPayloadの最初のレコードを変数に格納し、kintoneの各カラムをマッピングします。MuleSoftが海外のプラットフォームなので若干心配だったんですが、日本語カラムも問題なく利用できるのがいいですね。

```
%dw 2.0
output application/json
var customer = payload[0]
---
{
  customerId: customer.RecordId,
  companyName: customer.&quot;会社名&quot;,
  customerFullName: customer.&quot;担当者名&quot;,
  address: customer.&quot;住所&quot;,
  email: customer.&quot;メールアドレス&quot;
}
```

[f:id:sugimomoto:20191209203747p:plain]

それでは、APIを実行してみましょう。「Run」ボタンをクリック後、APIが実行状態になるのを待ちます。

[f:id:sugimomoto:20191209203755p:plain]

実行されたら、PostmanやCURLなどから、HTTPリクエスト「GET 0.0.0.0:8081/api/customers/1」を投げます。

すると、以下のようにkintone からレコードを検索し、顧客情報が取得できました。番号を変えると、その番号に応じて、kintone を検索してきます。

[f:id:sugimomoto:20191209203802p:plain]

# おわりに

今回は 参照API を作成する部分を中心として行いましたが、CData MuleSoft ConnectorはINSERT・UPDATE・DELETEにも対応しているので、例えば問い合わせフォーム用のAPIを作成し、kintone へ顧客登録し、Salesforceに問い合わせ情報を入力する、みたいなことも可能になります。

ぜひ企業内の様々なAPIの構築、統合、管理に活用してみてください。

[https://www.cdata.com/jp/mule/:title]</content>
        <hatena:formatted-content type="text/html" xmlns:hatena="http://www.hatena.ne.jp/info/xmlns#">&lt;p&gt;この記事は MuleSoft Advent Calendar 2019 の9日目の記事として投稿しています。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fadvent-calendar%2F2019%2FMuleSoft&quot; title=&quot;MuleSoft Advent Calendar 2019 - Qiita&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2019/MuleSoft&quot;&gt;qiita.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;今回この記事では、CData Software で提供しているkintone をデータソースとして、kintone の顧客管理用のアプリを抽象化した&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を作成してみようと思います。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203429.png&quot; alt=&quot;f:id:sugimomoto:20191209203429p:plain&quot; title=&quot;f:id:sugimomoto:20191209203429p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul class=&quot;table-of-contents&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;#そもそもなぜ抽象化したAPIを作成するのか&quot;&gt;そもそもなぜ抽象化したAPIを作成するのか？&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#kintone-Cusomter-API-の作り方&quot;&gt;kintone Cusomter API の作り方&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#kintone-MuleSoft-Connector-のダウンロードセットアップ&quot;&gt;kintone MuleSoft Connector のダウンロード・セットアップ&lt;/a&gt;&lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#API定義の作成&quot;&gt;API定義の作成&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#AnyPoint-Studio-の準備&quot;&gt;AnyPoint Studio の準備&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#Cusomter-APIの処理を実装する&quot;&gt;Cusomter APIの処理を実装する&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#おわりに&quot;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;そもそもなぜ抽象化したAPIを作成するのか&quot;&gt;そもそもなぜ抽象化した&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を作成するのか？&lt;/h1&gt;

&lt;p&gt;この記事で実際にできあがるものは、シンプルな&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;一つです。&lt;/p&gt;

&lt;p&gt;以下のような kintone の顧客管理用アプリ（Customersとしています）を&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203435.png&quot; alt=&quot;f:id:sugimomoto:20191209203435p:plain&quot; title=&quot;f:id:sugimomoto:20191209203435p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;「GET 0.0.0.0:8081/&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/api&quot;&gt;api&lt;/a&gt;/customers/1」のようなHTTPリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トで取得できるようにする、というものです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203444.png&quot; alt=&quot;f:id:sugimomoto:20191209203444p:plain&quot; title=&quot;f:id:sugimomoto:20191209203444p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;でも、kintone をご存知の方であれば、別に kintone の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;をそのまま実行すればいいだけじゃないか？　と思いませんか？&lt;/p&gt;

&lt;p&gt;ここからは、MuleSoft のコンセプトそのものの話（詳しくはこちらもどうぞ &lt;a href=&quot;https://qiita.com/mitch_oka/items/63d6323782c27e02fba6&quot;&gt;https://qiita.com/mitch_oka/items/63d6323782c27e02fba6&lt;/a&gt;）となりますが、MuleSoftは単純な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;作成のサービスではなく、企業のビジネスモデルを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;という側面から全体整理し開発者・エンドユーザーへのエクス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DA%A5%EA%A5%A8&quot;&gt;ペリエ&lt;/a&gt;ンスを高めるためのトータルソリューションです。&lt;/p&gt;

&lt;p&gt;それは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RDB&quot;&gt;RDB&lt;/a&gt;で構成されたデータを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;化するといった単純なものではなく、すでに企業内に存在する各種&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SaaS&quot;&gt;SaaS&lt;/a&gt;やPaaSの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;も含めて、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;ファシリティを整え、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%B1%A5%B9%A5%C8%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;オーケストレーション&lt;/a&gt;し、監視・管理を行います。&lt;/p&gt;

&lt;p&gt;おそらくその&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3&quot;&gt;アーキテクチャ&lt;/a&gt;を端的にわかりやすく示しているのが、MuleSoftが推奨している以下の3レイヤーの考え方でしょう。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203449.png&quot; alt=&quot;f:id:sugimomoto:20191209203449p:plain&quot; title=&quot;f:id:sugimomoto:20191209203449p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.MuleSoft.com/resources/api/leveraging-digital-transformation-right&quot;&gt;https://www.MuleSoft.com/resources/api/leveraging-digital-transformation-right&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;すべての企業データは現在様々なサービス・DB（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RDB&quot;&gt;RDB&lt;/a&gt;・NoSQL問わず）管理され、フロントエンドはそれらの情報単一のデータソースではなく、複合的なデータソースから、特定のビジネスシナリオを元に要求します。&lt;/p&gt;

&lt;p&gt;そうなった時、各データソースの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;エクス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DA%A5%EA%A5%A8&quot;&gt;ペリエ&lt;/a&gt;ンスがばらばらであっては、開発はもちろんのこと、再利用性、監視、管理の観点で大きくコストが発生します。顧客のデータを取得したいのに、取得したいデータの実体は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Salesforce&quot;&gt;Salesforce&lt;/a&gt;とMarketoとSAPに存在していた、そしてそれら一つ一つの仕様の違う&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;リク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トロジックを書いていたら・・・、と考えると、なかなか怖いことがイメージできるのではないでしょうか。&lt;/p&gt;

&lt;p&gt;MuleSoftはそこをまず、System APIs レイヤーとして、データモデルベースでシンプルな&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;として調え、Process APIsレイヤーでフロントエンドの要求する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の処理を束ねます。&lt;/p&gt;

&lt;p&gt;これにより、様々な媒体・チャネルから要求される&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のエクス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DA%A5%EA%A5%A8&quot;&gt;ペリエ&lt;/a&gt;ンスを高めようというのが、MuleSoftのコンセプトであると考えられます。&lt;/p&gt;

&lt;p&gt;そんなMuleSoftでは、System APIs レイヤーの拡張性を高めるために、数々のコ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%CD%A5%AF%A5%BF%A1%BC&quot;&gt;ネクター&lt;/a&gt;を提供しています。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Salesforce&quot;&gt;Salesforce&lt;/a&gt;やBox、Marketoなど、50種類ほどの提供されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.MuleSoft.com/connectors/&quot;&gt;https://docs.MuleSoft.com/connectors/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;しかしながら、例えばSendgridや&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SharePoint&quot;&gt;SharePoint&lt;/a&gt;を使いたい、もしくは日本国内の企業であれば kintone や Sansan に顧客情報が管理されていて、それらをデータソースとして使えないと厳しいといった場合もあると思います。&lt;/p&gt;

&lt;p&gt;そこを、CData MuleSoft Connectors でカバーしてしまうというのが今回のお話です。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203458.png&quot; alt=&quot;f:id:sugimomoto:20191209203458p:plain&quot; title=&quot;f:id:sugimomoto:20191209203458p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;kintone-Cusomter-API-の作り方&quot;&gt;kintone Cusomter &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; の作り方&lt;/h1&gt;

&lt;p&gt;それでは、早速 kitnone Cusotmer &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を作ってみたいと思います。なお、必要な環境はMuleSoft AnyPoint Studioに準じます。&lt;/p&gt;

&lt;p&gt;また、Design CenterとExchangeも使うので、予めAnypoint Platform のアカウントも用意しておいてください。&lt;/p&gt;

&lt;p&gt;今回作成する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;は、以下のRAMLで定義されたシンプルな&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/sugimomoto/d4b9dbee5955767166ef2d55adbb6212.js&quot;&gt; &lt;/script&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://gist.github.com/sugimomoto/d4b9dbee5955767166ef2d55adbb6212&quot;&gt;gist.github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;前述の通り、以下のような&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;リク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを行い、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;に含まれるIDを元にして、kintone の Customer アプリを検索し、レスポンスを返します。&lt;/p&gt;

&lt;p&gt;「GET 0.0.0.0:8081/&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/api&quot;&gt;api&lt;/a&gt;/customers/1」&lt;/p&gt;

&lt;h1 id=&quot;kintone-MuleSoft-Connector-のダウンロードセットアップ&quot;&gt;kintone MuleSoft Connector のダウンロード・セットアップ&lt;/h1&gt;

&lt;p&gt;最初に kintone MuleSoft Connector をダウンロードします。以下のURLからトライアルがダウンロード可能となっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cdata.com/drivers/kintone/mule/&quot;&gt;https://www.cdata.com/drivers/kintone/mule/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203521.png&quot; alt=&quot;f:id:sugimomoto:20191209203521p:plain&quot; title=&quot;f:id:sugimomoto:20191209203521p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ZIPファイルがダウンロードできるので、任意のフォルダへ解凍してください。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203529.png&quot; alt=&quot;f:id:sugimomoto:20191209203529p:plain&quot; title=&quot;f:id:sugimomoto:20191209203529p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;トライアルライセンスは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/java&quot;&gt;java&lt;/a&gt; コマンドから実行することで、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%C6%A5%A3%A5%D9%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;アクティベーション&lt;/a&gt;できます。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/java&quot;&gt;java&lt;/a&gt; -jar cdata.muleLicenseInstaller.kintone.jar&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203535.png&quot; alt=&quot;f:id:sugimomoto:20191209203535p:plain&quot; title=&quot;f:id:sugimomoto:20191209203535p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;API定義の作成&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;定義の作成&lt;/h2&gt;

&lt;p&gt;次にAnypoint Platform にログインし、Design Center を使って、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;定義を作成します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203544.png&quot; alt=&quot;f:id:sugimomoto:20191209203544p:plain&quot; title=&quot;f:id:sugimomoto:20191209203544p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;「Design Center」→「Create &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; specification」を選択し&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203554.png&quot; alt=&quot;f:id:sugimomoto:20191209203554p:plain&quot; title=&quot;f:id:sugimomoto:20191209203554p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Code editor でCustomer &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を作成します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203601.png&quot; alt=&quot;f:id:sugimomoto:20191209203601p:plain&quot; title=&quot;f:id:sugimomoto:20191209203601p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;「&lt;a href=&quot;https://gist.github.com/sugimomoto/d4b9dbee5955767166ef2d55adbb6212&quot;&gt;https://gist.github.com/sugimomoto/d4b9dbee5955767166ef2d55adbb6212&lt;/a&gt;」のRAML定義を貼り付けて、ExchangeにPublishすれば準備完了です。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203607.png&quot; alt=&quot;f:id:sugimomoto:20191209203607p:plain&quot; title=&quot;f:id:sugimomoto:20191209203607p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;AnyPoint-Studio-の準備&quot;&gt;AnyPoint Studio の準備&lt;/h2&gt;

&lt;p&gt;次に、AnyPoint Studioを立ち上げてプロジェクトを作成します。&lt;/p&gt;

&lt;p&gt;ここで、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; 定義をExhcnageからインポートします。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203615.png&quot; alt=&quot;f:id:sugimomoto:20191209203615p:plain&quot; title=&quot;f:id:sugimomoto:20191209203615p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;対象のAccountを追加し、Cusomter &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を検索すると、先程Exchangeに登録した&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;定義が表示されるので、これを追加します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203620.png&quot; alt=&quot;f:id:sugimomoto:20191209203620p:plain&quot; title=&quot;f:id:sugimomoto:20191209203620p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;併せてProject内で kintone MuleSoft Connector を使えるようにセットアップします。&lt;/p&gt;

&lt;p&gt;「Install Artifact in local repository」をクリックし&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203626.png&quot; alt=&quot;f:id:sugimomoto:20191209203626p:plain&quot; title=&quot;f:id:sugimomoto:20191209203626p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;先程配置したkintone MuleSoft connector の「KintoneMuleSoftConnector\connectors」フォルダから「cdata-kintone-connector-19.0.7216-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/mule&quot;&gt;mule&lt;/a&gt;-plugin.jar」を参照して、インストールします。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203631.png&quot; alt=&quot;f:id:sugimomoto:20191209203631p:plain&quot; title=&quot;f:id:sugimomoto:20191209203631p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203635.png&quot; alt=&quot;f:id:sugimomoto:20191209203635p:plain&quot; title=&quot;f:id:sugimomoto:20191209203635p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;あとはProjectの「pom.&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/xml&quot;&gt;xml&lt;/a&gt;」を開いて、以下の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/XML&quot;&gt;XML&lt;/a&gt;を追加（バージョンはHelpに記載されているものを使用してください）すれば設定完了です。&lt;/p&gt;

&lt;pre class=&quot;code lang-xml&quot; data-lang=&quot;xml&quot; data-unlink&gt;
        &lt;span class=&quot;synComment&quot;&gt;&amp;lt;!-- CData kintone --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.cdata.connectors&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;cdata-kintone-connector&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;19.0.7216&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;classifier&amp;gt;&lt;/span&gt;mule-plugin&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/classifier&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203644.png&quot; alt=&quot;f:id:sugimomoto:20191209203644p:plain&quot; title=&quot;f:id:sugimomoto:20191209203644p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;うまく設定されていれば、以下のようにCData kintone MuleSoft Connectorの各モジュールがパレットに表示されます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203650.png&quot; alt=&quot;f:id:sugimomoto:20191209203650p:plain&quot; title=&quot;f:id:sugimomoto:20191209203650p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;Cusomter-APIの処理を実装する&quot;&gt;Cusomter &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の処理を実装する&lt;/h2&gt;

&lt;p&gt;それでは、実際にCusomter &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の内部処理を作っていきましょう。&lt;/p&gt;

&lt;p&gt;まずは、Listnerで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;をコールできるように設定を行います。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203715.png&quot; alt=&quot;f:id:sugimomoto:20191209203715p:plain&quot; title=&quot;f:id:sugimomoto:20191209203715p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;今回はローカルだけで試すので、ProtocolはHTTP、Hostは「0.0.0.0」、Portは「8081」を設定しました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203721.png&quot; alt=&quot;f:id:sugimomoto:20191209203721p:plain&quot; title=&quot;f:id:sugimomoto:20191209203721p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;次に、kitnone からのデータ取得処理を記述します。パレットからCData kintone の「Select」モジュールを以下のように配置します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203726.png&quot; alt=&quot;f:id:sugimomoto:20191209203726p:plain&quot; title=&quot;f:id:sugimomoto:20191209203726p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Connector Configrationをクリックし、kintone への接続情報を入力します。最低限必要な情報は以下の3種類です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;URL：kintone のURL：例 htt@s://XXXX.&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/cybozu&quot;&gt;cybozu&lt;/a&gt;.com&lt;/li&gt;
&lt;li&gt;User：kintoneのログインユーザー&lt;/li&gt;
&lt;li&gt;Password：kintone のログインユーザーパスワード&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;入力後 Test Conection をクリックし、接続で切れいればOKです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203733.png&quot; alt=&quot;f:id:sugimomoto:20191209203733p:plain&quot; title=&quot;f:id:sugimomoto:20191209203733p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;次に、kintone からデータを取得する部分を記述します。CData kinonte MuleSoft Connector はkinonte の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RDB&quot;&gt;RDB&lt;/a&gt;に仮想化し、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SQL&quot;&gt;SQL&lt;/a&gt;でデータの操作を可能にします。&lt;/p&gt;

&lt;p&gt;まず、InputParameterでURLパラメータから渡ってきて、事前に変数に格納されているcustomerIdを定義します。「{&quot;Id&quot;: vars.customerId}」&lt;/p&gt;

&lt;p&gt;次に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SQL&quot;&gt;SQL&lt;/a&gt; Query のフォームでIDを元にkintone の Recordを検索するクエリ「SELECT * FROM Customers Where RecordId = :Id;」を書きます。これだけで、kintone の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;仕様を意識することなく、データの取得処理を記述できます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203739.png&quot; alt=&quot;f:id:sugimomoto:20191209203739p:plain&quot; title=&quot;f:id:sugimomoto:20191209203739p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;あとは、取得したデータを最終的なレスポンスの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;します。&lt;/p&gt;

&lt;p&gt;Transform Messageにて、渡ってきたPayloadの最初のレコードを変数に格納し、kintoneの各カラムを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;します。MuleSoftが海外のプラットフォームなので若干心配だったんですが、日本語カラムも問題なく利用できるのがいいですね。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;%dw 2.0
output application/json
var customer = payload[0]
---
{
  customerId: customer.RecordId,
  companyName: customer.&amp;#34;会社名&amp;#34;,
  customerFullName: customer.&amp;#34;担当者名&amp;#34;,
  address: customer.&amp;#34;住所&amp;#34;,
  email: customer.&amp;#34;メールアドレス&amp;#34;
}&lt;/pre&gt;


&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203747.png&quot; alt=&quot;f:id:sugimomoto:20191209203747p:plain&quot; title=&quot;f:id:sugimomoto:20191209203747p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;それでは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を実行してみましょう。「Run」ボタンをクリック後、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;が実行状態になるのを待ちます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203755.png&quot; alt=&quot;f:id:sugimomoto:20191209203755p:plain&quot; title=&quot;f:id:sugimomoto:20191209203755p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;実行されたら、Postmanや&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CURL&quot;&gt;CURL&lt;/a&gt;などから、HTTPリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;ト「GET 0.0.0.0:8081/&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/api&quot;&gt;api&lt;/a&gt;/customers/1」を投げます。&lt;/p&gt;

&lt;p&gt;すると、以下のようにkintone からレコードを検索し、顧客情報が取得できました。番号を変えると、その番号に応じて、kintone を検索してきます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191209/20191209203802.png&quot; alt=&quot;f:id:sugimomoto:20191209203802p:plain&quot; title=&quot;f:id:sugimomoto:20191209203802p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;おわりに&quot;&gt;おわりに&lt;/h1&gt;

&lt;p&gt;今回は 参照&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; を作成する部分を中心として行いましたが、CData MuleSoft ConnectorはINSERT・UPDATE・DELETEにも対応しているので、例えば問い合わせフォーム用の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を作成し、kintone へ顧客登録し、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Salesforce&quot;&gt;Salesforce&lt;/a&gt;に問い合わせ情報を入力する、みたいなことも可能になります。&lt;/p&gt;

&lt;p&gt;ぜひ企業内の様々な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の構築、統合、管理に活用してみてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cdata.com/jp/mule/&quot;&gt;https://www.cdata.com/jp/mule/&lt;/a&gt;&lt;/p&gt;
</hatena:formatted-content>
        <category term="MuleSoft" />
        <category term="API" />
        <category term="kintone" />
        <app:control>
            <app:draft>no</app:draft>
        </app:control>
    </entry>
    <entry>
        <id>tag:blog.hatena.ne.jp,2013:blog-sugimomoto-8454420450088934728-26006613473353024</id>
        <link rel="edit" href="https://blog.hatena.ne.jp/sugimomoto/kageura.hatenadiary.jp/atom/entry/26006613473353024"/>
        <link rel="alternate" type="text/html" href="http://kageura.hatenadiary.jp/entry/blazorkintoneado"/>
        <author>
            <name>sugimomoto</name>
        </author>
        <title>ASP.NET Core Blazor C# で CData ADO.NET Provider kintone を使う</title>
        <updated>2019-12-01T10:00:00+09:00</updated>
        <published>2019-12-01T09:38:09+09:00</published>
        <app:edited>2019-12-03T16:22:06+09:00</app:edited>
        <summary type="text">最近 Blazor を触り始めました！ JavaScriptフレームワークがjQueryで止まっている私（Reactはちょこっと触ったけど）にはめちゃくちゃありがたいフレームワークだなと思いながら、楽しんでいます。 Blazorは .NET ライブラリ・既存の .NET エコシス…</summary>
        <content type="text/x-markdown">[f:id:sugimomoto:20191129194451p:plain]

最近 Blazor を触り始めました！

JavaScriptフレームワークがjQueryで止まっている私（Reactはちょこっと触ったけど）にはめちゃくちゃありがたいフレームワークだなと思いながら、楽しんでいます。

Blazorは .NET ライブラリ・既存の .NET エコシステムを流用できるのが大きなポイントです。やっぱり JSON.NET とか REST Clientとか使いたい。

[https://docs.microsoft.com/ja-jp/aspnet/core/blazor/?view=aspnetcore-3.0:embed:cite]

そして、私の会社で提供している CData ADO.NET Provider も .NET Core 対応をしていたので、これならイケそうじゃん？　と思い、試してみました。


&lt;!-- more --&gt;


# CData ADO.NET Provider について

今回は kintone API に接続するためのProvider CData ADO.NET Provider for kintone を使ってみました。

kintone API（REST API）は通常、以下のリファレンスにあるようなデータの取得アプローチを行いますが

[https://developer.cybozu.io/hc/ja/articles/202331474#q1:embed:cite]

CData ADO.NET Provider では、以下のように通常であればRDBに接続するフレームワークである ADO.NET DataAdapterやLinqToSQL（もしくは[Dapper](http://kageura.hatenadiary.jp/entry/dappercdata)などのORMを挟んでもいいです）で、kintoneのデータにアクセスできるようになります。

```cs
string connectionString = &quot;User=myuseraccount;Password=mypassword;Url=http://subdomain.domain.com;GuestSpaceId=myspaceid&quot;;
 
using (KintoneConnection connection = new KintoneConnection(connectionString)) {
  KintoneDataAdapter dataAdapter = new KintoneDataAdapter(
  &quot;SELECT CreatorName, Text FROM Comments&quot;, connection);
 
  DataTable table = new DataTable();
  dataAdapter.Fill(table);
 
  Console.WriteLine(&quot;Contents of Comments.&quot;);
 
  foreach (DataRow row in table.Rows) {
    Console.WriteLine(&quot;{0}: {1}&quot;, row[&quot;CreatorName&quot;], row[&quot;Text&quot;]);
  }
}
```

http://cdn.cdata.com/help/EKE/jp/ado/pg_ADOqueriestable.htm

上記コードはSELECTですが、INSERT・UPDATE・DELETEにも対応しているので、kintone アプリのデータは柔軟に操作可能です。

# Blazor で使ってみる

Blazor で使うからといって特に特別なことが必要なわけではありません。

もちろん、RDB向けのドライバーと違い最終的にはHTTPリクエストが行われるので、サーバーサイド Blazorとしてサーバーサイドから実行されるのか、クライアントサイド Blazorとして、実行中のブラウザからHTTPリクエストが行われるのかの違いはあります。そのあたりはネットワークやプロキシの設定として注意が必要でしょう。

今回はとりあえずプロジェクトテンプレートでデフォルト生成される サーバーサイドBlazorで試してみました。

まずは以下のURLから CData ADO.NET Provider for kintone のトライアルを入手します。

https://www.cdata.com/jp/drivers/kintone/ado/

[f:id:sugimomoto:20191129194041p:plain]

インストールは特に難しいところはありません。EULAを確認し次へ次へと進めていくだけです。

[f:id:sugimomoto:20191129194324p:plain]

Visual Studio を立ち上げて、Blazor アプリのプロジェクトを作成します。

[f:id:sugimomoto:20191129193718p:plain]

プロジェクトを作成したら「C:\Program Files\CData\CData ADO.NET Provider for kintone 2019J\lib\netstandard2.0」から「System.Data.CData.Kintone.dll」を参照してください。

[f:id:sugimomoto:20191129193801p:plain]

あとは、ADO.NET Provider 接続部分をKintoneConnectionに切り替えて、DataAdapterを利用するだけです。

あまりこんな書き方はしないと思いますが、せっかく Blazorなので、そのままrazorページでコールしてみました。


[https://gist.github.com/sugimomoto/a1be405a75de47186d87c70c2ac3e81e:embed:cite]



接続文字列には、kintoneのURL、IDとパスワードを指定します。また、CData Driverの都合上、ライセンスが接続文字列埋込み型になるので、試したい方はCData サポートデスク（support@cdata.co.jp）までご連絡ください。

実行すると、このような形でkintoneからデータ取得を行い、HTMLテーブル形式にレンダリングしています。

[f:id:sugimomoto:20191129193821p:plain]

もうちょっとスタイルを整えれば、以下のような感じにもできます。

通常Kintone APIがサポートしないようなCountやJOINなんかも駆使できるのがいいですね。


[https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/kintoneado.gif:image=https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/kintoneado.gif]


簡易的に社内で kintone 連携の外部アプリを作りたい時とかいいですね。

Blazor自身、もちろんまだまだ課題も多いフレームワークだと思いますが、C#を触っている人間からすると、直感的に書けるのが大変ありがたいですね。

なお、この記事は「CData Software User Group Advent Calendar 2019」の1日目の記事としても書いています。

[https://qiita.com/advent-calendar/2019/cdatasoftware:embed:cite]

</content>
        <hatena:formatted-content type="text/html" xmlns:hatena="http://www.hatena.ne.jp/info/xmlns#">&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129194451.png&quot; alt=&quot;f:id:sugimomoto:20191129194451p:plain&quot; title=&quot;f:id:sugimomoto:20191129194451p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;最近 Blazor を触り始めました！&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF&quot;&gt;フレームワーク&lt;/a&gt;が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/jQuery&quot;&gt;jQuery&lt;/a&gt;で止まっている私（Reactはちょこっと触ったけど）にはめちゃくちゃありがたい&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF&quot;&gt;フレームワーク&lt;/a&gt;だなと思いながら、楽しんでいます。&lt;/p&gt;

&lt;p&gt;Blazorは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%20.NET&quot;&gt; .NET&lt;/a&gt; ライブラリ・既存の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%20.NET&quot;&gt; .NET&lt;/a&gt; エコシステムを流用できるのが大きなポイントです。やっぱり &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;.NET とか REST Clientとか使いたい。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.microsoft.com%2Fja-jp%2Faspnet%2Fcore%2Fblazor%2F%3Fview%3Daspnetcore-3.0&quot; title=&quot;ASP.NET Core Blazor の概要&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://docs.microsoft.com/ja-jp/aspnet/core/blazor/?view=aspnetcore-3.0&quot;&gt;docs.microsoft.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;そして、私の会社で提供している CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; Provider も&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%20.NET&quot;&gt; .NET&lt;/a&gt; Core 対応をしていたので、これならイケそうじゃん？　と思い、試してみました。&lt;/p&gt;

&lt;h1&gt;CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; Provider について&lt;/h1&gt;

&lt;p&gt;今回は kintone &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; に接続するためのProvider CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; Provider for kintone を使ってみました。&lt;/p&gt;

&lt;p&gt;kintone &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/REST%20API&quot;&gt;REST API&lt;/a&gt;）は通常、以下のリファレンスにあるようなデータの取得アプローチを行いますが&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.cybozu.io%2Fhc%2Fja%2Farticles%2F202331474%23q1&quot; title=&quot;レコードの取得（GET）&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://developer.cybozu.io/hc/ja/articles/202331474#q1&quot;&gt;developer.cybozu.io&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; Provider では、以下のように通常であれば&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RDB&quot;&gt;RDB&lt;/a&gt;に接続する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF&quot;&gt;フレームワーク&lt;/a&gt;である &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; DataAdapterやLinqToSQL（もしくは&lt;a href=&quot;http://kageura.hatenadiary.jp/entry/dappercdata&quot;&gt;Dapper&lt;/a&gt;などのORMを挟んでもいいです）で、kintoneのデータにアクセスできるようになります。&lt;/p&gt;

&lt;pre class=&quot;code lang-cs&quot; data-lang=&quot;cs&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt; connectionString = &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;User=myuseraccount;Password=mypassword;Url=http://subdomain.domain.com;GuestSpaceId=myspaceid&amp;quot;&lt;/span&gt;;
 
&lt;span class=&quot;synStatement&quot;&gt;using&lt;/span&gt; (KintoneConnection connection = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; KintoneConnection(connectionString)) {
  KintoneDataAdapter dataAdapter = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; KintoneDataAdapter(
  &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;SELECT CreatorName, Text FROM Comments&amp;quot;&lt;/span&gt;, connection);
 
  DataTable table = &lt;span class=&quot;synStatement&quot;&gt;new&lt;/span&gt; DataTable();
  dataAdapter.Fill(table);
 
  Console.WriteLine(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Contents of Comments.&amp;quot;&lt;/span&gt;);
 
  &lt;span class=&quot;synStatement&quot;&gt;foreach&lt;/span&gt; (DataRow row &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt; table.Rows) {
    Console.WriteLine(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;{0}: {1}&amp;quot;&lt;/span&gt;, row[&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;CreatorName&amp;quot;&lt;/span&gt;], row[&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Text&amp;quot;&lt;/span&gt;]);
  }
}
&lt;/pre&gt;


&lt;p&gt;&lt;a href=&quot;http://cdn.cdata.com/help/EKE/jp/ado/pg_ADOqueriestable.htm&quot;&gt;http://cdn.cdata.com/help/EKE/jp/ado/pg_ADOqueriestable.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記コードはSELECTですが、INSERT・UPDATE・DELETEにも対応しているので、kintone アプリのデータは柔軟に操作可能です。&lt;/p&gt;

&lt;h1&gt;Blazor で使ってみる&lt;/h1&gt;

&lt;p&gt;Blazor で使うからといって特に特別なことが必要なわけではありません。&lt;/p&gt;

&lt;p&gt;もちろん、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RDB&quot;&gt;RDB&lt;/a&gt;向けのドライバーと違い最終的にはHTTPリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トが行われるので、サーバーサイド Blazorとしてサーバーサイドから実行されるのか、クライアントサイド Blazorとして、実行中のブラウザからHTTPリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トが行われるのかの違いはあります。そのあたりはネットワークやプロキシの設定として注意が必要でしょう。&lt;/p&gt;

&lt;p&gt;今回はとりあえずプロジェクトテンプレートでデフォルト生成される サーバーサイドBlazorで試してみました。&lt;/p&gt;

&lt;p&gt;まずは以下のURLから CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; Provider for kintone のトライアルを入手します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cdata.com/jp/drivers/kintone/ado/&quot;&gt;https://www.cdata.com/jp/drivers/kintone/ado/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129194041.png&quot; alt=&quot;f:id:sugimomoto:20191129194041p:plain&quot; title=&quot;f:id:sugimomoto:20191129194041p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;インストールは特に難しいところはありません。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/EULA&quot;&gt;EULA&lt;/a&gt;を確認し次へ次へと進めていくだけです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129194324.png&quot; alt=&quot;f:id:sugimomoto:20191129194324p:plain&quot; title=&quot;f:id:sugimomoto:20191129194324p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Visual%20Studio&quot;&gt;Visual Studio&lt;/a&gt; を立ち上げて、Blazor アプリのプロジェクトを作成します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129193718.png&quot; alt=&quot;f:id:sugimomoto:20191129193718p:plain&quot; title=&quot;f:id:sugimomoto:20191129193718p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;プロジェクトを作成したら「C:\Program Files\CData\CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; Provider for kintone 2019J\lib\netstandard2.0」から「System.Data.CData.Kintone.dll」を参照してください。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129193801.png&quot; alt=&quot;f:id:sugimomoto:20191129193801p:plain&quot; title=&quot;f:id:sugimomoto:20191129193801p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;あとは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; Provider 接続部分をKintoneConnectionに切り替えて、DataAdapterを利用するだけです。&lt;/p&gt;

&lt;p&gt;あまりこんな書き方はしないと思いますが、せっかく Blazorなので、そのままrazorページでコールしてみました。&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/sugimomoto/a1be405a75de47186d87c70c2ac3e81e.js&quot;&gt; &lt;/script&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://gist.github.com/sugimomoto/a1be405a75de47186d87c70c2ac3e81e&quot;&gt;gist.github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;接続文字列には、kintoneのURL、IDとパスワードを指定します。また、CData Driverの都合上、ライセンスが接続文字列埋込み型になるので、試したい方はCData サポートデスク（support@cdata.co.jp）までご連絡ください。&lt;/p&gt;

&lt;p&gt;実行すると、このような形でkintoneからデータ取得を行い、HTMLテーブル形式に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0&quot;&gt;レンダリング&lt;/a&gt;しています。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129193821.png&quot; alt=&quot;f:id:sugimomoto:20191129193821p:plain&quot; title=&quot;f:id:sugimomoto:20191129193821p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;もうちょっとスタイルを整えれば、以下のような感じにもできます。&lt;/p&gt;

&lt;p&gt;通常Kintone &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;がサポートしないようなCountやJOINなんかも駆使できるのがいいですね。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/kintoneado.gif&quot; class=&quot;http-image&quot;&gt;&lt;img src=&quot;https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/kintoneado.gif&quot; class=&quot;http-image&quot; alt=&quot;https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/kintoneado.gif&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;簡易的に社内で kintone 連携の外部アプリを作りたい時とかいいですね。&lt;/p&gt;

&lt;p&gt;Blazor自身、もちろんまだまだ課題も多い&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF&quot;&gt;フレームワーク&lt;/a&gt;だと思いますが、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/C%23&quot;&gt;C#&lt;/a&gt;を触っている人間からすると、直感的に書けるのが大変ありがたいですね。&lt;/p&gt;

&lt;p&gt;なお、この記事は「CData Software User Group Advent Calendar 2019」の1日目の記事としても書いています。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fadvent-calendar%2F2019%2Fcdatasoftware&quot; title=&quot;CData Software Advent Calendar 2019 - Qiita&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2019/cdatasoftware&quot;&gt;qiita.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</hatena:formatted-content>
        <category term=".NET" />
        <category term=".NET Core" />
        <category term="kintone" />
        <category term="API" />
        <category term="CData" />
        <app:control>
            <app:draft>no</app:draft>
        </app:control>
    </entry>
    <entry>
        <id>tag:blog.hatena.ne.jp,2013:blog-sugimomoto-8454420450088934728-26006613473295934</id>
        <link rel="edit" href="https://blog.hatena.ne.jp/sugimomoto/kageura.hatenadiary.jp/atom/entry/26006613473295934"/>
        <link rel="alternate" type="text/html" href="http://kageura.hatenadiary.jp/entry/dynamics365bc"/>
        <author>
            <name>sugimomoto</name>
        </author>
        <title>Dynamics 365 Business Central のトライアル取得方法と API の使い方</title>
        <updated>2019-11-29T19:51:27+09:00</updated>
        <published>2019-11-29T19:51:27+09:00</published>
        <app:edited>2019-12-03T16:22:26+09:00</app:edited>
        <summary type="text">Dynamics 365 Business Central のトライアルは個人的に何回か取得しているんですが、かなり毎回勘所を忘れてしまうので、書き残しておきたいと思います。 また、ざっとAPIを使うための下地も見えたので、OAuthやAzureADへの登録などのあたりも併せて。</summary>
        <content type="text/x-markdown">Dynamics 365 Business Central のトライアルは個人的に何回か取得しているんですが、かなり毎回勘所を忘れてしまうので、書き残しておきたいと思います。

また、ざっとAPIを使うための下地も見えたので、OAuthやAzureADへの登録などのあたりも併せて。


&lt;!-- more --&gt;


# Dynamics 365 Business Centralって何？

https://dynamics.microsoft.com/ja-jp/business-central/overview/

Dynamics 365 Business Central は中小企業向けに最適化されたMicrosoftが提供するERPパッケージの一つです。他にもう少し大きな企業向けの Finance がありますが、アーキテクチャやAPI仕様は全然違うので注意しましょう。

[f:id:sugimomoto:20191129175200p:plain]

# Business Central のトライアル取得方法

今回はそんなBusiness Centralのトライアルを取得するのですが、今の所日本の環境ではトライアルを取得できません。なので、英語版にうまくアクセスできるようにしたり、USリージョンのOffice365アカウントが必要だったりするので、注意が必要です。

何はともあれ、まずはUSリージョンのOffice365アカウントを取得しておきます。いろんな方法がありますが、せっかくなので Dynamics 365 ライセンスで取得してしまいましょう。

まず、以下のURLにアクセスして、Dynamics 365 CRM系（SalesやCustomer Service）を選択し、「こちらからサインアップ」をクリックします。

https://trials.dynamics.com/Dynamics365/Signup/sales

[f:id:sugimomoto:20191129175207p:plain]

以下のようなダイアログが表示されますが、「いいえ、サインアップを続行します」をクリックします。

[f:id:sugimomoto:20191129175214p:plain]

サインアップ画面にたどり着いたら、一番最初にリージョンを選択するプルダウンリストがあるので、ここで「United States」を選択します。あとは、そのまま案内通りにアカウントを作成すればOKです。（以降は割愛）

[f:id:sugimomoto:20191129175219p:plain]

次に、作成したOffice365アカウントを使って、Business Centralのトライアルを取得します。取得しますが、ここで一点注意が必要です。

Dynamics 365 はユーザーの言語設定で表示するアイテムを変えています。なので、ブラウザの言語設定を英語に変更してください。Chromeですと、以下のようにSettings→Advanced→LangageからEnglishを選択することで、対応可能です。設定後、一度ブラウザの再起動が必要なので注意してください。

[f:id:sugimomoto:20191129175227p:plain]

そうしたら、再度トライアルのセットアップ画面に移動します。すると、Business Centralのメニューが増えているのがわかるかなと思います。ここでBusiness Centralを選択し、事前に取得したUSリージョンのアカウントでGET STARTEDを実行します。

https://trials.dynamics.com/Dynamics365/Signup/sales

[f:id:sugimomoto:20191129175236p:plain]

ライセンスの確認などのチェックが完了すれば晴れて以下のように環境のデプロイメントが開始されます。

[f:id:sugimomoto:20191129175242p:plain]

少し待てば、このように、Business Centralの画面が表示されます。USのアカウントや言語設定など、ひっかかりポイントはあるものの、そこさえ押さえてしまえば難しいところはあまりありません。


[f:id:sugimomoto:20191129175251p:plain]

# API を使う準備

さて、せっかく環境を手に入れたので、APIを叩いてみましょう。

Business CentralのAPI Referenceは以下のURLで公開されています。

https://docs.microsoft.com/en-us/dynamics-nav/api-reference/v1.0/

https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-develop-connect-apps

認証にはいくつかアプローチがありますが、今後スタンダードとして間違いの無い、Azure ADベースのOAuth 2.0 で行ってみます。

まず、Office365 管理センターなどから、Azure ADの管理画面に移動し、アプリケーションの登録を行います。

今回はローカルホストから接続するので、リダイレクトURLは「http://localhost:33333」としました。ここはポートがあいていれば、任意のものでOKです。

[f:id:sugimomoto:20191129175305p:plain]

次に、APIのアクセス許可を設定します。Dynamics 365 Business Centralが一覧にあるので、こちらを選択し

[f:id:sugimomoto:20191129175313p:plain]

「委任されたアクセス許可」から「user_impresonation」を選択します。この場合、最終的にユーザーログインが必須となるので、注意しましょう。

アプリケーション認証もあるようですが、私は現在未チェック。今後余裕があればきっと、、、。

[f:id:sugimomoto:20191129175322p:plain]

あとはクライアントシークレットを生成し

[f:id:sugimomoto:20191129175330p:plain]

アプリケーションIDをコピーすれば準備完了です。

[f:id:sugimomoto:20191129175337p:plain]

APIアクセスを行う前に、自身の環境情報をチェックしておきましょう。

Business Central のTOPページに移動したときに表示されるこのURLに必要情報が含まれています。

[f:id:sugimomoto:20191129175353p:plain]

このGUID（edb74166-0f9c-4489-92ff-9e2d3c1b68f4）とCompany（CRONUS%20USA%2C%20Inc.）をAPIリクエストで利用します。

https://businesscentral.dynamics.com/edb74166-0f9c-4489-92ff-9e2d3c1b68f4/?company=CRONUS%20USA%2C%20Inc.&amp;dc=0

# APIリクエストを行う

それでは実際にAPIリクエストを行います。ここはお馴染みPOSTMANでいってみましょう。Postmanを立ち上げて、新しいリクエストを作成し、「Authorization」→「OAuth2.0」を選択、「Get New AccessToken」をクリックします。

[f:id:sugimomoto:20191129175530p:plain]

OAuth 2.0 の設定値は以下のような感じです。ここで予め取得しておいたAzure ADアプリの情報を使います。（ちなみにこれらの情報は削除済みなので、使えません。あしからず。わかりやすいように生の情報を置いています）

- GrantType：Authorization Code
- Callback URL：http://localhost:33333（Azure ADで設定したリダイレクトURL）
- Auth URL：https://login.windows.net/{GUID}/oauth2/authorize?resource=https://api.businesscentral.dynamics.com（GUIDをテナントIDに置き換える）
- Access Token URL：https://login.windows.net/{GUID}/oauth2/token（GUIDをテナントIDに置き換える）
- Client ID：11f3530c-3444-4dd6-91b3-fc8b5394c9d1（Azure ADから取得したもの）
- Client Secret：vhkjHm4:mJ@6le?xqqH9mA/59C7GA]93（Azure ADから取得したもの）

[f:id:sugimomoto:20191129175408p:plain]

設定後、Request Tokenをクリックすると、ログイン画面が立ち上がるので、対象のアカウントでログインしましょう。

[f:id:sugimomoto:20191129175715p:plain]

ログイン後、Permissionの許可を行えば、完了です。

[f:id:sugimomoto:20191129175751p:plain]

無事、アクセストークンが取得できました。

[f:id:sugimomoto:20191129175816p:plain]

では、実際にAPIアクセスしてみましょう。

API Endpointは「https://api.businesscentral.dynamics.com/v1.0/{GUID}/ODataV4/」で、

Metadata APIはこんなURLになります。「https://api.businesscentral.dynamics.com/v1.0/{GUID}/ODataV4/$metadata」

まずは、Metadata APIから。GETリクエストで「https://api.businesscentral.dynamics.com/v1.0/{GUID}/ODataV4/$metadata」を指定するだけでOKです。

[f:id:sugimomoto:20191129175853p:plain]

次に、SalesOpportunitiesを取得してみましょう。Business CentralではTenantIDの他に、Companyでそれぞれリソースが分けられているので、URIにその指定を挟む必要があります。

その指定の後に、取得したいリソース名を付与するので、こんな感じのURIになります。

https://api.businesscentral.dynamics.com/v1.0/edb74166-0f9c-4489-92ff-9e2d3c1b68f4/ODataV4/Company(&#39;CRONUS%20USA%2C%20Inc.&#39;)/SalesOpportunities 

Companyは知っていれば以下のようにGUID指定でもかまいません。

https://api.businesscentral.dynamics.com/v1.0/edb74166-0f9c-4489-92ff-9e2d3c1b68f4/ODataV4/Company(&#39;246d9e77-cf80-4bba-8f28-5047c573a9cc&#39;)/SalesOpportunities 

こんな感じで取得できます。

[f:id:sugimomoto:20191129175921p:plain]

URIのポイントさえ押さえれば、Dynamics 365 CRM系と同じ用にアクセスできるのではないかなと思います。

# APIを追加したい場合

さて、Business Centralは多数のリソースを抱えているので、予め定義されたリソースやクエリしかAPIとしてアクセスできません。なので、このビューで取得したいなーと思った場合には、API設定を追加する必要があります。

例えば、この Customer And Salesperson のビューを追加したい場合は

[f:id:sugimomoto:20191129175934p:plain]

検索ボタンから「Web」で検索し、「Web Services」を選択します。

[f:id:sugimomoto:20191129175942p:plain]

すると、現在Web APIでアクセス可能なリストの一覧が表示されるので、新しくここに追加するために「＋NEW」をクリック

[f:id:sugimomoto:20191129175949p:plain]

後ろの方に行が追加されるので、Object TypeでQueryを選択します。

[f:id:sugimomoto:20191129180005p:plain]

次に定義するリソースを探します。Object IDのところから「select from full list」を選択し

[f:id:sugimomoto:20191129180017p:plain]

一覧画面を開いてから、Customerと入力。すると、「Cusotmer and Salesperson」のビュー定義が見つかるので、これを選択して追加します。

[f:id:sugimomoto:20191129180025p:plain]

最後にAPIでアクセスする際のリソースIDを指定します。ここは重複しない任意のIDを入力すればOKです。

[f:id:sugimomoto:20191129180032p:plain]

Publicにチェックを入れて、他の行にカーソルを合わせると、以下のようにURIが定義されます。これでAPIアクセスが可能になります。

[f:id:sugimomoto:20191129180041p:plain]

生成されたURLはこんな感じです。

https://api.businesscentral.dynamics.com/v2.0/edb74166-0f9c-4489-92ff-9e2d3c1b68f4/Production/ODataV4/Company(&#39;CRONUS%20USA%2C%20Inc.&#39;)/CustomerAndSalesperson

[f:id:sugimomoto:20191129180049p:plain]

もちろん、Postmanからも。

[f:id:sugimomoto:20191129180057p:plain]

以上です。</content>
        <hatena:formatted-content type="text/html" xmlns:hatena="http://www.hatena.ne.jp/info/xmlns#">&lt;p&gt;Dynamics 365 Business Central のトライアルは個人的に何回か取得しているんですが、かなり毎回勘所を忘れてしまうので、書き残しておきたいと思います。&lt;/p&gt;

&lt;p&gt;また、ざっと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を使うための下地も見えたので、OAuthやAzureADへの登録などのあたりも併せて。&lt;/p&gt;

&lt;h1&gt;Dynamics 365 Business Centralって何？&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://dynamics.microsoft.com/ja-jp/business-central/overview/&quot;&gt;https://dynamics.microsoft.com/ja-jp/business-central/overview/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dynamics 365 Business Central は中小企業向けに最適化された&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Microsoft&quot;&gt;Microsoft&lt;/a&gt;が提供する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ERP&quot;&gt;ERP&lt;/a&gt;パッケージの一つです。他にもう少し大きな企業向けの Finance がありますが、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3&quot;&gt;アーキテクチャ&lt;/a&gt;や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;仕様は全然違うので注意しましょう。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175200.png&quot; alt=&quot;f:id:sugimomoto:20191129175200p:plain&quot; title=&quot;f:id:sugimomoto:20191129175200p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;Business Central のトライアル取得方法&lt;/h1&gt;

&lt;p&gt;今回はそんなBusiness Centralのトライアルを取得するのですが、今の所日本の環境ではトライアルを取得できません。なので、英語版にうまくアクセスできるようにしたり、USリージョンのOffice365アカウントが必要だったりするので、注意が必要です。&lt;/p&gt;

&lt;p&gt;何はともあれ、まずはUSリージョンのOffice365アカウントを取得しておきます。いろんな方法がありますが、せっかくなので Dynamics 365 ライセンスで取得してしまいましょう。&lt;/p&gt;

&lt;p&gt;まず、以下のURLにアクセスして、Dynamics 365 &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CRM&quot;&gt;CRM&lt;/a&gt;系（SalesやCustomer Service）を選択し、「こちらからサインアップ」をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://trials.dynamics.com/Dynamics365/Signup/sales&quot;&gt;https://trials.dynamics.com/Dynamics365/Signup/sales&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175207.png&quot; alt=&quot;f:id:sugimomoto:20191129175207p:plain&quot; title=&quot;f:id:sugimomoto:20191129175207p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;以下のようなダイアログが表示されますが、「いいえ、サインアップを続行します」をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175214.png&quot; alt=&quot;f:id:sugimomoto:20191129175214p:plain&quot; title=&quot;f:id:sugimomoto:20191129175214p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;サインアップ画面にたどり着いたら、一番最初にリージョンを選択するプルダウンリストがあるので、ここで「United States」を選択します。あとは、そのまま案内通りにアカウントを作成すればOKです。（以降は割愛）&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175219.png&quot; alt=&quot;f:id:sugimomoto:20191129175219p:plain&quot; title=&quot;f:id:sugimomoto:20191129175219p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;次に、作成したOffice365アカウントを使って、Business Centralのトライアルを取得します。取得しますが、ここで一点注意が必要です。&lt;/p&gt;

&lt;p&gt;Dynamics 365 はユーザーの言語設定で表示するアイテムを変えています。なので、ブラウザの言語設定を英語に変更してください。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Chrome&quot;&gt;Chrome&lt;/a&gt;ですと、以下のようにSettings→Advanced→LangageからEnglishを選択することで、対応可能です。設定後、一度ブラウザの再起動が必要なので注意してください。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175227.png&quot; alt=&quot;f:id:sugimomoto:20191129175227p:plain&quot; title=&quot;f:id:sugimomoto:20191129175227p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;そうしたら、再度トライアルのセットアップ画面に移動します。すると、Business Centralのメニューが増えているのがわかるかなと思います。ここでBusiness Centralを選択し、事前に取得したUSリージョンのアカウントでGET STARTEDを実行します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://trials.dynamics.com/Dynamics365/Signup/sales&quot;&gt;https://trials.dynamics.com/Dynamics365/Signup/sales&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175236.png&quot; alt=&quot;f:id:sugimomoto:20191129175236p:plain&quot; title=&quot;f:id:sugimomoto:20191129175236p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ライセンスの確認などのチェックが完了すれば晴れて以下のように環境のデプロイメントが開始されます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175242.png&quot; alt=&quot;f:id:sugimomoto:20191129175242p:plain&quot; title=&quot;f:id:sugimomoto:20191129175242p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;少し待てば、このように、Business Centralの画面が表示されます。USのアカウントや言語設定など、ひっかかりポイントはあるものの、そこさえ押さえてしまえば難しいところはあまりありません。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175251.png&quot; alt=&quot;f:id:sugimomoto:20191129175251p:plain&quot; title=&quot;f:id:sugimomoto:20191129175251p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; を使う準備&lt;/h1&gt;

&lt;p&gt;さて、せっかく環境を手に入れたので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を叩いてみましょう。&lt;/p&gt;

&lt;p&gt;Business Centralの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Referenceは以下のURLで公開されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dynamics-nav/api-reference/v1.0/&quot;&gt;https://docs.microsoft.com/en-us/dynamics-nav/api-reference/v1.0/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-develop-connect-apps&quot;&gt;https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-develop-connect-apps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;認証にはいくつかアプローチがありますが、今後スタンダードとして間違いの無い、Azure ADベースのOAuth 2.0 で行ってみます。&lt;/p&gt;

&lt;p&gt;まず、Office365 管理センターなどから、Azure ADの管理画面に移動し、アプリケーションの登録を行います。&lt;/p&gt;

&lt;p&gt;今回はローカルホストから接続するので、リダイレクトURLは「&lt;a href=&quot;http://localhost:33333&quot;&gt;http://localhost:33333&lt;/a&gt;」としました。ここはポートがあいていれば、任意のものでOKです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175305.png&quot; alt=&quot;f:id:sugimomoto:20191129175305p:plain&quot; title=&quot;f:id:sugimomoto:20191129175305p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;次に、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のアクセス許可を設定します。Dynamics 365 Business Centralが一覧にあるので、こちらを選択し&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175313.png&quot; alt=&quot;f:id:sugimomoto:20191129175313p:plain&quot; title=&quot;f:id:sugimomoto:20191129175313p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;「委任されたアクセス許可」から「user_impresonation」を選択します。この場合、最終的にユーザーログインが必須となるので、注意しましょう。&lt;/p&gt;

&lt;p&gt;アプリケーション認証もあるようですが、私は現在未チェック。今後余裕があればきっと、、、。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175322.png&quot; alt=&quot;f:id:sugimomoto:20191129175322p:plain&quot; title=&quot;f:id:sugimomoto:20191129175322p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;あとはクライアントシークレットを生成し&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175330.png&quot; alt=&quot;f:id:sugimomoto:20191129175330p:plain&quot; title=&quot;f:id:sugimomoto:20191129175330p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;アプリケーションIDをコピーすれば準備完了です。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175337.png&quot; alt=&quot;f:id:sugimomoto:20191129175337p:plain&quot; title=&quot;f:id:sugimomoto:20191129175337p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;アクセスを行う前に、自身の環境情報をチェックしておきましょう。&lt;/p&gt;

&lt;p&gt;Business Central のTOPページに移動したときに表示されるこのURLに必要情報が含まれています。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175353.png&quot; alt=&quot;f:id:sugimomoto:20191129175353p:plain&quot; title=&quot;f:id:sugimomoto:20191129175353p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;このGUID（edb74166-0f9c-4489-92ff-9e2d3c1b68f4）とCompany（CRONUS%20USA%2C%20Inc.）を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;リク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トで利用します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://businesscentral.dynamics.com/edb74166-0f9c-4489-92ff-9e2d3c1b68f4/?company=CRONUS%20USA%2C%20Inc.&amp;dc=0&quot;&gt;https://businesscentral.dynamics.com/edb74166-0f9c-4489-92ff-9e2d3c1b68f4/?company=CRONUS%20USA%2C%20Inc.&amp;dc=0&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;リク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを行う&lt;/h1&gt;

&lt;p&gt;それでは実際に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;リク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを行います。ここはお馴染みPOSTMANでいってみましょう。Postmanを立ち上げて、新しいリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを作成し、「Authorization」→「OAuth2.0」を選択、「Get New AccessToken」をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175530.png&quot; alt=&quot;f:id:sugimomoto:20191129175530p:plain&quot; title=&quot;f:id:sugimomoto:20191129175530p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;OAuth 2.0 の設定値は以下のような感じです。ここで予め取得しておいたAzure ADアプリの情報を使います。（ちなみにこれらの情報は削除済みなので、使えません。あしからず。わかりやすいように生の情報を置いています）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GrantType：Authorization Code&lt;/li&gt;
&lt;li&gt;Callback URL：&lt;a href=&quot;http://localhost:33333&quot;&gt;http://localhost:33333&lt;/a&gt;（Azure ADで設定したリダイレクトURL）&lt;/li&gt;
&lt;li&gt;Auth URL：&lt;a href=&quot;https://login.windows.net/&quot;&gt;https://login.windows.net/&lt;/a&gt;{GUID}/oauth2/authorize?resource=&lt;a href=&quot;https://api.businesscentral.dynamics.com&quot;&gt;https://api.businesscentral.dynamics.com&lt;/a&gt;（GUIDをテナントIDに置き換える）&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Access&quot;&gt;Access&lt;/a&gt; Token URL：&lt;a href=&quot;https://login.windows.net/&quot;&gt;https://login.windows.net/&lt;/a&gt;{GUID}/oauth2/token（GUIDをテナントIDに置き換える）&lt;/li&gt;
&lt;li&gt;Client ID：11f3530c-3444-4dd6-91b3-fc8b5394c9d1（Azure ADから取得したもの）&lt;/li&gt;
&lt;li&gt;Client Secret：vhkjHm4:mJ@6le?xqqH9mA/59C7GA]93（Azure ADから取得したもの）&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175408.png&quot; alt=&quot;f:id:sugimomoto:20191129175408p:plain&quot; title=&quot;f:id:sugimomoto:20191129175408p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;設定後、Request Tokenをクリックすると、ログイン画面が立ち上がるので、対象のアカウントでログインしましょう。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175715.png&quot; alt=&quot;f:id:sugimomoto:20191129175715p:plain&quot; title=&quot;f:id:sugimomoto:20191129175715p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ログイン後、Permissionの許可を行えば、完了です。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175751.png&quot; alt=&quot;f:id:sugimomoto:20191129175751p:plain&quot; title=&quot;f:id:sugimomoto:20191129175751p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;無事、アクセス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ンが取得できました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175816.png&quot; alt=&quot;f:id:sugimomoto:20191129175816p:plain&quot; title=&quot;f:id:sugimomoto:20191129175816p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;では、実際に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;アクセスしてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Endpointは「&lt;a href=&quot;https://api.businesscentral.dynamics.com/v1.0/&quot;&gt;https://api.businesscentral.dynamics.com/v1.0/&lt;/a&gt;{GUID}/ODataV4/」で、&lt;/p&gt;

&lt;p&gt;Metadata &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;はこんなURLになります。「&lt;a href=&quot;https://api.businesscentral.dynamics.com/v1.0/&quot;&gt;https://api.businesscentral.dynamics.com/v1.0/&lt;/a&gt;{GUID}/ODataV4/$metadata」&lt;/p&gt;

&lt;p&gt;まずは、Metadata &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;から。GETリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トで「&lt;a href=&quot;https://api.businesscentral.dynamics.com/v1.0/&quot;&gt;https://api.businesscentral.dynamics.com/v1.0/&lt;/a&gt;{GUID}/ODataV4/$metadata」を指定するだけでOKです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175853.png&quot; alt=&quot;f:id:sugimomoto:20191129175853p:plain&quot; title=&quot;f:id:sugimomoto:20191129175853p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;次に、SalesOpportunitiesを取得してみましょう。Business CentralではTenantIDの他に、Companyでそれぞれリソースが分けられているので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;にその指定を挟む必要があります。&lt;/p&gt;

&lt;p&gt;その指定の後に、取得したいリソース名を付与するので、こんな感じの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://api.businesscentral.dynamics.com/v1.0/edb74166-0f9c-4489-92ff-9e2d3c1b68f4/ODataV4/Company(&#39;CRONUS%20USA%2C%20Inc.&#39;)/SalesOpportunities&quot;&gt;https://api.businesscentral.dynamics.com/v1.0/edb74166-0f9c-4489-92ff-9e2d3c1b68f4/ODataV4/Company(&#39;CRONUS%20USA%2C%20Inc.&#39;)/SalesOpportunities&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Companyは知っていれば以下のようにGUID指定でもかまいません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://api.businesscentral.dynamics.com/v1.0/edb74166-0f9c-4489-92ff-9e2d3c1b68f4/ODataV4/Company(&#39;246d9e77-cf80-4bba-8f28-5047c573a9cc&#39;)/SalesOpportunities&quot;&gt;https://api.businesscentral.dynamics.com/v1.0/edb74166-0f9c-4489-92ff-9e2d3c1b68f4/ODataV4/Company(&#39;246d9e77-cf80-4bba-8f28-5047c573a9cc&#39;)/SalesOpportunities&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こんな感じで取得できます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175921.png&quot; alt=&quot;f:id:sugimomoto:20191129175921p:plain&quot; title=&quot;f:id:sugimomoto:20191129175921p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;のポイントさえ押さえれば、Dynamics 365 &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CRM&quot;&gt;CRM&lt;/a&gt;系と同じ用にアクセスできるのではないかなと思います。&lt;/p&gt;

&lt;h1&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を追加したい場合&lt;/h1&gt;

&lt;p&gt;さて、Business Centralは多数のリソースを抱えているので、予め定義されたリソースやクエリしか&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;としてアクセスできません。なので、このビューで取得したいなーと思った場合には、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;設定を追加する必要があります。&lt;/p&gt;

&lt;p&gt;例えば、この Customer And Salesperson のビューを追加したい場合は&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175934.png&quot; alt=&quot;f:id:sugimomoto:20191129175934p:plain&quot; title=&quot;f:id:sugimomoto:20191129175934p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;検索ボタンから「Web」で検索し、「Web Services」を選択します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175942.png&quot; alt=&quot;f:id:sugimomoto:20191129175942p:plain&quot; title=&quot;f:id:sugimomoto:20191129175942p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;すると、現在Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;でアクセス可能なリストの一覧が表示されるので、新しくここに追加するために「＋NEW」をクリック&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129175949.png&quot; alt=&quot;f:id:sugimomoto:20191129175949p:plain&quot; title=&quot;f:id:sugimomoto:20191129175949p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;後ろの方に行が追加されるので、Object TypeでQueryを選択します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129180005.png&quot; alt=&quot;f:id:sugimomoto:20191129180005p:plain&quot; title=&quot;f:id:sugimomoto:20191129180005p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;次に定義するリソースを探します。Object IDのところから「select from full list」を選択し&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129180017.png&quot; alt=&quot;f:id:sugimomoto:20191129180017p:plain&quot; title=&quot;f:id:sugimomoto:20191129180017p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;一覧画面を開いてから、Customerと入力。すると、「Cusotmer and Salesperson」のビュー定義が見つかるので、これを選択して追加します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129180025.png&quot; alt=&quot;f:id:sugimomoto:20191129180025p:plain&quot; title=&quot;f:id:sugimomoto:20191129180025p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;最後に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;でアクセスする際のリソースIDを指定します。ここは重複しない任意のIDを入力すればOKです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129180032.png&quot; alt=&quot;f:id:sugimomoto:20191129180032p:plain&quot; title=&quot;f:id:sugimomoto:20191129180032p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Publicにチェックを入れて、他の行にカーソルを合わせると、以下のように&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;が定義されます。これで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;アクセスが可能になります。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129180041.png&quot; alt=&quot;f:id:sugimomoto:20191129180041p:plain&quot; title=&quot;f:id:sugimomoto:20191129180041p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;生成されたURLはこんな感じです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://api.businesscentral.dynamics.com/v2.0/edb74166-0f9c-4489-92ff-9e2d3c1b68f4/Production/ODataV4/Company(&#39;CRONUS%20USA%2C%20Inc.&#39;)/CustomerAndSalesperson&quot;&gt;https://api.businesscentral.dynamics.com/v2.0/edb74166-0f9c-4489-92ff-9e2d3c1b68f4/Production/ODataV4/Company(&#39;CRONUS%20USA%2C%20Inc.&#39;)/CustomerAndSalesperson&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129180049.png&quot; alt=&quot;f:id:sugimomoto:20191129180049p:plain&quot; title=&quot;f:id:sugimomoto:20191129180049p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;もちろん、Postmanからも。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191129/20191129180057.png&quot; alt=&quot;f:id:sugimomoto:20191129180057p:plain&quot; title=&quot;f:id:sugimomoto:20191129180057p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;以上です。&lt;/p&gt;
</hatena:formatted-content>
        <category term="Dynamics 365 Business Central" />
        <category term="API" />
        <category term="OData" />
        <category term="Postman" />
        <app:control>
            <app:draft>no</app:draft>
        </app:control>
    </entry>
    <entry>
        <id>tag:blog.hatena.ne.jp,2013:blog-sugimomoto-8454420450088934728-26006613468571378</id>
        <link rel="edit" href="https://blog.hatena.ne.jp/sugimomoto/kageura.hatenadiary.jp/atom/entry/26006613468571378"/>
        <link rel="alternate" type="text/html" href="http://kageura.hatenadiary.jp/entry/dappercdata"/>
        <author>
            <name>sugimomoto</name>
        </author>
        <title>ADO.NET ORM の Dapper で CData ADO.NET Provider の使い方</title>
        <updated>2019-11-20T13:55:24+09:00</updated>
        <published>2019-11-20T13:55:24+09:00</published>
        <app:edited>2019-12-03T16:22:46+09:00</app:edited>
        <summary type="text">最近 Sansan の中の人のBlogで「今までEntityFrameworksとDapperを使っていたけれど、軽量なDapperを全面的に採用しました」というのを見かけました。 buildersbox.corp-sansan.com 私自身が今まで Dapper を使ったこと…</summary>
        <content type="text/x-markdown">最近 Sansan の中の人のBlogで「今までEntityFrameworksとDapperを使っていたけれど、軽量なDapperを全面的に採用しました」というのを見かけました。



[https://buildersbox.corp-sansan.com/entry/2019/10/23/110000:embed:cite]



私自身が今まで Dapper を使ったことが無かったので、どんな感じなのかな？　という点と、ADO.NET ベースなら、CData ADO.NET Providerも動くでしょ！　と思ったので、検証してみた結果をまとめてみたいと思います。


&lt;!-- more --&gt;


# Dapper とは？

[f:id:sugimomoto:20191120135238p:plain]

[https://dapper-tutorial.net/:embed:cite]



C#用の軽量なORMです。C# のORMといえば、EntityFrameworkが有名かつMicrosoftが提供していることもあるのでスタンダードな印象ですが、

EntityFrameworkはSQLクエリのレイヤーをあまり意識せず（あまりね）、扱うことができるのが特徴だと思いますが、DapperではSQL自体は自身で記述して、そこから取得したデータをオブジェクトにマッピングしてくれるのが特徴です。

# シンプルなDapperの使い方

一番シンプルなSELECTクエリで試してみたいと思います。チュートリアルは[こちら](https://dapper-tutorial.net/query)を参照。

なお、今回は.NET Core 3.0・Visual Studio 2019で試しています。

とりあえず、nuget で Dapperを入手しましょう。

```
PM&gt; Install-Package Dapper
```

対象となるデータベースおよびテーブルはお馴染みAdventureWorksのProductsテーブルです。

[f:id:sugimomoto:20191120135040p:plain]

使い方は、一度でもDataAdapter を使ってSQL Serverにアクセスしたことがある人であれば、難しくないと思います。

SqlConectionを生成し、QueryメソッドでSQLを渡すだけです。その際に格納したいClassを指定すれば、そのまま項目がClassのプロパティにマッピングされていきます。手軽で素晴らしい。



[https://gist.github.com/sugimomoto/fa472dd420b5a4e494276736b9407ee2:embed:cite]



こんな感じで取得できました。

[f:id:sugimomoto:20191120135054p:plain]


# CData ADO.NET で Dapperを使う方法

次に CData ADO.NET を経由してDapperを利用してみたいと思います。

CData ADO.NET Providerは各種クラウドサービスWeb API（kintoneやSalesforceやDynamics 365等）やNoSQL（MongoDBやRedis等）にADO.NETベースでのアクセスを可能にするDriverライブラリ製品です。

通常であれば、HTTP Requestでデータを取得したり、更新したりするWeb APIをSQLでアクセスできるようにするのが特徴です。

今回は最近リリースされたばかりの名刺管理サービス Sansan の ADO.NET Providerを使ってみたいと思います。

[f:id:sugimomoto:20191120135103p:plain]

以下のURLからトライアルがダウンロードできるので取得し、インストールしておきます。

https://www.cdata.com/jp/drivers/sansan/ado/

インストール後、コンソールアプリケーションのプロジェクトを作成したら、以下のフォルダから .net standard 版のSansan ADO.NET Provider DLLを参照します。

C:\Program Files\CData\CData ADO.NET Provider for Sansan 2019J\lib\netstandard2.0

[f:id:sugimomoto:20191120135110p:plain]

Sansan ADO.NETはその名の通り、DataReaderやDataAdapter、EntityFrameworkなどのADO.NET フレームワークでアクセスできます。

ADO.NETベースで構成された専用のConnectionクラス（SansanConnection）が提供されているので、それを介してDapperを利用します。


[http://cdn.cdata.com/help/USE/jp/ado/pg_ADOqueriestable.htm:embed:cite]



ほぼ、先程のコードと変わらないですね。SqlConnectionをSansanConnectionに切り替えて、専用の接続文字列を指定するだけです。（Sansan API Keyの取得方法は[こちら](https://docs.ap.sansan.com/ja/api/openapi/index.html#header-api-key)を参照してください。）


[https://gist.github.com/sugimomoto/f137df6dbbfafd3d8b8386df076b359e:embed:cite]




なお、テーブルの定義は以下のリファレンスから参照できます。

[http://cdn.cdata.com/help/USE/jp/ado/pg_table-bizcards.htm:embed:cite]




これでデバッグをしてみると、Sansan Web API経由で取得したデータがDapperを通り、BizCardクラスに格納され、参照することができます。

[f:id:sugimomoto:20191120135150p:plain]

ADO.NET・SQLを介して、APIアクセスというと不思議な感じがするかもですが、かなり手軽にWeb APIを扱うことができ、またDapperを使うことでオブジェクトマッピングが手軽になるので、ビジネスロジックに集中できる感じで良いです。




</content>
        <hatena:formatted-content type="text/html" xmlns:hatena="http://www.hatena.ne.jp/info/xmlns#">&lt;p&gt;最近 Sansan の中の人のBlogで「今までEntityFrameworksとDapperを使っていたけれど、軽量なDapperを全面的に採用しました」というのを見かけました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fbuildersbox.corp-sansan.com%2Fentry%2F2019%2F10%2F23%2F110000&quot; title=&quot;レガシーシステムとつきあう - Sansan Builders Box&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://buildersbox.corp-sansan.com/entry/2019/10/23/110000&quot;&gt;buildersbox.corp-sansan.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;私自身が今まで Dapper を使ったことが無かったので、どんな感じなのかな？　という点と、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; ベースなら、CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; Providerも動くでしょ！　と思ったので、検証してみた結果をまとめてみたいと思います。&lt;/p&gt;

&lt;h1&gt;Dapper とは？&lt;/h1&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191120/20191120135238.png&quot; alt=&quot;f:id:sugimomoto:20191120135238p:plain&quot; title=&quot;f:id:sugimomoto:20191120135238p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdapper-tutorial.net%2F&quot; title=&quot;Dapper Dapper Tutorial | Dapper Tutorial and Documentation&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://dapper-tutorial.net/&quot;&gt;dapper-tutorial.net&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/C%23&quot;&gt;C#&lt;/a&gt;用の軽量なORMです。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/C%23&quot;&gt;C#&lt;/a&gt; のORMといえば、EntityFrameworkが有名かつ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Microsoft&quot;&gt;Microsoft&lt;/a&gt;が提供していることもあるのでスタンダードな印象ですが、&lt;/p&gt;

&lt;p&gt;EntityFrameworkは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SQL&quot;&gt;SQL&lt;/a&gt;クエリのレイヤーをあまり意識せず（あまりね）、扱うことができるのが特徴だと思いますが、Dapperでは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SQL&quot;&gt;SQL&lt;/a&gt;自体は自身で記述して、そこから取得したデータをオブジェクトに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;してくれるのが特徴です。&lt;/p&gt;

&lt;h1&gt;シンプルなDapperの使い方&lt;/h1&gt;

&lt;p&gt;一番シンプルなSELECTクエリで試してみたいと思います。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB&quot;&gt;チュートリアル&lt;/a&gt;は&lt;a href=&quot;https://dapper-tutorial.net/query&quot;&gt;こちら&lt;/a&gt;を参照。&lt;/p&gt;

&lt;p&gt;なお、今回は.NET Core 3.0・&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Visual%20Studio&quot;&gt;Visual Studio&lt;/a&gt; 2019で試しています。&lt;/p&gt;

&lt;p&gt;とりあえず、nuget で Dapperを入手しましょう。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;PM&amp;gt; Install-Package Dapper&lt;/pre&gt;


&lt;p&gt;対象となるデータベースおよびテーブルはお馴染みAdventureWorksのProductsテーブルです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191120/20191120135040.png&quot; alt=&quot;f:id:sugimomoto:20191120135040p:plain&quot; title=&quot;f:id:sugimomoto:20191120135040p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;使い方は、一度でもDataAdapter を使って&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SQL%20Server&quot;&gt;SQL Server&lt;/a&gt;にアクセスしたことがある人であれば、難しくないと思います。&lt;/p&gt;

&lt;p&gt;SqlConectionを生成し、Queryメソッドで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SQL&quot;&gt;SQL&lt;/a&gt;を渡すだけです。その際に格納したいClassを指定すれば、そのまま項目がClassのプロパティに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;されていきます。手軽で素晴らしい。&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/sugimomoto/fa472dd420b5a4e494276736b9407ee2.js&quot;&gt; &lt;/script&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://gist.github.com/sugimomoto/fa472dd420b5a4e494276736b9407ee2&quot;&gt;gist.github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;こんな感じで取得できました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191120/20191120135054.png&quot; alt=&quot;f:id:sugimomoto:20191120135054p:plain&quot; title=&quot;f:id:sugimomoto:20191120135054p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; で Dapperを使う方法&lt;/h1&gt;

&lt;p&gt;次に CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; を経由してDapperを利用してみたいと思います。&lt;/p&gt;

&lt;p&gt;CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; Providerは各種&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9&quot;&gt;クラウド&lt;/a&gt;サービスWeb &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;（kintoneや&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Salesforce&quot;&gt;Salesforce&lt;/a&gt;やDynamics 365等）やNoSQL（MongoDBやRedis等）に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt;ベースでのアクセスを可能にするDriverライブラリ製品です。&lt;/p&gt;

&lt;p&gt;通常であれば、HTTP Requestでデータを取得したり、更新したりするWeb &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SQL&quot;&gt;SQL&lt;/a&gt;でアクセスできるようにするのが特徴です。&lt;/p&gt;

&lt;p&gt;今回は最近リリースされたばかりの名刺管理サービス Sansan の &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; Providerを使ってみたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191120/20191120135103.png&quot; alt=&quot;f:id:sugimomoto:20191120135103p:plain&quot; title=&quot;f:id:sugimomoto:20191120135103p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;以下のURLからトライアルがダウンロードできるので取得し、インストールしておきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cdata.com/jp/drivers/sansan/ado/&quot;&gt;https://www.cdata.com/jp/drivers/sansan/ado/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;インストール後、コンソールアプリケーションのプロジェクトを作成したら、以下のフォルダから&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%20.net&quot;&gt; .net&lt;/a&gt; standard 版のSansan &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; Provider DLLを参照します。&lt;/p&gt;

&lt;p&gt;C:\Program Files\CData\CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; Provider for Sansan 2019J\lib\netstandard2.0&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191120/20191120135110.png&quot; alt=&quot;f:id:sugimomoto:20191120135110p:plain&quot; title=&quot;f:id:sugimomoto:20191120135110p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Sansan &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt;はその名の通り、DataReaderやDataAdapter、EntityFrameworkなどの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF&quot;&gt;フレームワーク&lt;/a&gt;でアクセスできます。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt;ベースで構成された専用のConnectionクラス（SansanConnection）が提供されているので、それを介してDapperを利用します。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fcdn.cdata.com%2Fhelp%2FUSE%2Fjp%2Fado%2Fpg_ADOqueriestable.htm&quot; title=&quot;CData ADO.NET Provider for Sansan 2019J - DataAdapter を使用したクエリ&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://cdn.cdata.com/help/USE/jp/ado/pg_ADOqueriestable.htm&quot;&gt;cdn.cdata.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;ほぼ、先程のコードと変わらないですね。SqlConnectionをSansanConnectionに切り替えて、専用の接続文字列を指定するだけです。（Sansan &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Keyの取得方法は&lt;a href=&quot;https://docs.ap.sansan.com/ja/api/openapi/index.html#header-api-key&quot;&gt;こちら&lt;/a&gt;を参照してください。）&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/sugimomoto/f137df6dbbfafd3d8b8386df076b359e.js&quot;&gt; &lt;/script&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://gist.github.com/sugimomoto/f137df6dbbfafd3d8b8386df076b359e&quot;&gt;gist.github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;なお、テーブルの定義は以下のリファレンスから参照できます。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fcdn.cdata.com%2Fhelp%2FUSE%2Fjp%2Fado%2Fpg_table-bizcards.htm&quot; title=&quot;CData ADO.NET Provider for Sansan 2019J - Bizcards&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://cdn.cdata.com/help/USE/jp/ado/pg_table-bizcards.htm&quot;&gt;cdn.cdata.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;これで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0&quot;&gt;デバッグ&lt;/a&gt;をしてみると、Sansan Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;経由で取得したデータがDapperを通り、BizCardクラスに格納され、参照することができます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191120/20191120135150.png&quot; alt=&quot;f:id:sugimomoto:20191120135150p:plain&quot; title=&quot;f:id:sugimomoto:20191120135150p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt;・&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SQL&quot;&gt;SQL&lt;/a&gt;を介して、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;アクセスというと不思議な感じがするかもですが、かなり手軽にWeb &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を扱うことができ、またDapperを使うことでオブジェクト&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0&quot;&gt;マッピング&lt;/a&gt;が手軽になるので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D3%A5%B8%A5%CD%A5%B9%A5%ED%A5%B8%A5%C3%A5%AF&quot;&gt;ビジネスロジック&lt;/a&gt;に集中できる感じで良いです。&lt;/p&gt;
</hatena:formatted-content>
        <category term="C#" />
        <category term="ADO.NET" />
        <category term="CData" />
        <category term="Sansan" />
        <category term=".NET Core" />
        <app:control>
            <app:draft>no</app:draft>
        </app:control>
    </entry>
    <entry>
        <id>tag:blog.hatena.ne.jp,2013:blog-sugimomoto-8454420450088934728-26006613458957072</id>
        <link rel="edit" href="https://blog.hatena.ne.jp/sugimomoto/kageura.hatenadiary.jp/atom/entry/26006613458957072"/>
        <link rel="alternate" type="text/html" href="http://kageura.hatenadiary.jp/entry/2019/11/01/%E3%83%87%E3%83%BC%E3%82%BF%E9%80%A3%E6%90%BA%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AB%E3%80%8C%E5%AE%89%E5%AE%9A%E7%9A%84%E7%A8%BC%E5%83%8D%E3%80%8D%E3%82%88%E3%82%8A%E3%82%82%E3%80%8C%E6%8E%A5%E7%B6%9A"/>
        <author>
            <name>sugimomoto</name>
        </author>
        <title>データ連携ツールに「安定的稼働」よりも「接続先の多様さ・アダプタの種類の多さ」が求められている</title>
        <updated>2019-11-01T15:25:31+09:00</updated>
        <published>2019-11-01T15:25:31+09:00</published>
        <app:edited>2019-11-01T15:25:31+09:00</app:edited>
        <summary type="text">こんにちは。CDataリードエンジニアの杉本です。本日はちょっと面白い記事を見かけたので紹介したいと思います。 日経BPコンサルティングにて、毎年公開されている「データ連携に関するアンケート調査」という記事です。 consult.nikkeibp.co.jp データ連携ツール、E…</summary>
        <content type="text/x-markdown">こんにちは。CDataリードエンジニアの杉本です。本日はちょっと面白い記事を見かけたので紹介したいと思います。

日経BPコンサルティングにて、毎年公開されている「データ連携に関するアンケート調査」という記事です。



[https://consult.nikkeibp.co.jp/info/news/2019/0902df/:embed:cite]



データ連携ツール、EAI・ETL（ELT）、今ならiPaaSの分野も含まれるかと思いますが、それらのツールに対して、日本のユーザーの導入状況はどうなのか？　必要性や、何に魅力を感じて製品を選択しているのか？　というレポートです。

# 注目したポイント

「データ連携ツールの必要性を感じている企業」が2018年から2019年にかけて、33.8%から37%に伸びているのもなかなか面白いですが、私が何よりも注目したのは、製品を選定する際の重要項目（
図5　EAIをはじめとしたデータ連携ツール選定の重視ポイント(複数選択式））です。

ここでは、接続先の多様さやGUIのわかりやすさなど、12項目で、製品を導入した企業、もしくは導入しようとしている企業が重視しているポイントを複数票投票する形でグラフにしています。

[2019年：製品を選定する際の重視項目](https://consult.nikkeibp.co.jp/info/news/2019/0902df/)

[f:id:sugimomoto:20191101152419p:plain]

おそらくパット見では、あー接続先の多様さと安定的稼働、GUIのわかりやすさが求められているんだなーという印象を抱くのではないかなと思います。

ただ、この数字の面白い部分は、2018年のものと比較すると見えてきます。2019年の記事では、2018年との比較が載っていないので、引用してきて並べてみました。

[2018年：製品を選定する際の重視項目](https://consult.nikkeibp.co.jp/info/news/2018/0718df/)

[f:id:sugimomoto:20191101152424p:plain]

ただ、このように並べても少しわかりづらいですよね。

ということで、私の方で「重視したポイント」の部分を2018年と2019年で一つのグラフにまとめてみました。

# 安定的な稼働やパフォーマンスの質よりも、GUIのわかりやすさや、接続先の多様さと国産製品への接続力が問われ始めた

[f:id:sugimomoto:20191101152432p:plain]

どうでしょうか？

私がまず驚いたことは、データ連携ツールで当たり前のように求められるであろう、「安定的な稼働」や「パフォーマンスの質」が下がっている点です。

そして、それに引き換えて、GUIのわかりやすさと共に、前年も大きく求められていた接続先の多様さと共に国産製品との連携が大きく求められてきたという点。

GUIのわかりやすさは、SaaS・WebベースでGUIが見やすいサービスが増えてきて、自ずとEAIなどのデータ連携ツールにも、当たり前のようにそのような素養が求められるようになったからではないかと思います。

ただ、さらに接続先の多様さと国産製品との連携が求められているのには、どのような背景が関連しているのでしょうか？　次の章で私なりの考察をまとめてみました。

# なぜこのような状況が起こっているのか？

一つは依然公開されていくAPIの数が留まることを知らない、という点があげられるでしょう。

以下はAPIに関する情報サイトで最も有名なProgrammableWebに登録されているAPIの数をグラフ化したものです。　おそらく世界でもトップレベルで使われているであろうTwitter APIが公開されたのが2012年ですが、そこから7年間で17,000件も増加しているのですから、驚異的です。

[f:id:sugimomoto:20191101152439p:plain]

もちろんこれは、toB以外のtoCやオープンデータ、ゲームなど様々なAPIが集計された結果ではありますが、それだけ接続先として存在するAPIが多種多様かつ大変な数になっている、ということはイメージできるのではないでしょうか。

# なぜ国産製品への接続力が問われいてるのか？

Boxil が公開している国内SaaS市場の規模推移では、どんどんパッケージよりもSaaS化率があがっており、1社あたりの利用クラウドサービスも数十製品あるのではないか？　というトピックもあります。

[f:id:sugimomoto:20191101152445p:plain]

https://boxil.jp/mag/a5170/

それにくわえて、国産SaaSサービスの隆盛も見逃せません。今年はSansan、Chatworkなどが上場を果たしたニュースや、SmartHRなどが大型の資金調達を果たしたことも目に新しいトピックかと思います。

そのような国産SaaSサービスでもAPIが存在することがほぼ当たり前になってきました。むしろ、存在しなければ、なぜ提供していないのか？　提供していなければ検討に値しない、といった状況にもあるのではないでしょうか。

そういったAPI増加、企業内のSaaS化製品の利用率、国産SaaSの隆盛といった外的要因から、今回のアンケート結果のような状況が導き出されたのではないか？　これらの数字を踏まえると、想像に難くありません。

# CData でも3年間で接続先を「80」→「150」に倍増

翻って考えてみると、私の所属するCDataでもこの大きな流れの影響が確実にあらわれています。

以下はCDataが日本で本格的に活動をはじめた2017年の提案書の抜粋です。この時はまだSalesforceやNetsuite・Dynamics CRMなどのグローバルで有名なサービスを中心とした80種類ほどの接続先でした。

[f:id:sugimomoto:20191101152452p:plain]


それが、2019年では、データソースが「150」を超え、さらに国産SaaSサービスへの接続ラインナップとしても kitnoneやPCA、Moneyforward、CloudSign、YahooShopping、Sansan、スマレジなど大幅に拡充されてきました。

[f:id:sugimomoto:20191101152457p:plain]

日本で協力にデータコネクティビティを高めていく上で、国産クラウドサービスへの対応は必須であると考えた上での結果です。

さらにこれらのコネクターをエンドユーザーだけでなく、EAIなどのツールベンダー・サービスベンダーにも提供し、各社製品の接続先の多様化・コネクティビティの向上をサポートしています。

[f:id:sugimomoto:20191101152504p:plain]

# でも、接続先の多様さが競争力になる時代はまだ始まったばかりではないか？

ざっと、接続先の多様さが求められる要因と、私の会社における取り組みの形を取り上げてみました。

ただ、そうは言っても、Boxilのレポートを参照するとまだ国内SaaS市場規模はパッケージに比べて、「30%台」なのです。

まだ、70%もの領域にSaaS・クラウドサービス化の余地が眠っていて、それらも他サービスとの接続性・コネクティビティを求めることになる、と考えるとどうでしょうか？　なかなかワクワクしてくるなーと感じます。

接続先のサービスが50、60で喜んでいる場合じゃありません。まだまだユーザーには「7割もの圧倒的な繋がらなさ」が潜んでいると考えて間違いではないでしょう。

是非クラウドサービス・データ連携ツール・エンドユーザーの皆さんと共に、さらにこのデータ連携の時代をドライブしていきたいな！　と思う次第です。

ちなみに、CDataでは、こんなクラウドサービスにつなぎたい、このツールで連携したい、といった要望・質問を随時募集しています。

要望を貰えれば、時間の許す限り無償で検証を行い、以下のような検証結果レポートとして接続方法や連携方法をお伝えします！

[https://www.cdatablog.jp/entry/2019/08/22/113648:embed:cite]

[https://qiita.com/sugimomoto/items/1262eae4056f092ad8df:embed:cite]</content>
        <hatena:formatted-content type="text/html" xmlns:hatena="http://www.hatena.ne.jp/info/xmlns#">&lt;p&gt;こんにちは。CDataリードエンジニアの杉本です。本日はちょっと面白い記事を見かけたので紹介したいと思います。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C6%FC%B7%D0BP%A5%B3%A5%F3%A5%B5%A5%EB%A5%C6%A5%A3%A5%F3%A5%B0&quot;&gt;日経BPコンサルティング&lt;/a&gt;にて、毎年公開されている「データ連携に関するアンケート調査」という記事です。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fconsult.nikkeibp.co.jp%2Finfo%2Fnews%2F2019%2F0902df%2F&quot; title=&quot;データ連携ツールの導入率は22％台で推移、 裏で支えるプラットフォームとして必要性高まる～日経BPコンサルティング調べ　「データ連携に関するアンケート調査」～ | 日経BPコンサルティング&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://consult.nikkeibp.co.jp/info/news/2019/0902df/&quot;&gt;consult.nikkeibp.co.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;データ連携ツール、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/EAI&quot;&gt;EAI&lt;/a&gt;・ETL（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ELT&quot;&gt;ELT&lt;/a&gt;）、今ならiPaaSの分野も含まれるかと思いますが、それらのツールに対して、日本のユーザーの導入状況はどうなのか？　必要性や、何に魅力を感じて製品を選択しているのか？　というレポートです。&lt;/p&gt;

&lt;h1&gt;注目したポイント&lt;/h1&gt;

&lt;p&gt;「データ連携ツールの必要性を感じている企業」が2018年から2019年にかけて、33.8%から37%に伸びているのもなかなか面白いですが、私が何よりも注目したのは、製品を選定する際の重要項目（
図5　&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/EAI&quot;&gt;EAI&lt;/a&gt;をはじめとしたデータ連携ツール選定の重視ポイント(複数選択式））です。&lt;/p&gt;

&lt;p&gt;ここでは、接続先の多様さや&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GUI&quot;&gt;GUI&lt;/a&gt;のわかりやすさなど、12項目で、製品を導入した企業、もしくは導入しようとしている企業が重視しているポイントを複数票投票する形でグラフにしています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://consult.nikkeibp.co.jp/info/news/2019/0902df/&quot;&gt;2019年：製品を選定する際の重視項目&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191101/20191101152419.png&quot; alt=&quot;f:id:sugimomoto:20191101152419p:plain&quot; title=&quot;f:id:sugimomoto:20191101152419p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;おそらくパット見では、あー接続先の多様さと安定的稼働、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GUI&quot;&gt;GUI&lt;/a&gt;のわかりやすさが求められているんだなーという印象を抱くのではないかなと思います。&lt;/p&gt;

&lt;p&gt;ただ、この数字の面白い部分は、2018年のものと比較すると見えてきます。2019年の記事では、2018年との比較が載っていないので、引用してきて並べてみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://consult.nikkeibp.co.jp/info/news/2018/0718df/&quot;&gt;2018年：製品を選定する際の重視項目&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191101/20191101152424.png&quot; alt=&quot;f:id:sugimomoto:20191101152424p:plain&quot; title=&quot;f:id:sugimomoto:20191101152424p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ただ、このように並べても少しわかりづらいですよね。&lt;/p&gt;

&lt;p&gt;ということで、私の方で「重視したポイント」の部分を2018年と2019年で一つのグラフにまとめてみました。&lt;/p&gt;

&lt;h1&gt;安定的な稼働やパフォーマンスの質よりも、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GUI&quot;&gt;GUI&lt;/a&gt;のわかりやすさや、接続先の多様さと国産製品への接続力が問われ始めた&lt;/h1&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191101/20191101152432.png&quot; alt=&quot;f:id:sugimomoto:20191101152432p:plain&quot; title=&quot;f:id:sugimomoto:20191101152432p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;どうでしょうか？&lt;/p&gt;

&lt;p&gt;私がまず驚いたことは、データ連携ツールで当たり前のように求められるであろう、「安定的な稼働」や「パフォーマンスの質」が下がっている点です。&lt;/p&gt;

&lt;p&gt;そして、それに引き換えて、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GUI&quot;&gt;GUI&lt;/a&gt;のわかりやすさと共に、前年も大きく求められていた接続先の多様さと共に国産製品との連携が大きく求められてきたという点。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GUI&quot;&gt;GUI&lt;/a&gt;のわかりやすさは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SaaS&quot;&gt;SaaS&lt;/a&gt;・Webベースで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GUI&quot;&gt;GUI&lt;/a&gt;が見やすいサービスが増えてきて、自ずと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/EAI&quot;&gt;EAI&lt;/a&gt;などのデータ連携ツールにも、当たり前のようにそのような素養が求められるようになったからではないかと思います。&lt;/p&gt;

&lt;p&gt;ただ、さらに接続先の多様さと国産製品との連携が求められているのには、どのような背景が関連しているのでしょうか？　次の章で私なりの考察をまとめてみました。&lt;/p&gt;

&lt;h1&gt;なぜこのような状況が起こっているのか？&lt;/h1&gt;

&lt;p&gt;一つは依然公開されていく&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の数が留まることを知らない、という点があげられるでしょう。&lt;/p&gt;

&lt;p&gt;以下は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;に関する情報サイトで最も有名なProgrammableWebに登録されている&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の数をグラフ化したものです。　おそらく世界でもトッ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%D9&quot;&gt;プレベ&lt;/a&gt;ルで使われているであろう&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Twitter&quot;&gt;Twitter&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;が公開されたのが2012年ですが、そこから7年間で17,000件も増加しているのですから、驚異的です。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191101/20191101152439.png&quot; alt=&quot;f:id:sugimomoto:20191101152439p:plain&quot; title=&quot;f:id:sugimomoto:20191101152439p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;もちろんこれは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/toB&quot;&gt;toB&lt;/a&gt;以外の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/toC&quot;&gt;toC&lt;/a&gt;やオープンデータ、ゲームなど様々な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;が集計された結果ではありますが、それだけ接続先として存在する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;が多種多様かつ大変な数になっている、ということはイメージできるのではないでしょうか。&lt;/p&gt;

&lt;h1&gt;なぜ国産製品への接続力が問われいてるのか？&lt;/h1&gt;

&lt;p&gt;Boxil が公開している国内&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SaaS&quot;&gt;SaaS&lt;/a&gt;市場の規模推移では、どんどんパッケージよりも&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SaaS&quot;&gt;SaaS&lt;/a&gt;化率があがっており、1社あたりの利用&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9&quot;&gt;クラウド&lt;/a&gt;サービスも数十製品あるのではないか？　というトピックもあります。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191101/20191101152445.png&quot; alt=&quot;f:id:sugimomoto:20191101152445p:plain&quot; title=&quot;f:id:sugimomoto:20191101152445p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://boxil.jp/mag/a5170/&quot;&gt;https://boxil.jp/mag/a5170/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;それにくわえて、国産&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SaaS&quot;&gt;SaaS&lt;/a&gt;サービスの隆盛も見逃せません。今年はSansan、Chatworkなどが上場を果たしたニュースや、SmartHRなどが大型の資金調達を果たしたことも目に新しいトピックかと思います。&lt;/p&gt;

&lt;p&gt;そのような国産&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SaaS&quot;&gt;SaaS&lt;/a&gt;サービスでも&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;が存在することがほぼ当たり前になってきました。むしろ、存在しなければ、なぜ提供していないのか？　提供していなければ検討に値しない、といった状況にもあるのではないでしょうか。&lt;/p&gt;

&lt;p&gt;そういった&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;増加、企業内の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SaaS&quot;&gt;SaaS&lt;/a&gt;化製品の利用率、国産&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SaaS&quot;&gt;SaaS&lt;/a&gt;の隆盛といった外的要因から、今回のアンケート結果のような状況が導き出されたのではないか？　これらの数字を踏まえると、想像に難くありません。&lt;/p&gt;

&lt;h1&gt;CData でも3年間で接続先を「80」→「150」に倍増&lt;/h1&gt;

&lt;p&gt;翻って考えてみると、私の所属するCDataでもこの大きな流れの影響が確実にあらわれています。&lt;/p&gt;

&lt;p&gt;以下はCDataが日本で本格的に活動をはじめた2017年の提案書の抜粋です。この時はまだ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Salesforce&quot;&gt;Salesforce&lt;/a&gt;やNetsuite・Dynamics &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CRM&quot;&gt;CRM&lt;/a&gt;などのグローバルで有名なサービスを中心とした80種類ほどの接続先でした。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191101/20191101152452.png&quot; alt=&quot;f:id:sugimomoto:20191101152452p:plain&quot; title=&quot;f:id:sugimomoto:20191101152452p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;それが、2019年では、データソースが「150」を超え、さらに国産&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SaaS&quot;&gt;SaaS&lt;/a&gt;サービスへの接続ラインナップとしても kitnoneやPCA、Moneyforward、CloudSign、YahooShopping、Sansan、スマレジなど大幅に拡充されてきました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191101/20191101152457.png&quot; alt=&quot;f:id:sugimomoto:20191101152457p:plain&quot; title=&quot;f:id:sugimomoto:20191101152457p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;日本で協力にデータコネクティビティを高めていく上で、国産&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9&quot;&gt;クラウド&lt;/a&gt;サービスへの対応は必須であると考えた上での結果です。&lt;/p&gt;

&lt;p&gt;さらにこれらのコ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%CD%A5%AF%A5%BF%A1%BC&quot;&gt;ネクター&lt;/a&gt;をエンドユーザーだけでなく、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/EAI&quot;&gt;EAI&lt;/a&gt;などのツールベンダー・サービスベンダーにも提供し、各社製品の接続先の多様化・コネクティビティの向上をサポートしています。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191101/20191101152504.png&quot; alt=&quot;f:id:sugimomoto:20191101152504p:plain&quot; title=&quot;f:id:sugimomoto:20191101152504p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;でも、接続先の多様さが競争力になる時代はまだ始まったばかりではないか？&lt;/h1&gt;

&lt;p&gt;ざっと、接続先の多様さが求められる要因と、私の会社における取り組みの形を取り上げてみました。&lt;/p&gt;

&lt;p&gt;ただ、そうは言っても、Boxilのレポートを参照するとまだ国内&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SaaS&quot;&gt;SaaS&lt;/a&gt;市場規模はパッケージに比べて、「30%台」なのです。&lt;/p&gt;

&lt;p&gt;まだ、70%もの領域に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SaaS&quot;&gt;SaaS&lt;/a&gt;・&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9&quot;&gt;クラウド&lt;/a&gt;サービス化の余地が眠っていて、それらも他サービスとの接続性・コネクティビティを求めることになる、と考えるとどうでしょうか？　なかなかワクワクしてくるなーと感じます。&lt;/p&gt;

&lt;p&gt;接続先のサービスが50、60で喜んでいる場合じゃありません。まだまだユーザーには「7割もの圧倒的な繋がらなさ」が潜んでいると考えて間違いではないでしょう。&lt;/p&gt;

&lt;p&gt;是非&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9&quot;&gt;クラウド&lt;/a&gt;サービス・データ連携ツール・エンドユーザーの皆さんと共に、さらにこのデータ連携の時代をドライブしていきたいな！　と思う次第です。&lt;/p&gt;

&lt;p&gt;ちなみに、CDataでは、こんな&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9&quot;&gt;クラウド&lt;/a&gt;サービスにつなぎたい、このツールで連携したい、といった要望・質問を随時募集しています。&lt;/p&gt;

&lt;p&gt;要望を貰えれば、時間の許す限り無償で検証を行い、以下のような検証結果レポートとして接続方法や連携方法をお伝えします！&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.cdatablog.jp%2Fentry%2F2019%2F08%2F22%2F113648&quot; title=&quot;Cloud Data Fusion で Salesforce から BigQuery へデータ連携 - CData Software Blog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.cdatablog.jp/entry/2019/08/22/113648&quot;&gt;www.cdatablog.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fsugimomoto%2Fitems%2F1262eae4056f092ad8df&quot; title=&quot;スマレジ APIをドライバー化：各種ツールから接続してみた - Qiita&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://qiita.com/sugimomoto/items/1262eae4056f092ad8df&quot;&gt;qiita.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</hatena:formatted-content>
        <app:control>
            <app:draft>yes</app:draft>
        </app:control>
    </entry>
    <entry>
        <id>tag:blog.hatena.ne.jp,2013:blog-sugimomoto-8454420450088934728-26006613457724096</id>
        <link rel="edit" href="https://blog.hatena.ne.jp/sugimomoto/kageura.hatenadiary.jp/atom/entry/26006613457724096"/>
        <link rel="alternate" type="text/html" href="http://kageura.hatenadiary.jp/entry/cdatasnippet"/>
        <author>
            <name>sugimomoto</name>
        </author>
        <title>独自スクリプト言語の VS Code Snippet を作ってみた：CData API Script</title>
        <updated>2019-10-30T10:00:00+09:00</updated>
        <published>2019-10-30T10:00:11+09:00</published>
        <app:edited>2019-11-03T14:55:10+09:00</app:edited>
        <summary type="text">普段メインのエディタとして、VS Codeを使っています。 簡単なプログラミングから、ログ漁り、PowerShellなどの実行まで、これで一通りやっているんですが、その中の一つに私の会社で出している製品の独自スクリプト言語を書くという仕事（半分趣味）がありました。 こんな感じでX…</summary>
        <content type="text/x-markdown">普段メインのエディタとして、VS Codeを使っています。

簡単なプログラミングから、ログ漁り、PowerShellなどの実行まで、これで一通りやっているんですが、その中の一つに私の会社で出している製品の独自スクリプト言語を書くという仕事（半分趣味）がありました。

こんな感じでXMLを拡張して、製品に独自の拡張機能をもたらす感じのもので、[CData API Script](http://cdn.cdata.com/help/DWE/jp/ado/pg_apischemaintro.htm) と言います。

[f:id:sugimomoto:20191029224204p:plain]


&lt;!-- more --&gt;


結構いい感じに狂っていて（褒め言葉）、変数定義から連想配列、IF文、ループ処理、バリデーション、Try Catch機構から、文字列・日付・算術操作用の関数まであって、なかなか面白いんですが、いかんせんインテリセンスも効かないので、毎度リファレンスを漁りながら書き書きしているわけです。XML的文法チェックは効くんですけどね。

[f:id:sugimomoto:20191029224211p:plain]

そんな折、最近「徹底解説Visual Studio Code」で独自のSnippetを追加できるという記事を読みまして、これはやってみるかしか無い！　と思い作ってみた記録がこの記事です。

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=sugimomoto-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07YD6VFSK&amp;linkId=9e07af784e017b69d2bd901aa41b9575&quot;&gt;&lt;/iframe&gt;

ちなみに、CData API Script で何ができるの？　と言いますと、いろんなクラウドサービスのWeb API・REST APIをコールして、コネクター・ドライバー製品からデータの操作ができるようにしています。以下一例

[http://kageura.hatenadiary.jp/entry/callconnect02:embed:cite]

なんだかんだで既に数十サービスのScriptを書いているんですが、結構コピペが重なるパターンも多いので、これはいいのではと思ったり。

ちなみに今回作ったものは以下で公開しています。

[https://github.com/sugimomoto/CData.APIScript.VSCodeSnippet/blob/master/CDataAPIScriptSnippet.json:embed:cite]



## Snippet って何？

繰り返し使う条件ステートメントやループ、何度も使うコード・一連の処理などを登録しておいて、入力を安易にするためのテンプレートセットのことを指します。

以下のURLの解説とGIF画像がわかりやすいですね。

[https://code.visualstudio.com/docs/editor/userdefinedsnippets:embed:cite]

[https://code.visualstudio.com/assets/docs/editor/userdefinedsnippets/ajax-snippet.gif:image=https://code.visualstudio.com/assets/docs/editor/userdefinedsnippets/ajax-snippet.gif]

有名なプログラミング言語は、VS Code Marketplaceから入手したりできますが、今回のように独自の言語や、自分や組織だけが使うコードの場合は、ユーザー独自のSnippet が作れるようにVS Codeが拡張機能を用意しています。

## VS Code の Snippet の作り方（ユーザースニペット）

作り方は簡単です。VS Codeを立ち上げて、コマンドパレットからユーザースニペットの構成（もしくはファイル &gt; 基本設定 &gt; ユーザースニペット）を選択します。

[f:id:sugimomoto:20191029224315p:plain]

ここで各言語を選択すれば、その言語用のSnippetを追加できますし、新しいグローバルスニペットファイルを選択すれば、どの範囲まで作成したsnippetを利用できるようにするか、スコープを決めたsnippetも作れます。

[f:id:sugimomoto:20191029224321p:plain]

とりあえずわかりやすく新しいグローバルスニペットを選択しました。

ファイルを保存すると以下のようにスニペットを書くためのJSONファイルが生成されます。

[f:id:sugimomoto:20191029224328p:plain]

サンプルにもありますが、私が実際に作っているものベースで以下のような感じで書きます。

```json
{
  &quot;api:if&quot;: { // Snippet の名前。ファイル内で重複できません。
    &quot;scope&quot;: &quot;xml&quot;, // Scope。使う言語を指定できます。
    &quot;prefix&quot;: &quot;if&quot;, // Snippetを使う時の文字列。これをプレフィックスを打ちはじめることで候補として表示されます。
    &quot;body&quot;: [ // Snippetで実際に生成される文字列です。配列で1行ごとに指定します。
      &quot;&lt;api:if attr=\&quot;${1:attr1}\&quot; value=\&quot;[${2:attr2}]\&quot; operator=\&quot;${3:equals}\&quot;&gt;&quot;,
      &quot;&lt;api:else&gt;&quot;,
      &quot;False&quot;,
      &quot;&lt;/api:else&gt;&quot;,
      &quot;True&quot;,
      &quot;&lt;/api:if&gt;&quot;
    ],
    &quot;description&quot;: &quot;You can use the api:if keyword to evaluate expressions that can contain items, attributes, and values. The scope of the keyword is executed if the specified expression evaluates to true.&quot; 
  },// Snippetを選択する時に表示される説明文です。
  &quot;api:include&quot;: { // Snippet ２つ目
    &quot;scope&quot;: &quot;xml&quot;,
    &quot;prefix&quot;: &quot;include&quot;,
    &quot;body&quot;: [
      &quot;&lt;api:include file=\&quot;${1:globals.rsb}\&quot;/&gt;&quot;
    ],
    &quot;description&quot;: &quot;The api:include keyword is used to include API Script from other files. Like traditional includes in other programming languages, api:include is replaced by the contents of the file specified in the file parameter.&quot;
  }
}
```

ちなみにBodyに書いてある「${1:attr1}」はタブストップです。数字の番号順にタブが止まります。

「$1」「$2」と書いてもいいですし、デフォルトの値を表示したい場合は「${1:Hogehoge}」と書きます。

このあたりは以下のリンクにも詳しく書いてあります。

[https://code.visualstudio.com/docs/editor/userdefinedsnippets#_snippet-syntax:title]

で実際に使ってみた感じが以下の通りです。

[https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/snippet.gif:image=https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/snippet.gif]

インデント入れ忘れたな、と作ったあとに気づきました。

# まったく需要が無いと思われる CData API Scriptの作り方

最終的にできあがった Snippet ファイルはこんな感じです。1200行あってエグいですね。200個近く Snippet がある感じです。


[https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/snippetlist.gif:image=https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/snippetlist.gif]



ちなみにどうやったかと言えば、C#でスクレイピング（[AngleSharp](https://anglesharp.github.io/)）するプログラムを書いて、以下のHTMLベースリファレンスから全部漁りました。

http://cdn.cdata.com/help/DWE/jp/ado/pg_stringvalueformatters.htm

[f:id:sugimomoto:20191029224421p:plain]

それを最終的にJSON用のオブジェクトに格納して、シリアライズ（[Json.NET](https://www.newtonsoft.com/json)）

あまりに汎用性が無いので、非公開。

中の人なのになんで！？　って思われれるかもしれないですが、言語定義とヘルプ用説明HTMLがわかれていて、どうしようもなかった・・・。

ただ、リファレンスだけが公開されている独自言語ってそれなりにあると思うので、こういったスクレイピングアプローチは他にも結構ありえるかなと思ったりです。

## 使い方

もし使って、CData API Scriptを使って、書いてみたい！　という方は、以下からCData REST Driverのトライアル版と

[http://www.cdata.com/jp/drivers/rest/:embed:cite]

以下から Snippet を取得してやってみましょう！（布教

[https://github.com/sugimomoto/CData.APIScript.VSCodeSnippet/blob/master/CDataAPIScriptSnippet.json:embed:cite]

CallConnect REST API をベースに作ったサンプルが以下にあります。

[https://github.com/sugimomoto/CData.REST.CallConnect:embed:cite]</content>
        <hatena:formatted-content type="text/html" xmlns:hatena="http://www.hatena.ne.jp/info/xmlns#">&lt;p&gt;普段メインのエディタとして、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/VS%20Code&quot;&gt;VS Code&lt;/a&gt;を使っています。&lt;/p&gt;

&lt;p&gt;簡単なプログラミングから、ログ漁り、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PowerShell&quot;&gt;PowerShell&lt;/a&gt;などの実行まで、これで一通りやっているんですが、その中の一つに私の会社で出している製品の独自&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8%B8%C0%B8%EC&quot;&gt;スクリプト言語&lt;/a&gt;を書くという仕事（半分趣味）がありました。&lt;/p&gt;

&lt;p&gt;こんな感じで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/XML&quot;&gt;XML&lt;/a&gt;を拡張して、製品に独自の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B3%C8%C4%A5%B5%A1%C7%BD&quot;&gt;拡張機能&lt;/a&gt;をもたらす感じのもので、&lt;a href=&quot;http://cdn.cdata.com/help/DWE/jp/ado/pg_apischemaintro.htm&quot;&gt;CData API Script&lt;/a&gt; と言います。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191029/20191029224204.png&quot; alt=&quot;f:id:sugimomoto:20191029224204p:plain&quot; title=&quot;f:id:sugimomoto:20191029224204p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;結構いい感じに狂っていて（褒め言葉）、変数定義から&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CF%A2%C1%DB%C7%DB%CE%F3&quot;&gt;連想配列&lt;/a&gt;、IF文、ループ処理、バリデーション、Try Catch機構から、文字列・日付・算術操作用の関数まであって、なかなか面白いんですが、いかんせんインテリセンスも効かないので、毎度リファレンスを漁りながら書き書きしているわけです。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/XML&quot;&gt;XML&lt;/a&gt;的文法チェックは効くんですけどね。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191029/20191029224211.png&quot; alt=&quot;f:id:sugimomoto:20191029224211p:plain&quot; title=&quot;f:id:sugimomoto:20191029224211p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;そんな折、最近「徹底解説&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Visual%20Studio%20Code&quot;&gt;Visual Studio Code&lt;/a&gt;」で独自のSnippetを追加できるという記事を読みまして、これはやってみるかしか無い！　と思い作ってみた記録がこの記事です。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=sugimomoto-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07YD6VFSK&amp;linkId=9e07af784e017b69d2bd901aa41b9575&quot;&gt;&lt;/iframe&gt;


&lt;p&gt;ちなみに、CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Script で何ができるの？　と言いますと、いろんな&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9&quot;&gt;クラウド&lt;/a&gt;サービスのWeb &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;・&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/REST%20API&quot;&gt;REST API&lt;/a&gt;をコールして、コ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%CD%A5%AF%A5%BF%A1%BC&quot;&gt;ネクター&lt;/a&gt;・ドライバー製品からデータの操作ができるようにしています。以下一例&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fkageura.hatenadiary.jp%2Fentry%2Fcallconnect02&quot; title=&quot;CallConnect REST API を使って、PowerBI で通話対応分析レポートを作成してみる（CData REST ODBC Driver） - Morning Girl&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://kageura.hatenadiary.jp/entry/callconnect02&quot;&gt;kageura.hatenadiary.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;なんだかんだで既に数十サービスのScriptを書いているんですが、結構コピペが重なるパターンも多いので、これはいいのではと思ったり。&lt;/p&gt;

&lt;p&gt;ちなみに今回作ったものは以下で公開しています。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fsugimomoto%2FCData.APIScript.VSCodeSnippet%2Fblob%2Fmaster%2FCDataAPIScriptSnippet.json&quot; title=&quot;sugimomoto/CData.APIScript.VSCodeSnippet&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/sugimomoto/CData.APIScript.VSCodeSnippet/blob/master/CDataAPIScriptSnippet.json&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;Snippet って何？&lt;/h2&gt;

&lt;p&gt;繰り返し使う条件&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%C8%A5%E1%A5%F3%A5%C8&quot;&gt;ステートメント&lt;/a&gt;やループ、何度も使うコード・一連の処理などを登録しておいて、入力を安易にするためのテンプレートセットのことを指します。&lt;/p&gt;

&lt;p&gt;以下のURLの解説とGIF画像がわかりやすいですね。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcode.visualstudio.com%2Fdocs%2Feditor%2Fuserdefinedsnippets&quot; title=&quot;Snippets in Visual Studio Code&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://code.visualstudio.com/docs/editor/userdefinedsnippets&quot;&gt;code.visualstudio.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/assets/docs/editor/userdefinedsnippets/ajax-snippet.gif&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://code.visualstudio.com/assets/docs/editor/userdefinedsnippets/ajax-snippet.gif&quot; class=&quot;http-image&quot; alt=&quot;https://code.visualstudio.com/assets/docs/editor/userdefinedsnippets/ajax-snippet.gif&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有名な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC&quot;&gt;プログラミング言語&lt;/a&gt;は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/VS%20Code&quot;&gt;VS Code&lt;/a&gt; Marketplaceから入手したりできますが、今回のように独自の言語や、自分や組織だけが使うコードの場合は、ユーザー独自のSnippet が作れるように&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/VS%20Code&quot;&gt;VS Code&lt;/a&gt;が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B3%C8%C4%A5%B5%A1%C7%BD&quot;&gt;拡張機能&lt;/a&gt;を用意しています。&lt;/p&gt;

&lt;h2&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/VS%20Code&quot;&gt;VS Code&lt;/a&gt; の Snippet の作り方（ユーザー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%CB%A5%DA%A5%C3%A5%C8&quot;&gt;スニペット&lt;/a&gt;）&lt;/h2&gt;

&lt;p&gt;作り方は簡単です。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/VS%20Code&quot;&gt;VS Code&lt;/a&gt;を立ち上げて、コマンドパレットからユーザー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%CB%A5%DA%A5%C3%A5%C8&quot;&gt;スニペット&lt;/a&gt;の構成（もしくはファイル &gt; 基本設定 &gt; ユーザー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%CB%A5%DA%A5%C3%A5%C8&quot;&gt;スニペット&lt;/a&gt;）を選択します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191029/20191029224315.png&quot; alt=&quot;f:id:sugimomoto:20191029224315p:plain&quot; title=&quot;f:id:sugimomoto:20191029224315p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ここで各言語を選択すれば、その言語用のSnippetを追加できますし、新しいグロー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D0%A5%EB%A5%B9&quot;&gt;バルス&lt;/a&gt;ニペットファイルを選択すれば、どの範囲まで作成したsnippetを利用できるようにするか、スコープを決めたsnippetも作れます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191029/20191029224321.png&quot; alt=&quot;f:id:sugimomoto:20191029224321p:plain&quot; title=&quot;f:id:sugimomoto:20191029224321p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;とりあえずわかりやすく新しいグロー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D0%A5%EB%A5%B9&quot;&gt;バルス&lt;/a&gt;ニペットを選択しました。&lt;/p&gt;

&lt;p&gt;ファイルを保存すると以下のように&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%CB%A5%DA%A5%C3%A5%C8&quot;&gt;スニペット&lt;/a&gt;を書くための&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;ファイルが生成されます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191029/20191029224328.png&quot; alt=&quot;f:id:sugimomoto:20191029224328p:plain&quot; title=&quot;f:id:sugimomoto:20191029224328p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;サンプルにもありますが、私が実際に作っているものベースで以下のような感じで書きます。&lt;/p&gt;

&lt;pre class=&quot;code lang-json&quot; data-lang=&quot;json&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;
  &amp;quot;&lt;span class=&quot;synStatement&quot;&gt;api:if&lt;/span&gt;&amp;quot;: &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synError&quot;&gt;// Snippet の名前。ファイル内で重複できません。&lt;/span&gt;
    &amp;quot;&lt;span class=&quot;synStatement&quot;&gt;scope&lt;/span&gt;&amp;quot;: &amp;quot;&lt;span class=&quot;synConstant&quot;&gt;xml&lt;/span&gt;&amp;quot;, &lt;span class=&quot;synError&quot;&gt;// Scope。使う言語を指定できます。&lt;/span&gt;
    &amp;quot;&lt;span class=&quot;synStatement&quot;&gt;prefix&lt;/span&gt;&amp;quot;: &amp;quot;&lt;span class=&quot;synConstant&quot;&gt;if&lt;/span&gt;&amp;quot;, &lt;span class=&quot;synError&quot;&gt;// Snippetを使う時の文字列。これをプレフィックスを打ちはじめることで候補として表示されます。&lt;/span&gt;
    &amp;quot;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&amp;quot;: &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synError&quot;&gt;// Snippetで実際に生成される文字列です。配列で1行ごとに指定します。&lt;/span&gt;
      &amp;quot;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;api:if attr=&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;${1:attr1}&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;[${2:attr2}]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; operator=&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;${3:equals}&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;gt;&lt;/span&gt;&amp;quot;,
      &amp;quot;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;api:else&amp;gt;&lt;/span&gt;&amp;quot;,
      &amp;quot;&lt;span class=&quot;synConstant&quot;&gt;False&lt;/span&gt;&amp;quot;,
      &amp;quot;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;/api:else&amp;gt;&lt;/span&gt;&amp;quot;,
      &amp;quot;&lt;span class=&quot;synConstant&quot;&gt;True&lt;/span&gt;&amp;quot;,
      &amp;quot;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;/api:if&amp;gt;&lt;/span&gt;&amp;quot;
    &lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt;,
    &amp;quot;&lt;span class=&quot;synStatement&quot;&gt;description&lt;/span&gt;&amp;quot;: &amp;quot;&lt;span class=&quot;synConstant&quot;&gt;You can use the api:if keyword to evaluate expressions that can contain items, attributes, and values. The scope of the keyword is executed if the specified expression evaluates to true.&lt;/span&gt;&amp;quot; 
  &lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;synError&quot;&gt;// Snippetを選択する時に表示される説明文です。&lt;/span&gt;
  &amp;quot;&lt;span class=&quot;synStatement&quot;&gt;api:include&lt;/span&gt;&amp;quot;: &lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;synError&quot;&gt;// Snippet ２つ目&lt;/span&gt;
    &amp;quot;&lt;span class=&quot;synStatement&quot;&gt;scope&lt;/span&gt;&amp;quot;: &amp;quot;&lt;span class=&quot;synConstant&quot;&gt;xml&lt;/span&gt;&amp;quot;,
    &amp;quot;&lt;span class=&quot;synStatement&quot;&gt;prefix&lt;/span&gt;&amp;quot;: &amp;quot;&lt;span class=&quot;synConstant&quot;&gt;include&lt;/span&gt;&amp;quot;,
    &amp;quot;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&amp;quot;: &lt;span class=&quot;synSpecial&quot;&gt;[&lt;/span&gt;
      &amp;quot;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;api:include file=&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;${1:globals.rsb}&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&amp;gt;&lt;/span&gt;&amp;quot;
    &lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt;,
    &amp;quot;&lt;span class=&quot;synStatement&quot;&gt;description&lt;/span&gt;&amp;quot;: &amp;quot;&lt;span class=&quot;synConstant&quot;&gt;The api:include keyword is used to include API Script from other files. Like traditional includes in other programming languages, api:include is replaced by the contents of the file specified in the file parameter.&lt;/span&gt;&amp;quot;
  &lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;ちなみにBodyに書いてある「${1:attr1}」はタブストップです。数字の番号順にタブが止まります。&lt;/p&gt;

&lt;p&gt;「$1」「$2」と書いてもいいですし、デフォルトの値を表示したい場合は「${1:Hogehoge}」と書きます。&lt;/p&gt;

&lt;p&gt;このあたりは以下のリンクにも詳しく書いてあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/docs/editor/userdefinedsnippets#_snippet-syntax&quot;&gt;Snippets in Visual Studio Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;で実際に使ってみた感じが以下の通りです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/snippet.gif&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/snippet.gif&quot; class=&quot;http-image&quot; alt=&quot;https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/snippet.gif&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;インデント入れ忘れたな、と作ったあとに気づきました。&lt;/p&gt;

&lt;h1&gt;まったく需要が無いと思われる CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Scriptの作り方&lt;/h1&gt;

&lt;p&gt;最終的にできあがった Snippet ファイルはこんな感じです。1200行あってエグいですね。200個近く Snippet がある感じです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/snippetlist.gif&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/snippetlist.gif&quot; class=&quot;http-image&quot; alt=&quot;https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/snippetlist.gif&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちなみにどうやったかと言えば、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/C%23&quot;&gt;C#&lt;/a&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EC%A5%A4%A5%D4%A5%F3%A5%B0&quot;&gt;スクレイピング&lt;/a&gt;（&lt;a href=&quot;https://anglesharp.github.io/&quot;&gt;AngleSharp&lt;/a&gt;）するプログラムを書いて、以下のHTMLベースリファレンスから全部漁りました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cdn.cdata.com/help/DWE/jp/ado/pg_stringvalueformatters.htm&quot;&gt;http://cdn.cdata.com/help/DWE/jp/ado/pg_stringvalueformatters.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191029/20191029224421.png&quot; alt=&quot;f:id:sugimomoto:20191029224421p:plain&quot; title=&quot;f:id:sugimomoto:20191029224421p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;それを最終的に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;用のオブジェクトに格納して、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B7%A5%EA%A5%A2%A5%E9%A5%A4%A5%BA&quot;&gt;シリアライズ&lt;/a&gt;（&lt;a href=&quot;https://www.newtonsoft.com/json&quot;&gt;Json.NET&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;あまりに汎用性が無いので、非公開。&lt;/p&gt;

&lt;p&gt;中の人なのになんで！？　って思われれるかもしれないですが、言語定義とヘルプ用説明HTMLがわかれていて、どうしようもなかった・・・。&lt;/p&gt;

&lt;p&gt;ただ、リファレンスだけが公開されている独自言語ってそれなりにあると思うので、こういった&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EC%A5%A4%A5%D4%A5%F3%A5%B0&quot;&gt;スクレイピング&lt;/a&gt;アプローチは他にも結構ありえるかなと思ったりです。&lt;/p&gt;

&lt;h2&gt;使い方&lt;/h2&gt;

&lt;p&gt;もし使って、CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Scriptを使って、書いてみたい！　という方は、以下からCData REST Driverのトライアル版と&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.cdata.com%2Fjp%2Fdrivers%2Frest%2F&quot; title=&quot;Drivers for REST (ODBC, JDBC, ADO, SSIS, EXCEL, POWERBI, FIREDAC, ODATA, SYNC)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://www.cdata.com/jp/drivers/rest/&quot;&gt;www.cdata.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;以下から Snippet を取得してやってみましょう！（布教&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fsugimomoto%2FCData.APIScript.VSCodeSnippet%2Fblob%2Fmaster%2FCDataAPIScriptSnippet.json&quot; title=&quot;sugimomoto/CData.APIScript.VSCodeSnippet&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/sugimomoto/CData.APIScript.VSCodeSnippet/blob/master/CDataAPIScriptSnippet.json&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;CallConnect &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/REST%20API&quot;&gt;REST API&lt;/a&gt; をベースに作ったサンプルが以下にあります。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fsugimomoto%2FCData.REST.CallConnect&quot; title=&quot;sugimomoto/CData.REST.CallConnect&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/sugimomoto/CData.REST.CallConnect&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</hatena:formatted-content>
        <category term="CData" />
        <category term="VS Code" />
        <category term="Snippet" />
        <app:control>
            <app:draft>no</app:draft>
        </app:control>
    </entry>
    <entry>
        <id>tag:blog.hatena.ne.jp,2013:blog-sugimomoto-8454420450088934728-26006613456458435</id>
        <link rel="edit" href="https://blog.hatena.ne.jp/sugimomoto/kageura.hatenadiary.jp/atom/entry/26006613456458435"/>
        <link rel="alternate" type="text/html" href="http://kageura.hatenadiary.jp/entry/sumaregitechtalk1"/>
        <author>
            <name>sugimomoto</name>
        </author>
        <title>スマレジ主催のミートアップ smaregi tech talk #1 に参加・LTをしてきましたレポート</title>
        <updated>2019-10-28T10:00:00+09:00</updated>
        <published>2019-10-28T10:00:17+09:00</published>
        <app:edited>2019-10-28T10:00:17+09:00</app:edited>
        <summary type="text">今日は、先週大阪で開催されたスマレジ主催の勉強会「smaregi tech talk #1」に参加・LTをしてきたので、そのレポートをお送りします！ smaregiconf.connpass.com 普段仙台で仕事をしている私ですが、スマレジ × Web API ということで、「…</summary>
        <content type="text/x-markdown">今日は、先週大阪で開催されたスマレジ主催の勉強会「smaregi tech talk #1」に参加・LTをしてきたので、そのレポートをお送りします！



[https://smaregiconf.connpass.com/event/147429/:embed:cite]



普段仙台で仕事をしている私ですが、スマレジ × Web API ということで、「これは参加しないわけにはいかない！」となり、飛行機で大阪まで飛んで参加してきました。


&lt;!-- more --&gt;



[:contents]


# smaregi tech talk #1 について

今回が初開催の「smaregi tech talk」ですが、以下のような趣旨で行うミートアップイベントのようです。

&gt; smaregi tech talkは、大阪のテクノロジー企業「スマレジ」が主催するミートアップイベントです。毎回１つのテーマを切り口にスマレジについてお話をしつつ、イベントの参加者同士でゆる〜く交流できるイベントです。

初回である今回のテーマは Web APIとなっており、スマレジのWeb APIの使い方から、活用事例、さらにスマレジのエンジニアさんによる実務上における REST API の課題・対策のお話まで、Web APIという切り口ながら幅広い内容でセッションが行われていたなーと感じました。

なお、私が写真を撮り忘れたのですが、こんな感じのおしゃれなショールームで開催されてました！（以下のスマレジショールームのWeb Siteから引用）



[https://corp.smaregi.jp/news/topic/20181003289.php:embed:cite]



[f:id:sugimomoto:20191027214609p:plain]

[f:id:sugimomoto:20191027214626p:plain]

当日のツイートまとめも公開されています。



[https://togetter.com/li/1421194:embed:cite]



## Power BI からリアルタイム・ダイレクトにスマレジAPIデータをクエリしてビジュアライズする方法：私のセッション

私のセッションではPower BI からスマレジのデータを扱う方法をベースに、繋ぐために使用しているCData Power BI Connectorの紹介や内部的にどのようにスマレジAPIを扱っているのかについてお話しました。

[f:id:sugimomoto:20191027214708p:plain]

ちなみにこのセッションは実際に CData スマレジ Driver（RESTのプロトタイプ版ですね）を使ったお客様から聞いたお話をベースに構成しています。


[f:id:sugimomoto:20191027214740p:plain]



スマレジUIからも色々と分析は可能になっていますが、ユーザー個別のケースを追求しているわけではないので、このあたりはやはりAPIと連携して、ユーザー自身の使いやすいインターフェース（今回はBIがベースとはなっていましたが）を実現するのがいいですね。

実は会場にはそのBI連携部分の実装を担当された方も東京から駆けつけていまして、私も実際のレポートを初めて見ることができました。スマレジの中の方々にも好評だったみたいで、こういった交流ができるのもMeetupならではの醍醐味でした。

ちなみに、このセッションの動画は以下のYoutubeでも公開中です。



[https://www.youtube.com/watch?v=0hri0hbSU7o:embed:cite]



スライドはこちらからどうぞ。



[https://speakerdeck.com/sugimomoto/poewr-bi-karariarutaimudairekutonisumareziapidetawokuerisitebiziyuaraizusurufang-fa:embed:cite]



あと、思った以上に私のQiita記事が読まれていてびっくりしました（汗



[https://qiita.com/sugimomoto/items/1262eae4056f092ad8df:embed:cite]



この Qiita記事はプロトタイプ版のものですが、今度は正式なDriverがリリースされますので、是非そちらも試してもらえればな、と思います。


## 会場説明と会社紹介：スマレジ 川上さん

最初のセッションはスマレジの川上さんから、会場の説明と共にスマレジとはなんぞや？　というお話がありました。

実はこのセッション、スマレジAPIの連携事例も紹介されていて熱かった！

王道とも言えるERPの商品マスタ・部門マスタの連携、CRMとの会員情報・ポイント情報の事例や



[https://twitter.com/sugimomoto/status/1187311143313801221:embed]



スマレジ WaiterのクレームデータをCTIの顧客データと紐付けて、顧客対応時のフォローアップを行えるようにしたり


[https://twitter.com/sugimomoto/status/1187312024197353472:embed]



ここだけでも1セッションやってほしいなーというような内容でした。

## スマレジ API のご紹介：スマレジ 今西さん

次はスマレジ・タイムカードの主にフロント部分を担当されている今西さん（@moz_mzone）から、スマレジAPIの概要と使い方の解説のセッションが行われました。


[https://docs.google.com/presentation/d/11o32-Co6ZFG8rEvu47fie-YbWB83M7g-kZcxLdo10AY/edit#slide=id.g6535a8db3f_0_3:embed:cite]



スマレジAPI、リクエストBodyの仕組みが特殊で若干敷居が高いかなーという印象があったので、こういったセッションがありがたい人は多いんじゃないかなーと思いながら聞いていました。

あと、最後の方で次期スマレジ（Ver 4 !?）に関するお話もありました！　（バージョンなんて公開していたんですね）

[https://twitter.com/sugimomoto/status/1187314958050021376:embed]

取引データやまだ未公開のマスター関連もAPIとして公開されていく模様です！

これは続報に期待・・・！

## LTVを最大化させるスマレジ×Zoho CRM連携術：カイト合同会社 藤川さん

続いては、カイト合同会社の藤川さんからZoho CRMとスマレジ連携についてのセッション。


[https://www.slideshare.net/secret/8SyRcbK3xOuMC:title]



Zoho CRMは私の会社CDataでもDriver・Connectorを扱っていて、以前から知っていましたが、スマレジ連携もいいですね！

[f:id:sugimomoto:20191027214753p:plain]

最初の事例紹介でもありましたが、スマレジに会員情報の機能があることで、顧客紐付けデータが強くて、こういったCRM・CTIとの連携は今後どんどん増えそうだなーと感じました。

## 実務でつまずくREST API：スマレジ 保坂さん	

最後はスマレジ サーバーサイドエンジニア 保坂さんから、実際にREST APIを開発していたときに遭遇したリソースデザインのつまづきと解決アプローチについてのセッション！


[https://docs.google.com/presentation/d/1hxyzryqlK9MhsXA5KQcOY6CGQTHQRgVLtM_J_5QlOWs/edit?usp=sharing:embed:cite]



個人的には [Roy Fielding の論文](https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm) や [RESTful Web APIs](https://www.amazon.co.jp/dp/B00F5BS966/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1) を読んでいるタイミングだったこともあり、一番おもしろかった＋考えさせられたセッションでした。

やっぱり実際のエンティティモデルとリソースデザインの掛け合わせ、REST APIとしての使いやすさは悩む点が多いですね。

特にこのセッションでも紹介されていたRPC的なサービスの起動処理やリソース横断的検索サービス処理みたいなところは、いろんなAPIを触っている中でも、様々な実装があって開発者の産みの苦しみを感じる部分です・・・ｗ

[f:id:sugimomoto:20191027214813p:plain]

個人的にはRPC的なら、POSTで関数名URI、パラメータをBodyならとっつきやすいほうかなという印象ですが、はてさて。

# おわりに

今年の8月から10月にかけてひたすらスマレジAPIを叩いていたので、こういった形でスマレジの中の開発者の方やエンドユーザーの方と関われる機会はとても貴重で、楽しい勉強会でした！

是非またやってほしいなーといったところです！（東京で同じテーマでもいいんじゃないですかね！？）

あと、全然関係ありませんが、久しぶりの大阪だったので、大阪を堪能しました。（主に食の面で）

[https://twitter.com/sugimomoto/status/1187380198263656449?s=20:embed]

[https://twitter.com/sugimomoto/status/1187393188752789505?s=20:embed]

行くのはなかなか大変ですが（特に台風が重なっていて、帰りの飛行機が止まってしまったのが痛かった・・・）、またこういった勉強会にかこつけて、訪問したいですね！</content>
        <hatena:formatted-content type="text/html" xmlns:hatena="http://www.hatena.ne.jp/info/xmlns#">&lt;p&gt;今日は、先週大阪で開催されたスマレジ主催の勉強会「smaregi tech &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/talk&quot;&gt;talk&lt;/a&gt; #1」に参加・LTをしてきたので、そのレポートをお送りします！&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsmaregiconf.connpass.com%2Fevent%2F147429%2F&quot; title=&quot;【大阪・本町】smaregi tech talk #1 【Web API】 (2019/10/24 19:00〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://smaregiconf.connpass.com/event/147429/&quot;&gt;smaregiconf.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;普段仙台で仕事をしている私ですが、スマレジ × Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; ということで、「これは参加しないわけにはいかない！」となり、飛行機で大阪まで飛んで参加してきました。&lt;/p&gt;

&lt;ul class=&quot;table-of-contents&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;#smaregi-tech-talk-1-について&quot;&gt;smaregi tech talk #1 について&lt;/a&gt;&lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#Power-BI-からリアルタイムダイレクトにスマレジAPIデータをクエリしてビジュアライズする方法私のセッション&quot;&gt;Power BI からリアルタイム・ダイレクトにスマレジAPIデータをクエリしてビジュアライズする方法：私のセッション&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#会場説明と会社紹介スマレジ-川上さん&quot;&gt;会場説明と会社紹介：スマレジ 川上さん&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#スマレジ-API-のご紹介スマレジ-今西さん&quot;&gt;スマレジ API のご紹介：スマレジ 今西さん&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#LTVを最大化させるスマレジZoho-CRM連携術カイト合同会社-藤川さん&quot;&gt;LTVを最大化させるスマレジ×Zoho CRM連携術：カイト合同会社 藤川さん&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#実務でつまずくREST-APIスマレジ-保坂さん&quot;&gt;実務でつまずくREST API：スマレジ 保坂さん&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#おわりに&quot;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;smaregi-tech-talk-1-について&quot;&gt;smaregi tech &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/talk&quot;&gt;talk&lt;/a&gt; #1 について&lt;/h1&gt;

&lt;p&gt;今回が初開催の「smaregi tech &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/talk&quot;&gt;talk&lt;/a&gt;」ですが、以下のような趣旨で行うミートアップイベントのようです。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;smaregi tech &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/talk&quot;&gt;talk&lt;/a&gt;は、大阪のテク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%CE%A5%ED&quot;&gt;ノロ&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC&quot;&gt;ジー&lt;/a&gt;企業「スマレジ」が主催するミートアップイベントです。毎回１つのテーマを切り口にスマレジについてお話をしつつ、イベントの参加者同士でゆる〜く交流できるイベントです。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;初回である今回のテーマは Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;となっており、スマレジのWeb &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の使い方から、活用事例、さらにスマレジのエンジニアさんによる実務上における &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/REST%20API&quot;&gt;REST API&lt;/a&gt; の課題・対策のお話まで、Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;という切り口ながら幅広い内容でセッションが行われていたなーと感じました。&lt;/p&gt;

&lt;p&gt;なお、私が写真を撮り忘れたのですが、こんな感じのおしゃれな&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B7%A5%E7%A1%BC%A5%EB%A1%BC%A5%E0&quot;&gt;ショールーム&lt;/a&gt;で開催されてました！（以下のスマレジ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B7%A5%E7%A1%BC%A5%EB%A1%BC%A5%E0&quot;&gt;ショールーム&lt;/a&gt;のWeb Siteから引用）&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcorp.smaregi.jp%2Fnews%2Ftopic%2F20181003289.php&quot; title=&quot;大阪本社のセミナールームを無料開放いたします | 株式会社スマレジ 企業サイト&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://corp.smaregi.jp/news/topic/20181003289.php&quot;&gt;corp.smaregi.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191027/20191027214609.png&quot; alt=&quot;f:id:sugimomoto:20191027214609p:plain&quot; title=&quot;f:id:sugimomoto:20191027214609p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191027/20191027214626.png&quot; alt=&quot;f:id:sugimomoto:20191027214626p:plain&quot; title=&quot;f:id:sugimomoto:20191027214626p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;当日のツイートまとめも公開されています。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftogetter.com%2Fli%2F1421194&quot; title=&quot;smaregi tech talk #1 まとめ&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://togetter.com/li/1421194&quot;&gt;togetter.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2 id=&quot;Power-BI-からリアルタイムダイレクトにスマレジAPIデータをクエリしてビジュアライズする方法私のセッション&quot;&gt;Power BI からリアルタイム・ダイレクトにスマレジ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;データをクエリしてビジュアライズする方法：私のセッション&lt;/h2&gt;

&lt;p&gt;私のセッションではPower BI からスマレジのデータを扱う方法をベースに、繋ぐために使用しているCData Power BI Connectorの紹介や内部的にどのようにスマレジ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を扱っているのかについてお話しました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191027/20191027214708.png&quot; alt=&quot;f:id:sugimomoto:20191027214708p:plain&quot; title=&quot;f:id:sugimomoto:20191027214708p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ちなみにこのセッションは実際に CData スマレジ Driver（RESTのプロトタイプ版ですね）を使ったお客様から聞いたお話をベースに構成しています。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191027/20191027214740.png&quot; alt=&quot;f:id:sugimomoto:20191027214740p:plain&quot; title=&quot;f:id:sugimomoto:20191027214740p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;スマレジUIからも色々と分析は可能になっていますが、ユーザー個別のケースを追求しているわけではないので、このあたりはやはり&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;と連携して、ユーザー自身の使いやすいインターフェース（今回はBIがベースとはなっていましたが）を実現するのがいいですね。&lt;/p&gt;

&lt;p&gt;実は会場にはそのBI連携部分の実装を担当された方も東京から駆けつけていまして、私も実際のレポートを初めて見ることができました。スマレジの中の方々にも好評だったみたいで、こういった交流ができるのもMeetupならではの醍醐味でした。&lt;/p&gt;

&lt;p&gt;ちなみに、このセッションの動画は以下の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Youtube&quot;&gt;Youtube&lt;/a&gt;でも公開中です。&lt;/p&gt;

&lt;p&gt;&lt;iframe width=&quot;480&quot; height=&quot;270&quot; src=&quot;https://www.youtube.com/embed/0hri0hbSU7o?feature=oembed&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=0hri0hbSU7o&quot;&gt;www.youtube.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;スライドはこちらからどうぞ。&lt;/p&gt;

&lt;p&gt;&lt;iframe id=&quot;talk_frame_567400&quot; src=&quot;//speakerdeck.com/player/e47b49464fe14e6aab8dfed98dc0cedb&quot; width=&quot;710&quot; height=&quot;399&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;allowfullscreen&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/sugimomoto/poewr-bi-karariarutaimudairekutonisumareziapidetawokuerisitebiziyuaraizusurufang-fa&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;あと、思った以上に私のQiita記事が読まれていてびっくりしました（汗&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fsugimomoto%2Fitems%2F1262eae4056f092ad8df&quot; title=&quot;スマレジ APIをドライバー化：各種ツールから接続してみた - Qiita&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://qiita.com/sugimomoto/items/1262eae4056f092ad8df&quot;&gt;qiita.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;この Qiita記事はプロトタイプ版のものですが、今度は正式なDriverがリリースされますので、是非そちらも試してもらえればな、と思います。&lt;/p&gt;

&lt;h2 id=&quot;会場説明と会社紹介スマレジ-川上さん&quot;&gt;会場説明と会社紹介：スマレジ 川上さん&lt;/h2&gt;

&lt;p&gt;最初のセッションはスマレジの川上さんから、会場の説明と共にスマレジとはなんぞや？　というお話がありました。&lt;/p&gt;

&lt;p&gt;実はこのセッション、スマレジ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の連携事例も紹介されていて熱かった！&lt;/p&gt;

&lt;p&gt;王道とも言える&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ERP&quot;&gt;ERP&lt;/a&gt;の商品マスタ・部門マスタの連携、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CRM&quot;&gt;CRM&lt;/a&gt;との会員情報・ポイント情報の事例や&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;HASH(0x55713dc65b40)&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;スマレジ   &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;活用事例&lt;br&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ERP&quot;&gt;ERP&lt;/a&gt; x &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CRM&quot;&gt;CRM&lt;/a&gt;連携&lt;br&gt;王道という感じだー&lt;br&gt;&lt;br&gt; &lt;a href=&quot;https://twitter.com/hashtag/smaregi_talk?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#smaregi_talk&lt;/a&gt; &lt;a href=&quot;https://t.co/P96D8IxwRI&quot;&gt;pic.twitter.com/P96D8IxwRI&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kazuya Sugimoto (@sugimomoto) &lt;a href=&quot;https://twitter.com/sugimomoto/status/1187311143313801221?ref_src=twsrc%5Etfw&quot;&gt;October 24, 2019&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;スマレジ Waiterのクレームデータを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CTI&quot;&gt;CTI&lt;/a&gt;の顧客データと紐付けて、顧客対応時のフォローアップを行えるようにしたり&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;HASH(0x55596229c918)&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;なるほどー&lt;br&gt;ウェイターで入力されたクレーム情報を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CTI&quot;&gt;CTI&lt;/a&gt;の顧客情報と紐付けて、顧客から問い合わせがきた際に過去にクレームがあるかどうかがすぐにわかると。&lt;br&gt;実際の店舗のリアクションと連携しているのが面白いなー&lt;br&gt;&lt;br&gt; &lt;a href=&quot;https://twitter.com/hashtag/smaregi_talk?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#smaregi_talk&lt;/a&gt; &lt;a href=&quot;https://t.co/5EgPqh3Jje&quot;&gt;pic.twitter.com/5EgPqh3Jje&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kazuya Sugimoto (@sugimomoto) &lt;a href=&quot;https://twitter.com/sugimomoto/status/1187312024197353472?ref_src=twsrc%5Etfw&quot;&gt;October 24, 2019&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;ここだけでも1セッションやってほしいなーというような内容でした。&lt;/p&gt;

&lt;h2 id=&quot;スマレジ-API-のご紹介スマレジ-今西さん&quot;&gt;スマレジ &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; のご紹介：スマレジ 今西さん&lt;/h2&gt;

&lt;p&gt;次はスマレジ・タイムカードの主にフロント部分を担当されている今西さん（@moz_mzone）から、スマレジ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の概要と使い方の解説のセッションが行われました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F11o32-Co6ZFG8rEvu47fie-YbWB83M7g-kZcxLdo10AY%2Fedit%23slide%3Did.g6535a8db3f_0_3&quot; title=&quot;スマレジ APIのご紹介&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/11o32-Co6ZFG8rEvu47fie-YbWB83M7g-kZcxLdo10AY/edit#slide=id.g6535a8db3f_0_3&quot;&gt;docs.google.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;スマレジ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;、リク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トBodyの仕組みが特殊で若干敷居が高いかなーという印象があったので、こういったセッションがありがたい人は多いんじゃないかなーと思いながら聞いていました。&lt;/p&gt;

&lt;p&gt;あと、最後の方で次期スマレジ（Ver 4 !?）に関するお話もありました！　（バージョンなんて公開していたんですね）&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;HASH(0x55b23ee368f8)&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;おおおお。スマレジ 4でさらにマスターデータ、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%F3%A5%B6%A5%AF%A5%B7%A5%E7%A5%F3&quot;&gt;トランザクション&lt;/a&gt;にも&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;が対応するらしい！&lt;br&gt;&lt;br&gt; &lt;a href=&quot;https://twitter.com/hashtag/smaregi_talk?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#smaregi_talk&lt;/a&gt; &lt;a href=&quot;https://t.co/U5V47jODYb&quot;&gt;pic.twitter.com/U5V47jODYb&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kazuya Sugimoto (@sugimomoto) &lt;a href=&quot;https://twitter.com/sugimomoto/status/1187314958050021376?ref_src=twsrc%5Etfw&quot;&gt;October 24, 2019&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;取引データやまだ未公開のマスター関連も&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;として公開されていく模様です！&lt;/p&gt;

&lt;p&gt;これは続報に期待・・・！&lt;/p&gt;

&lt;h2 id=&quot;LTVを最大化させるスマレジZoho-CRM連携術カイト合同会社-藤川さん&quot;&gt;LTVを最大化させるスマレジ×&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Zoho&quot;&gt;Zoho&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CRM&quot;&gt;CRM&lt;/a&gt;連携術：カイト&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B9%E7%C6%B1%B2%F1%BC%D2&quot;&gt;合同会社&lt;/a&gt; 藤川さん&lt;/h2&gt;

&lt;p&gt;続いては、カイト&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B9%E7%C6%B1%B2%F1%BC%D2&quot;&gt;合同会社&lt;/a&gt;の藤川さんから&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Zoho&quot;&gt;Zoho&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CRM&quot;&gt;CRM&lt;/a&gt;とスマレジ連携についてのセッション。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/secret/8SyRcbK3xOuMC&quot;&gt;LTV&amp;#x3092;&amp;#x6700;&amp;#x5927;&amp;#x5316;&amp;#x3055;&amp;#x305B;&amp;#x308B;&amp;#x30B9;&amp;#x30DE;&amp;#x30EC;&amp;#x30B8;&amp;times;Zoho CRM&amp;#x9023;&amp;#x643A;&amp;#x8853;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Zoho&quot;&gt;Zoho&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CRM&quot;&gt;CRM&lt;/a&gt;は私の会社CDataでもDriver・Connectorを扱っていて、以前から知っていましたが、スマレジ連携もいいですね！&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191027/20191027214753.png&quot; alt=&quot;f:id:sugimomoto:20191027214753p:plain&quot; title=&quot;f:id:sugimomoto:20191027214753p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;最初の事例紹介でもありましたが、スマレジに会員情報の機能があることで、顧客紐付けデータが強くて、こういった&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CRM&quot;&gt;CRM&lt;/a&gt;・&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CTI&quot;&gt;CTI&lt;/a&gt;との連携は今後どんどん増えそうだなーと感じました。&lt;/p&gt;

&lt;h2 id=&quot;実務でつまずくREST-APIスマレジ-保坂さん&quot;&gt;実務でつまずく&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/REST%20API&quot;&gt;REST API&lt;/a&gt;：スマレジ 保坂さん&lt;/h2&gt;

&lt;p&gt;最後はスマレジ サーバーサイドエンジニア 保坂さんから、実際に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/REST%20API&quot;&gt;REST API&lt;/a&gt;を開発していたときに遭遇したリソースデザインのつまづきと解決アプローチについてのセッション！&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1hxyzryqlK9MhsXA5KQcOY6CGQTHQRgVLtM_J_5QlOWs%2Fedit%3Fusp%3Dsharing&quot; title=&quot;Smaregi Tech Talk #1 REST API&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1hxyzryqlK9MhsXA5KQcOY6CGQTHQRgVLtM_J_5QlOWs/edit?usp=sharing&quot;&gt;docs.google.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;個人的には &lt;a href=&quot;https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm&quot;&gt;Roy Fielding の論文&lt;/a&gt; や &lt;a href=&quot;https://www.amazon.co.jp/dp/B00F5BS966/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1&quot;&gt;RESTful Web APIs&lt;/a&gt; を読んでいるタイミングだったこともあり、一番おもしろかった＋考えさせられたセッションでした。&lt;/p&gt;

&lt;p&gt;やっぱり実際のエンティティモデルとリソースデザインの掛け合わせ、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/REST%20API&quot;&gt;REST API&lt;/a&gt;としての使いやすさは悩む点が多いですね。&lt;/p&gt;

&lt;p&gt;特にこのセッションでも紹介されていたRPC的なサービスの起動処理やリソース横断的検索サービス処理みたいなところは、いろんな&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を触っている中でも、様々な実装があって開発者の産みの苦しみを感じる部分です・・・ｗ&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191027/20191027214813.png&quot; alt=&quot;f:id:sugimomoto:20191027214813p:plain&quot; title=&quot;f:id:sugimomoto:20191027214813p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;個人的にはRPC的なら、POSTで関数名&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;、パラメータをBodyならとっつきやすいほうかなという印象ですが、はてさて。&lt;/p&gt;

&lt;h1 id=&quot;おわりに&quot;&gt;おわりに&lt;/h1&gt;

&lt;p&gt;今年の8月から10月にかけてひたすらスマレジ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を叩いていたので、こういった形でスマレジの中の開発者の方やエンドユーザーの方と関われる機会はとても貴重で、楽しい勉強会でした！&lt;/p&gt;

&lt;p&gt;是非またやってほしいなーといったところです！（東京で同じテーマでもいいんじゃないですかね！？）&lt;/p&gt;

&lt;p&gt;あと、全然関係ありませんが、久しぶりの大阪だったので、大阪を堪能しました。（主に食の面で）&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;HASH(0x5641750dcd80)&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;おかしい&lt;br&gt;たこ焼きを食べるはずが、たこ焼く前を食べている &lt;a href=&quot;https://t.co/cyqPljPNGp&quot;&gt;pic.twitter.com/cyqPljPNGp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kazuya Sugimoto (@sugimomoto) &lt;a href=&quot;https://twitter.com/sugimomoto/status/1187380198263656449?ref_src=twsrc%5Etfw&quot;&gt;October 24, 2019&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;HASH(0x5641750dcd80)&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;たこ焼きー！&lt;br&gt;たこ焼き？ &lt;a href=&quot;https://t.co/dQJORfz7MF&quot;&gt;pic.twitter.com/dQJORfz7MF&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kazuya Sugimoto (@sugimomoto) &lt;a href=&quot;https://twitter.com/sugimomoto/status/1187393188752789505?ref_src=twsrc%5Etfw&quot;&gt;October 24, 2019&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;行くのはなかなか大変ですが（特に台風が重なっていて、帰りの飛行機が止まってしまったのが痛かった・・・）、またこういった勉強会にかこつけて、訪問したいですね！&lt;/p&gt;
</hatena:formatted-content>
        <category term="スマレジ" />
        <category term="API" />
        <category term="REST API" />
        <category term="Web API" />
        <category term="Zoho" />
        <app:control>
            <app:draft>no</app:draft>
        </app:control>
    </entry>
    <entry>
        <id>tag:blog.hatena.ne.jp,2013:blog-sugimomoto-8454420450088934728-26006613453783510</id>
        <link rel="edit" href="https://blog.hatena.ne.jp/sugimomoto/kageura.hatenadiary.jp/atom/entry/26006613453783510"/>
        <link rel="alternate" type="text/html" href="http://kageura.hatenadiary.jp/entry/hazimetepostman"/>
        <author>
            <name>sugimomoto</name>
        </author>
        <title>はじめてでも怖くない！　Postman を使って、Web API を触ってみよう！</title>
        <updated>2019-10-23T10:00:00+09:00</updated>
        <published>2019-10-23T10:42:52+09:00</published>
        <app:edited>2019-10-23T11:27:17+09:00</app:edited>
        <summary type="text">最近 Postman のチュートリアルを触っていて、改めてその素晴らしさに感動したので、もっと Postman を触ってくれる人が増えてほしいなーと思いまして Web API 初心者向けの Postman 記事を書いてみました。 （以下の画像は衝動的に空輸してしまった私のPost…</summary>
        <content type="text/x-markdown">最近 Postman のチュートリアルを触っていて、改めてその素晴らしさに感動したので、もっと Postman を触ってくれる人が増えてほしいなーと思いまして Web API 初心者向けの Postman 記事を書いてみました。

（以下の画像は衝動的に空輸してしまった私のPostman Tシャツです）



[https://www.instagram.com/p/B28hYsgFZrW/:embed:cite]



一応この記事は「#7 はじめてのIT勉強会 in 仙台(2019)」でのLT用登壇資料ベースとして書いているので、後々スライドや登壇時の動画も公開するかなーと思っています。



[https://lets-go-study-meeting.connpass.com/event/148857/:embed:cite]




&lt;!-- more --&gt;



[:contents]


# この記事は誰に向けて？

前述の通りこれははじめて Web APIを触ってみようと言う方向けに書いています。Web APIというものを聞いたことがあるけれど、イマイチ一歩踏み出せない。触り始めるためにどうしたらいいのかわからない。そんな方に Postman というツールをきっかけにして踏み出してもらおうという趣旨です。

あまり Web APIとはなんぞや？　みたいなところには突っ込みすぎません。Web APIのドキュメントは見たことあるけれど、ここからどうしたらいいのかわからない、という感じのところで読むと良いと思います。

# Postman って何？

Postman は Web APIの開発者「提供する側・活用する側」双方にとってよりよい開発エクスペリエンスを提供するクライアントアプリケーションです。

最近は Web API開発者のためのコラボレーションプラットフォームとも呼ばれていますね。



[https://www.getpostman.com/:embed:cite]



[f:id:sugimomoto:20191022145642p:plain]

大まかな機能は大別して、下記の6種類提供されています。

- API Client：公開されているもしくは開発中の各種APIを簡単にテストできる機能です。
- Automated Testing：API開発者向けに各エンドポイントに対する自動テスト機能を提供します。
- Design &amp; Mock：APIを開発するにあたって、API SchemaをDesignするための専用EditorとそれをテスティングするためのMock Server機能を提供します。
- Documentation：PostmanのAPI定義から自動的にAPIドキュメントを生成し、外部ユーザーに提供することができる機能です。
- Monitors：提供されているAPIを定期的にチェックし、APIのアップデートや変更に伴う破損や従来のエクスペリエンスに変化が無いかモニタリングすることができます。
- Workspaces：チームでAPIを共同開発するためのコラボレーション機能を提供します。

[f:id:sugimomoto:20191022145648p:plain]

なお、今回は Postman のコア機能とも言える「API Client」に焦点を絞って紹介します。

# Postman の入手方法

Postman はもともとGoogle Chrome の拡張機能として提供されていましたが、現在は各プラットフォーム（Windows版、macOS版、Linux版）のクライアントアプリとして提供されています。

以下のURLからダウンロードして、インストールします。

https://www.getpostman.com/downloads/

[f:id:sugimomoto:20191022145655p:plain]

私はもっと挑戦的に生きたいんだ！　という方は将来的に正式リリースが予定されている機能を試すことができるCanary版をダウンロードしましょう。

https://www.getpostman.com/downloads/canary

[f:id:sugimomoto:20191022145701p:plain]

# Web API を使うために把握するべき７つの要素（REST Likeなもの向け）

さて、それでは早速 Web APIを試してみたいと思いますが、その前に何を把握すれば Web APIを実行できるのか、事前に把握するべき重要な要素を確認します。

今日 Web APIはRESTという設計思想に（幾分か）則って公開されているものが多数を占めます。各プラットフォーマー・Web API提供者側でちょっとづつニュアンスが異なる部分もあるでしょうが、とりあえず「これさえ抑えておけば怖くない。Web APIを触るための７つの要素」があると思って大丈夫でしょう。

- Base URI
- Resource
- Method
- Query
- Authentication
- Header
- Body

なお、今回は私が公開している O&#39;Reilly Book List APIをベースとして紹介します。

[https://twitter.com/sugimomoto/status/1184269451480317954?s=20:embed]

ちなみにこの Web APIの作り方はこちらで書いています。

[http://kageura.hatenadiary.jp/entry/cdataapiserverexcel:embed:cite]

## Base URI

一番最初に知らなければいけないことは、Web APIを提供しているサービサーのURIエンドポイントを特定することです。

今回のWeb APIでは以下のエンドポイントURIが対象になります。

[f:id:sugimomoto:20191022145710p:plain]

APIによっては、ここにバージョン名などが含まれる場合があります。

例えば [Qiita API](https://qiita.com/api/v2/docs) の場合は以下のように「v2」というバージョンが入ります。ここまでをベースとなるエンドポイントURIと今回は見なしていいでしょう。

```
https://qiita.com/api/v2/items
```

## Resource

Web API ではどんなデータを操作するのかを決める必要があります。Twitterであれば、ツイートやいいね、Qiitaであれば記事やチームなど。それを先程のBase URIと合わせて指定するのがWeb API（REST）では一般的です。

今回の Web APIでは以下のOReillyBookListがResourceにあたります。

[f:id:sugimomoto:20191022145719p:plain]

（実は設計思想的にはあまりよくない・・・。）

Qiita APIでいくと、以下の「items」がResourceです。このitemsに対してなんらかの操作をしますというのが、指定のイメージです。

```
https://qiita.com/api/v2/items
```

また、エンドポイントによっては以下のように、リソースをネストして指定することも可能です。以下はitemsのIDから「1」を指定して、そのitemに付与されているLikes（いいね）を指定するイメージです。

```
https://qiita.com/api/v2/items/1/likes
```

## Method

次にメソッドです。Web API（REST）ではHTTPの原則に基づいて、GETやPOST・PUT・DELETEといったリソースに対する操作方法を指定します。

データを取得するのであればGET、データを追加するのであればPOSTといった指定になります。

[f:id:sugimomoto:20191022145744p:plain]

サポートしているメソッドはサービスによって変わるので、GETしかサポートしないリソースや、POSTだけを許容するリソースもあるでしょう。それぞれのAPIドキュメントでどんな操作方法を許容しているのか、都度確認する必要があります。

## Query

Queryは主にデータを取得する際の各種諸条件を適用するために使われるパラメータセットのことを指します。

URLクエリ文字列、URIパラメータ、Query Stringなど様々な呼び方がされていますが [RFC3986](https://tools.ietf.org/html/rfc3986#section-3.4)では単純にQueryと呼ばれていますので、QueryまたはQuery String（クエリ文字列）が正式な呼称でしょう。

URIとリソースを指定した後に続く文字列として「？」以降に指定するものがQueryです。Web API
によって様々なQueryの指定方法がありますが、私が公開しているAPIでは「$select・$filter」といったパラメータをQueryでサポートしています。

[f:id:sugimomoto:20191022145750p:plain]

$select で取得したい項目 $filter でフィルタリング $orderby で並び替え $top で上位N件取得等ですね。

例えば2000円以下の本のタイトルと値段を取得して、値段安い順に並び替えて、TOP5を表示だと以下のようなQueryで取得することができます。

```
OReillyBookList?$select=Price,Title&amp;$filter=Price le 2000&amp;$orderby=Price&amp;$top=5
```

何も指定しないと、不要なデータを取得してしまったりするので、Web APIを触る場合にはその Web APIがどんなQueryをサポートしているのか、慎重に識別しておく必要があります。

## Header

対象のAPIに対して、追加情報を渡すために使用されるプロパティセットを指します。主に後述する認証情報やどんなフォーマットでデータの受け渡しを行うのか？を指定することが一般的です。

例えば、昨今の Web APIはJSONフォーマットでやりとりをすることが一般的です。以下のようにContent-Type（Web APIに渡すデータの形式）がjsonフォーマットですよ、Accept（受け取るデータのフォーマット）がjsonですよ、といったような指定をします。

```
GET decodeapiserverdemo.azurewebsites.net/api.rsc/OReillyBookList
Accept: application/json
Content-Type: application/json
Authorization: Bearer XXXXXXXXXX
```

この指定するパラメータについても各APIで異なります。今回の Web APIでは以下のようにPOSTリクエストなどを見るとわかりやすいと思います。

[f:id:sugimomoto:20191022145758p:plain]

## Body

Body は Web APIに渡すためのメインとなるデータを指定するための要素です。主にPOSTやPUTでリソースにデータを登録したり、更新したりする時に指定することが一般的です。

例えば今回のOReillyBookList APIでは以下のリクエストでリソースにデータを追加することが可能です。このJSONデータの部分がBodyの指定です。

```
POST http://decodeapiserverdemo.azurewebsites.net/api.rsc/OReillyBookList/ HTTP/1.1
Content-Type: application/json
x-cdata-authtoken: MY_AUTH_TOKEN

{
    &quot;RowId&quot;: 1,
    &quot;ImageUrl&quot;: &quot;http://hogehoge/image.jpg&quot;,
    &quot;ISBN&quot;: &quot;43413241243&quot;,
    &quot;Title&quot;: &quot;New Book&quot;
}
```

Web APIによってはXMLやCSVなど、様々なフォーマットを受け付ける場合があるので、これもAPI仕様書を確認しながら、登録するべきデータをフォーマットと一緒に作成します。

また、Web APIによっては、QueryやHeaderのような使い方をBodyで表現している場合もあるので、果たしてそのパラメータはどこに指定しなければいけないのか？　を慎重に見極める必要があります。

## Authentication

最後に最も大事な部分である Authentication、Web APIを操作するための認証部分です。Web APIで認証を行うためには様々なアプローチがあるので、ここではあまり多くを語りません。

今回のOReillyBookList APIでは、ヘッダーに「x-cdata-authtoken」という指定でTokenを入力することで、認証が行われます。

```
POST http://decodeapiserverdemo.azurewebsites.net/api.rsc/OReillyBookList/ HTTP/1.1
Content-Type: application/json
x-cdata-authtoken: MY_AUTH_TOKEN

{
    &quot;RowId&quot;: 1,
    &quot;ImageUrl&quot;: &quot;http://hogehoge/image.jpg&quot;,
    &quot;ISBN&quot;: &quot;43413241243&quot;,
    &quot;Title&quot;: &quot;New Book&quot;
}
```

Web API によっては、UserID・PasswordによるBasic認証やOAuthといった認証・認可の仕組みでTokenを取得し、Headerに指定するなどのアプローチがあります。

QiitaではOAuthを利用したフローか、ユーザー管理画面から発行して、以下のようにHeaderに含めるというアプローチになっています。

https://qiita.com/api/v2/docs#%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF

```
Authorization: Bearer 1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcd
```

ただ、一番理解しておきたいことは、一般的にこれらの情報を最終的に Header ないし Query でTokenなどの情報を指定する、という点にあると思います。（証明書によるプロセスなどの例外はありますが）

# Postman を使って O&#39;Reilly BookList の Web APIを叩いてみよう

Web APIを使うための要素を把握したところで、早速 Postman を使ってみましょう。

今回はシンプルにOReilly Book List APIを使って、データを10件取得してみたいと思います。

ドキュメントは以下の通りです。

http://decodeapiserverdemo.azurewebsites.net/api.rst#OReillyBookList

[f:id:sugimomoto:20191022145813p:plain]


Postman を立ち上げて、まずは対象となる Web APIのBase URIを指定しましょう。

OReillyBookListを提供しているサービスのBase URIは「http://decodeapiserverdemo.azurewebsites.net/api.rsc/」になります。これを Postman の以下の場所へ入力します。

[f:id:sugimomoto:20191022145821p:plain]

次にリソースを指定します。先程入力したBase URIの後ろに、OReillyBookListを入力します。

[f:id:sugimomoto:20191022145826p:plain]

次にMethodです。Postmanはプルダウンで各Methodを選択することができるようになっています。今回のAPIは仕様書を確認するとGET/POST/PUT/DELETEをサポートしていますが、データを取得するので「GET」をそのまま指定しておきます。

[f:id:sugimomoto:20191022145831p:plain]

次にQueryを入力します。PostmanにおけるQueryの指定はParamsタブで行います。

Paramsタブを選択し、データを10件だけ取得する指定をするので、Keyには「$top」Valueには「10」を指定します。このParamsタブにデータを入力すると、自動的にURIへQueryが補完されます。（逆もまた然りです）

[f:id:sugimomoto:20191022145837p:plain]

次に認証情報を追加してみましょう。Postmanは一般的な Web APIの認証方式を手軽に扱える機能がデフォルトで備わっています。今回のAPIはBasic認証が有効になっているので、Authorizationタブを選択し、認証のTypeから「Basic Auth」を選択、あとはUsernameとPasswordを入力すればOKという手軽なものになっています。

[f:id:sugimomoto:20191022145842p:plain]

最後にHeadersを指定します。今回の Web API、実は様々なフォーマット（JSONやCSV、TSVなどをサポート）でデータが取得できるのですが、ここでは明示的にJSONフォーマットでデータを取得したいと思います。

Headersタブを選択し、データ取得のフォーマットを指定するための「Accept」をKeyに指定します。ValueにはJSONを指定するため「application/json」と入力します。

[f:id:sugimomoto:20191022145849p:plain]

これで準備は完了です。APIを実際にリクエストするにはPostman右上にある「Send」ボタンをクリックします。

Web APIへのリクエストが成功すると、画面下の部分にデータを取得した結果が表示されます。

[f:id:sugimomoto:20191022145856p:plain]

# それでもわからない？ API Network でリクエストのためのテンプレートを手に入れよう

と、色々と解説してきましたが、それでもなんだかよくわからない Web API というのは巷にあふれているものです。

そんな時には各種 Web API の APIリクエスト用のテンプレート（Collectionと呼びます）を公開している Postman のAPI Network にアクセスしてみましょう。



[https://explore.postman.com/:embed:cite]



ここではTwitterやPaypal、Boxといったグローバルで Web APIを展開しているサービスのテンプレートが自由にダウンロードできます。

[f:id:sugimomoto:20191022145903p:plain]

例えばTwitterにアクセスして「Run in Postman」をクリックすれば

[f:id:sugimomoto:20191022145911p:plain]

以下のように、Twitterのリクエストテンプレートが自動的に追加されて、ここからAPIを試していくことができるようになっています。

[f:id:sugimomoto:20191022145928p:plain]

# Postman API Network に無いものはどうすればいいの？　OpenAPI（Swagger）を取り込んでみよう

Postman API Network はどちらかと言えばグローバル向けなので、国内のクラウドサービスAPIはほとんどありません。

それでも、そのクラウドサービスの Web APIが「OpenAPI（Swagger）」と呼ばれるAPI定義の情報（Spec）を公開していれば、それを取り込んでリクエストテンプレートにしてしまうことも可能です。

例えば会計ソフトのfreeeなどはSwagger Specを公開しています。

https://developer.freee.co.jp/

[f:id:sugimomoto:20191022145935p:plain]

OpenAPI（Swagger）Specは以下のReferenceから入手できます。そのままダウンロードすればOKです。

https://developer.freee.co.jp/docs/accounting/reference

[f:id:sugimomoto:20191022145942p:plain]

こんな感じのJSONデータになっています。

[f:id:sugimomoto:20191022145948p:plain]

取得したOpenAPI（Swagger）Specは PostmanのImport機能から取り込めます。画面右上の「Import」をクリックしてください。


[f:id:sugimomoto:20191022145954p:plain]

「Import File」タブから、ダウンロードしたOpenAPI（Swagger）Specを指定します。

[f:id:sugimomoto:20191022150016p:plain]

すると、以下のように会計 freee のAPI情報が取り込まれました。ここから簡単にAPIリクエストを実行できます。

[f:id:sugimomoto:20191022150024p:plain]

# APIリクエストはできた。でも、その後プログラムからはどうすればいいの？

さて、ここまで Postman で Web APIを触る方法を解説してきましたが、実際のところ最終的にはプログラムから Web APIを操作することがほとんどだと思います。

そうなると、各種プログラミング言語でこの Web APIの実行をどんな風に書けば良いのか？　といった問題にぶちあたるのではないかなと思いますが、

Postmanには各種プログラミング言語に対応したCode Snippetsを自動生成してくれる機能が提供されているのです！

Code Snippetsを使うには、対象の Web API リクエストを選択した状態で「Code」の文字をクリックします。

[f:id:sugimomoto:20191022150031p:plain]

すると以下のようなダイアログが表示されて、右上のプルダウンリストから各種プログラミング言語を選択できるようになります。

[f:id:sugimomoto:20191022150036p:plain]

これで対象となる言語を選択すれば、そのままリクエストが実行可能なCodeが生成されるというわけです！

[f:id:sugimomoto:20191022150041p:plain]

便利ですねー。是非このあたりの機能も活用してみてほしいと思います。

# おわりに

Postman のことをもっと知りたいという方は、是非Postman Learning Centerにアクセスしてみてください。ここのチュートリアルを一通りやるだけでも、相当 Postman が使いこなせるようになると思います。

[https://learning.getpostman.com/:embed:cite]

あと、Postmanには Web  API を手軽に試すことができる Web APIも提供しているので、こういうリクエストってどんな風に記述すればいいのだろう？　みたいな時にはとても役立つと思います。

[https://docs.postman-echo.com/?version=latest:embed:cite]</content>
        <hatena:formatted-content type="text/html" xmlns:hatena="http://www.hatena.ne.jp/info/xmlns#">&lt;p&gt;最近 Postman の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB&quot;&gt;チュートリアル&lt;/a&gt;を触っていて、改めてその素晴らしさに感動したので、もっと Postman を触ってくれる人が増えてほしいなーと思いまして Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; 初心者向けの Postman 記事を書いてみました。&lt;/p&gt;

&lt;p&gt;（以下の画像は衝動的に空輸してしまった私のPostman Tシャツです）&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://www.instagram.com/p/B28hYsgFZrW/embed/&quot; data-entry-image=&quot;https://www.instagram.com/p/B28hYsgFZrW/media/?size=l&quot; class=&quot;instagram-iframe&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allowtransparency&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.instagram.com/p/B28hYsgFZrW/&quot;&gt;www.instagram.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;一応この記事は「#7 はじめてのIT勉強会 in 仙台(2019)」でのLT用登壇資料ベースとして書いているので、後々スライドや登壇時の動画も公開するかなーと思っています。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Flets-go-study-meeting.connpass.com%2Fevent%2F148857%2F&quot; title=&quot;#7 はじめてのIT勉強会 in 仙台(2019) (2019/10/23 19:00〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://lets-go-study-meeting.connpass.com/event/148857/&quot;&gt;lets-go-study-meeting.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;ul class=&quot;table-of-contents&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;#この記事は誰に向けて&quot;&gt;この記事は誰に向けて？&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#Postman-って何&quot;&gt;Postman って何？&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#Postman-の入手方法&quot;&gt;Postman の入手方法&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#Web-API-を使うために把握するべき７つの要素REST-Likeなもの向け&quot;&gt;Web API を使うために把握するべき７つの要素（REST Likeなもの向け）&lt;/a&gt;&lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#Base-URI&quot;&gt;Base URI&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#Resource&quot;&gt;Resource&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#Method&quot;&gt;Method&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#Query&quot;&gt;Query&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#Header&quot;&gt;Header&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#Body&quot;&gt;Body&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#Authentication&quot;&gt;Authentication&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#Postman-を使って-OReilly-BookList-の-Web-APIを叩いてみよう&quot;&gt;Postman を使って O&#39;Reilly BookList の Web APIを叩いてみよう&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#それでもわからない-API-Network-でリクエストのためのテンプレートを手に入れよう&quot;&gt;それでもわからない？ API Network でリクエストのためのテンプレートを手に入れよう&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#Postman-API-Network-に無いものはどうすればいいのOpenAPISwaggerを取り込んでみよう&quot;&gt;Postman API Network に無いものはどうすればいいの？　OpenAPI（Swagger）を取り込んでみよう&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#APIリクエストはできたでもその後プログラムからはどうすればいいの&quot;&gt;APIリクエストはできた。でも、その後プログラムからはどうすればいいの？&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#おわりに&quot;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;この記事は誰に向けて&quot;&gt;この記事は誰に向けて？&lt;/h1&gt;

&lt;p&gt;前述の通りこれははじめて Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を触ってみようと言う方向けに書いています。Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;というものを聞いたことがあるけれど、イマイチ一歩踏み出せない。触り始めるためにどうしたらいいのかわからない。そんな方に Postman というツールをきっかけにして踏み出してもらおうという趣旨です。&lt;/p&gt;

&lt;p&gt;あまり Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;とはなんぞや？　みたいなところには突っ込みすぎません。Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のドキュメントは見たことあるけれど、ここからどうしたらいいのかわからない、という感じのところで読むと良いと思います。&lt;/p&gt;

&lt;h1 id=&quot;Postman-って何&quot;&gt;Postman って何？&lt;/h1&gt;

&lt;p&gt;Postman は Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の開発者「提供する側・活用する側」双方にとってよりよい開発エクス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DA%A5%EA%A5%A8&quot;&gt;ペリエ&lt;/a&gt;ンスを提供するクライアントアプリケーションです。&lt;/p&gt;

&lt;p&gt;最近は Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;開発者のためのコラボレーションプラットフォームとも呼ばれていますね。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.getpostman.com%2F&quot; title=&quot;Postman | The Collaboration Platform for API Development &quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.getpostman.com/&quot;&gt;www.getpostman.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145642.png&quot; alt=&quot;f:id:sugimomoto:20191022145642p:plain&quot; title=&quot;f:id:sugimomoto:20191022145642p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;大まかな機能は大別して、下記の6種類提供されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Client：公開されているもしくは開発中の各種&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を簡単にテストできる機能です。&lt;/li&gt;
&lt;li&gt;Automated Testing：&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;開発者向けに各エンドポイントに対する自動テスト機能を提供します。&lt;/li&gt;
&lt;li&gt;Design &amp;amp; Mock：&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を開発するにあたって、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; SchemaをDesignするための専用EditorとそれをテスティングするためのMock Server機能を提供します。&lt;/li&gt;
&lt;li&gt;Documentation：Postmanの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;定義から自動的に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;ドキュメントを生成し、外部ユーザーに提供することができる機能です。&lt;/li&gt;
&lt;li&gt;Monitors：提供されている&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を定期的にチェックし、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のアップデートや変更に伴う破損や従来のエクス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DA%A5%EA%A5%A8&quot;&gt;ペリエ&lt;/a&gt;ンスに変化が無いかモニタリングすることができます。&lt;/li&gt;
&lt;li&gt;Workspaces：チームで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を共同開発するためのコラボレーション機能を提供します。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145648.png&quot; alt=&quot;f:id:sugimomoto:20191022145648p:plain&quot; title=&quot;f:id:sugimomoto:20191022145648p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;なお、今回は Postman のコア機能とも言える「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Client」に焦点を絞って紹介します。&lt;/p&gt;

&lt;h1 id=&quot;Postman-の入手方法&quot;&gt;Postman の入手方法&lt;/h1&gt;

&lt;p&gt;Postman はもともと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Google%20Chrome&quot;&gt;Google Chrome&lt;/a&gt; の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B3%C8%C4%A5%B5%A1%C7%BD&quot;&gt;拡張機能&lt;/a&gt;として提供されていましたが、現在は各プラットフォーム（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Windows&quot;&gt;Windows&lt;/a&gt;版、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/macOS&quot;&gt;macOS&lt;/a&gt;版、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;版）のクライアントアプリとして提供されています。&lt;/p&gt;

&lt;p&gt;以下のURLからダウンロードして、インストールします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.getpostman.com/downloads/&quot;&gt;https://www.getpostman.com/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145655.png&quot; alt=&quot;f:id:sugimomoto:20191022145655p:plain&quot; title=&quot;f:id:sugimomoto:20191022145655p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;私はもっと挑戦的に生きたいんだ！　という方は将来的に正式リリースが予定されている機能を試すことができるCanary版をダウンロードしましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.getpostman.com/downloads/canary&quot;&gt;https://www.getpostman.com/downloads/canary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145701.png&quot; alt=&quot;f:id:sugimomoto:20191022145701p:plain&quot; title=&quot;f:id:sugimomoto:20191022145701p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;Web-API-を使うために把握するべき７つの要素REST-Likeなもの向け&quot;&gt;Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; を使うために把握するべき７つの要素（REST Likeなもの向け）&lt;/h1&gt;

&lt;p&gt;さて、それでは早速 Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を試してみたいと思いますが、その前に何を把握すれば Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を実行できるのか、事前に把握するべき重要な要素を確認します。&lt;/p&gt;

&lt;p&gt;今日 Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;はRESTという設計思想に（幾分か）則って公開されているものが多数を占めます。各&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%C3%A5%C8%A5%D5%A5%A9%A1%BC%A5%DE%A1%BC&quot;&gt;プラットフォーマー&lt;/a&gt;・Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;提供者側でちょっとづつニュアンスが異なる部分もあるでしょうが、とりあえず「これさえ抑えておけば怖くない。Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を触るための７つの要素」があると思って大丈夫でしょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Base &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Resource&lt;/li&gt;
&lt;li&gt;Method&lt;/li&gt;
&lt;li&gt;Query&lt;/li&gt;
&lt;li&gt;Authentication&lt;/li&gt;
&lt;li&gt;Header&lt;/li&gt;
&lt;li&gt;Body&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;なお、今回は私が公開している O&#39;Reilly Book List &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;をベースとして紹介します。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;HASH(0x563e678d8d88)&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Server（&lt;a href=&quot;https://t.co/oE8WxzNf5J&quot;&gt;https://t.co/oE8WxzNf5J&lt;/a&gt;）を使って1分くらいで作ったO&amp;#39;Reilly Book List &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を公開してみました。&lt;a href=&quot;https://t.co/7BziYVLMot&quot;&gt;https://t.co/7BziYVLMot&lt;/a&gt;&lt;br&gt;ID：user（ReadOnly）&lt;br&gt;Password：3s3E4a4r7Q7d2a1J0i4l&lt;br&gt;AuthType：Basic&lt;br&gt;&lt;br&gt;Azure WebApps 格安プランなので、あまりにアクセスがあると落ちちゃうかも。 &lt;a href=&quot;https://t.co/7Nzn0gjWHk&quot;&gt;pic.twitter.com/7Nzn0gjWHk&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kazuya Sugimoto (@sugimomoto) &lt;a href=&quot;https://twitter.com/sugimomoto/status/1184269451480317954?ref_src=twsrc%5Etfw&quot;&gt;October 16, 2019&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;ちなみにこの Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の作り方はこちらで書いています。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fkageura.hatenadiary.jp%2Fentry%2Fcdataapiserverexcel&quot; title=&quot;無料の API 自動生成ツールを使って、Excelファイルから REST API を生成してみる：CData API Server - Morning Girl&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://kageura.hatenadiary.jp/entry/cdataapiserverexcel&quot;&gt;kageura.hatenadiary.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2 id=&quot;Base-URI&quot;&gt;Base &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;一番最初に知らなければいけないことは、Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を提供している&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B5%A1%BC%A5%D3%A5%B5%A1%BC&quot;&gt;サービサー&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;エンドポイントを特定することです。&lt;/p&gt;

&lt;p&gt;今回のWeb &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;では以下のエンドポイント&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;が対象になります。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145710.png&quot; alt=&quot;f:id:sugimomoto:20191022145710p:plain&quot; title=&quot;f:id:sugimomoto:20191022145710p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;によっては、ここにバージョン名などが含まれる場合があります。&lt;/p&gt;

&lt;p&gt;例えば &lt;a href=&quot;https://qiita.com/api/v2/docs&quot;&gt;Qiita API&lt;/a&gt; の場合は以下のように「v2」というバージョンが入ります。ここまでをベースとなるエンドポイント&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;と今回は見なしていいでしょう。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;https://qiita.com/api/v2/items&lt;/pre&gt;


&lt;h2 id=&quot;Resource&quot;&gt;Resource&lt;/h2&gt;

&lt;p&gt;Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; ではどんなデータを操作するのかを決める必要があります。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Twitter&quot;&gt;Twitter&lt;/a&gt;であれば、ツイートやいいね、Qiitaであれば記事やチームなど。それを先程のBase &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;と合わせて指定するのがWeb &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;（REST）では一般的です。&lt;/p&gt;

&lt;p&gt;今回の Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;では以下のOReillyBookListがResourceにあたります。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145719.png&quot; alt=&quot;f:id:sugimomoto:20191022145719p:plain&quot; title=&quot;f:id:sugimomoto:20191022145719p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;（実は設計思想的にはあまりよくない・・・。）&lt;/p&gt;

&lt;p&gt;Qiita &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;でいくと、以下の「items」がResourceです。このitemsに対してなんらかの操作をしますというのが、指定のイメージです。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;https://qiita.com/api/v2/items&lt;/pre&gt;


&lt;p&gt;また、エンドポイントによっては以下のように、リソースをネストして指定することも可能です。以下はitemsのIDから「1」を指定して、そのitemに付与されているLikes（いいね）を指定するイメージです。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;https://qiita.com/api/v2/items/1/likes&lt;/pre&gt;


&lt;h2 id=&quot;Method&quot;&gt;Method&lt;/h2&gt;

&lt;p&gt;次にメソッドです。Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;（REST）ではHTTPの原則に基づいて、GETやPOST・PUT・DELETEといったリソースに対する操作方法を指定します。&lt;/p&gt;

&lt;p&gt;データを取得するのであればGET、データを追加するのであればPOSTといった指定になります。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145744.png&quot; alt=&quot;f:id:sugimomoto:20191022145744p:plain&quot; title=&quot;f:id:sugimomoto:20191022145744p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;サポートしているメソッドはサービスによって変わるので、GETしかサポートしないリソースや、POSTだけを許容するリソースもあるでしょう。それぞれの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;ドキュメントでどんな操作方法を許容しているのか、都度確認する必要があります。&lt;/p&gt;

&lt;h2 id=&quot;Query&quot;&gt;Query&lt;/h2&gt;

&lt;p&gt;Queryは主にデータを取得する際の各種諸条件を適用するために使われるパラメー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BF%A5%BB%A5%C3%A5%C8&quot;&gt;タセット&lt;/a&gt;のことを指します。&lt;/p&gt;

&lt;p&gt;URLクエリ文字列、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;パラメータ、Query Stringなど様々な呼び方がされていますが &lt;a href=&quot;https://tools.ietf.org/html/rfc3986#section-3.4&quot;&gt;RFC3986&lt;/a&gt;では単純にQueryと呼ばれていますので、QueryまたはQuery String（クエリ文字列）が正式な呼称でしょう。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;とリソースを指定した後に続く文字列として「？」以降に指定するものがQueryです。Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;
によって様々なQueryの指定方法がありますが、私が公開している&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;では「$select・$filter」といったパラメータをQueryでサポートしています。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145750.png&quot; alt=&quot;f:id:sugimomoto:20191022145750p:plain&quot; title=&quot;f:id:sugimomoto:20191022145750p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;$select で取得したい項目 $filter でフィルタリング $orderby で並び替え $top で上位N件取得等ですね。&lt;/p&gt;

&lt;p&gt;例えば2000円以下の本のタイトルと値段を取得して、値段安い順に並び替えて、TOP5を表示だと以下のようなQueryで取得することができます。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;OReillyBookList?$select=Price,Title&amp;amp;$filter=Price le 2000&amp;amp;$orderby=Price&amp;amp;$top=5&lt;/pre&gt;


&lt;p&gt;何も指定しないと、不要なデータを取得してしまったりするので、Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を触る場合にはその Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;がどんなQueryをサポートしているのか、慎重に識別しておく必要があります。&lt;/p&gt;

&lt;h2 id=&quot;Header&quot;&gt;Header&lt;/h2&gt;

&lt;p&gt;対象の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;に対して、追加情報を渡すために使用されるプロパティセットを指します。主に後述する認証情報やどんなフォーマットでデータの受け渡しを行うのか？を指定することが一般的です。&lt;/p&gt;

&lt;p&gt;例えば、昨今の Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;フォーマットでやりとりをすることが一般的です。以下のようにContent-Type（Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;に渡すデータの形式）が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/json&quot;&gt;json&lt;/a&gt;フォーマットですよ、Accept（受け取るデータのフォーマット）が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/json&quot;&gt;json&lt;/a&gt;ですよ、といったような指定をします。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;GET decodeapiserverdemo.azurewebsites.net/api.rsc/OReillyBookList
Accept: application/json
Content-Type: application/json
Authorization: Bearer XXXXXXXXXX&lt;/pre&gt;


&lt;p&gt;この指定するパラメータについても各&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;で異なります。今回の Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;では以下のようにPOSTリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トなどを見るとわかりやすいと思います。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145758.png&quot; alt=&quot;f:id:sugimomoto:20191022145758p:plain&quot; title=&quot;f:id:sugimomoto:20191022145758p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;Body&quot;&gt;Body&lt;/h2&gt;

&lt;p&gt;Body は Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;に渡すためのメインとなるデータを指定するための要素です。主にPOSTやPUTでリソースにデータを登録したり、更新したりする時に指定することが一般的です。&lt;/p&gt;

&lt;p&gt;例えば今回のOReillyBookList &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;では以下のリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トでリソースにデータを追加することが可能です。この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;データの部分がBodyの指定です。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;POST http://decodeapiserverdemo.azurewebsites.net/api.rsc/OReillyBookList/ HTTP/1.1
Content-Type: application/json
x-cdata-authtoken: MY_AUTH_TOKEN

{
    &amp;#34;RowId&amp;#34;: 1,
    &amp;#34;ImageUrl&amp;#34;: &amp;#34;http://hogehoge/image.jpg&amp;#34;,
    &amp;#34;ISBN&amp;#34;: &amp;#34;43413241243&amp;#34;,
    &amp;#34;Title&amp;#34;: &amp;#34;New Book&amp;#34;
}&lt;/pre&gt;


&lt;p&gt;Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;によっては&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/XML&quot;&gt;XML&lt;/a&gt;や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSV&quot;&gt;CSV&lt;/a&gt;など、様々なフォーマットを受け付ける場合があるので、これも&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;仕様書を確認しながら、登録するべきデータをフォーマットと一緒に作成します。&lt;/p&gt;

&lt;p&gt;また、Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;によっては、QueryやHeaderのような使い方をBodyで表現している場合もあるので、果たしてそのパラメータはどこに指定しなければいけないのか？　を慎重に見極める必要があります。&lt;/p&gt;

&lt;h2 id=&quot;Authentication&quot;&gt;Authentication&lt;/h2&gt;

&lt;p&gt;最後に最も大事な部分である Authentication、Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を操作するための認証部分です。Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;で認証を行うためには様々なアプローチがあるので、ここではあまり多くを語りません。&lt;/p&gt;

&lt;p&gt;今回のOReillyBookList &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;では、ヘッダーに「x-cdata-authtoken」という指定でTokenを入力することで、認証が行われます。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;POST http://decodeapiserverdemo.azurewebsites.net/api.rsc/OReillyBookList/ HTTP/1.1
Content-Type: application/json
x-cdata-authtoken: MY_AUTH_TOKEN

{
    &amp;#34;RowId&amp;#34;: 1,
    &amp;#34;ImageUrl&amp;#34;: &amp;#34;http://hogehoge/image.jpg&amp;#34;,
    &amp;#34;ISBN&amp;#34;: &amp;#34;43413241243&amp;#34;,
    &amp;#34;Title&amp;#34;: &amp;#34;New Book&amp;#34;
}&lt;/pre&gt;


&lt;p&gt;Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; によっては、UserID・Passwordによる&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Basic%C7%A7%BE%DA&quot;&gt;Basic認証&lt;/a&gt;やOAuthといった認証・認可の仕組みでTokenを取得し、Headerに指定するなどのアプローチがあります。&lt;/p&gt;

&lt;p&gt;QiitaではOAuthを利用したフローか、ユーザー管理画面から発行して、以下のようにHeaderに含めるというアプローチになっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita.com/api/v2/docs#%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF&quot;&gt;https://qiita.com/api/v2/docs#%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF&lt;/a&gt;&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Authorization: Bearer 1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcd&lt;/pre&gt;


&lt;p&gt;ただ、一番理解しておきたいことは、一般的にこれらの情報を最終的に Header ないし Query でTokenなどの情報を指定する、という点にあると思います。（証明書によるプロセスなどの例外はありますが）&lt;/p&gt;

&lt;h1 id=&quot;Postman-を使って-OReilly-BookList-の-Web-APIを叩いてみよう&quot;&gt;Postman を使って O&#39;Reilly BookList の Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を叩いてみよう&lt;/h1&gt;

&lt;p&gt;Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を使うための要素を把握したところで、早速 Postman を使ってみましょう。&lt;/p&gt;

&lt;p&gt;今回はシンプルにOReilly Book List &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を使って、データを10件取得してみたいと思います。&lt;/p&gt;

&lt;p&gt;ドキュメントは以下の通りです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://decodeapiserverdemo.azurewebsites.net/api.rst#OReillyBookList&quot;&gt;http://decodeapiserverdemo.azurewebsites.net/api.rst#OReillyBookList&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145813.png&quot; alt=&quot;f:id:sugimomoto:20191022145813p:plain&quot; title=&quot;f:id:sugimomoto:20191022145813p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Postman を立ち上げて、まずは対象となる Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のBase &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;を指定しましょう。&lt;/p&gt;

&lt;p&gt;OReillyBookListを提供しているサービスのBase &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;は「&lt;a href=&quot;http://decodeapiserverdemo.azurewebsites.net/api.rsc/&quot;&gt;http://decodeapiserverdemo.azurewebsites.net/api.rsc/&lt;/a&gt;」になります。これを Postman の以下の場所へ入力します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145821.png&quot; alt=&quot;f:id:sugimomoto:20191022145821p:plain&quot; title=&quot;f:id:sugimomoto:20191022145821p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;次にリソースを指定します。先程入力したBase &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;の後ろに、OReillyBookListを入力します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145826.png&quot; alt=&quot;f:id:sugimomoto:20191022145826p:plain&quot; title=&quot;f:id:sugimomoto:20191022145826p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;次にMethodです。Postmanはプルダウンで各Methodを選択することができるようになっています。今回の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;は仕様書を確認するとGET/POST/PUT/DELETEをサポートしていますが、データを取得するので「GET」をそのまま指定しておきます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145831.png&quot; alt=&quot;f:id:sugimomoto:20191022145831p:plain&quot; title=&quot;f:id:sugimomoto:20191022145831p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;次にQueryを入力します。PostmanにおけるQueryの指定はParamsタブで行います。&lt;/p&gt;

&lt;p&gt;Paramsタブを選択し、データを10件だけ取得する指定をするので、Keyには「$top」&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Value&quot;&gt;Value&lt;/a&gt;には「10」を指定します。このParamsタブにデータを入力すると、自動的に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/URI&quot;&gt;URI&lt;/a&gt;へQueryが補完されます。（逆もまた然りです）&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145837.png&quot; alt=&quot;f:id:sugimomoto:20191022145837p:plain&quot; title=&quot;f:id:sugimomoto:20191022145837p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;次に認証情報を追加してみましょう。Postmanは一般的な Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の認証方式を手軽に扱える機能がデフォルトで備わっています。今回の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Basic%C7%A7%BE%DA&quot;&gt;Basic認証&lt;/a&gt;が有効になっているので、Authorizationタブを選択し、認証のTypeから「Basic Auth」を選択、あとはUsernameとPasswordを入力すればOKという手軽なものになっています。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145842.png&quot; alt=&quot;f:id:sugimomoto:20191022145842p:plain&quot; title=&quot;f:id:sugimomoto:20191022145842p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;最後にHeadersを指定します。今回の Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;、実は様々なフォーマット（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSV&quot;&gt;CSV&lt;/a&gt;、TSVなどをサポート）でデータが取得できるのですが、ここでは明示的に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;フォーマットでデータを取得したいと思います。&lt;/p&gt;

&lt;p&gt;Headersタブを選択し、データ取得のフォーマットを指定するための「Accept」をKeyに指定します。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Value&quot;&gt;Value&lt;/a&gt;には&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;を指定するため「application/&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/json&quot;&gt;json&lt;/a&gt;」と入力します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145849.png&quot; alt=&quot;f:id:sugimomoto:20191022145849p:plain&quot; title=&quot;f:id:sugimomoto:20191022145849p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;これで準備は完了です。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を実際にリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トするにはPostman右上にある「Send」ボタンをクリックします。&lt;/p&gt;

&lt;p&gt;Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;へのリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トが成功すると、画面下の部分にデータを取得した結果が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145856.png&quot; alt=&quot;f:id:sugimomoto:20191022145856p:plain&quot; title=&quot;f:id:sugimomoto:20191022145856p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;それでもわからない-API-Network-でリクエストのためのテンプレートを手に入れよう&quot;&gt;それでもわからない？ &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Network でリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トのためのテンプレートを手に入れよう&lt;/h1&gt;

&lt;p&gt;と、色々と解説してきましたが、それでもなんだかよくわからない Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; というのは巷にあふれているものです。&lt;/p&gt;

&lt;p&gt;そんな時には各種 Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; の &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;リク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;ト用のテンプレート（Collectionと呼びます）を公開している Postman の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Network にアクセスしてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fexplore.postman.com%2F&quot; title=&quot;Postman | API Network&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://explore.postman.com/&quot;&gt;explore.postman.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;ここでは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Twitter&quot;&gt;Twitter&lt;/a&gt;や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Paypal&quot;&gt;Paypal&lt;/a&gt;、Boxといったグローバルで Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を展開しているサービスのテンプレートが自由にダウンロードできます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145903.png&quot; alt=&quot;f:id:sugimomoto:20191022145903p:plain&quot; title=&quot;f:id:sugimomoto:20191022145903p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;例えば&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Twitter&quot;&gt;Twitter&lt;/a&gt;にアクセスして「Run in Postman」をクリックすれば&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145911.png&quot; alt=&quot;f:id:sugimomoto:20191022145911p:plain&quot; title=&quot;f:id:sugimomoto:20191022145911p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;以下のように、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Twitter&quot;&gt;Twitter&lt;/a&gt;のリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トテンプレートが自動的に追加されて、ここから&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を試していくことができるようになっています。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145928.png&quot; alt=&quot;f:id:sugimomoto:20191022145928p:plain&quot; title=&quot;f:id:sugimomoto:20191022145928p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;Postman-API-Network-に無いものはどうすればいいのOpenAPISwaggerを取り込んでみよう&quot;&gt;Postman &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Network に無いものはどうすればいいの？　OpenAPI（Swagger）を取り込んでみよう&lt;/h1&gt;

&lt;p&gt;Postman &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Network はどちらかと言えばグローバル向けなので、国内の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9&quot;&gt;クラウド&lt;/a&gt;サービス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;はほとんどありません。&lt;/p&gt;

&lt;p&gt;それでも、その&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9&quot;&gt;クラウド&lt;/a&gt;サービスの Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;が「OpenAPI（Swagger）」と呼ばれる&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;定義の情報（Spec）を公開していれば、それを取り込んでリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トテンプレートにしてしまうことも可能です。&lt;/p&gt;

&lt;p&gt;例えば会計ソフトのfreeeなどはSwagger Specを公開しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.freee.co.jp/&quot;&gt;https://developer.freee.co.jp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145935.png&quot; alt=&quot;f:id:sugimomoto:20191022145935p:plain&quot; title=&quot;f:id:sugimomoto:20191022145935p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;OpenAPI（Swagger）Specは以下のReferenceから入手できます。そのままダウンロードすればOKです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.freee.co.jp/docs/accounting/reference&quot;&gt;https://developer.freee.co.jp/docs/accounting/reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145942.png&quot; alt=&quot;f:id:sugimomoto:20191022145942p:plain&quot; title=&quot;f:id:sugimomoto:20191022145942p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;こんな感じの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;データになっています。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145948.png&quot; alt=&quot;f:id:sugimomoto:20191022145948p:plain&quot; title=&quot;f:id:sugimomoto:20191022145948p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;取得したOpenAPI（Swagger）Specは PostmanのImport機能から取り込めます。画面右上の「Import」をクリックしてください。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022145954.png&quot; alt=&quot;f:id:sugimomoto:20191022145954p:plain&quot; title=&quot;f:id:sugimomoto:20191022145954p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;「Import File」タブから、ダウンロードしたOpenAPI（Swagger）Specを指定します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022150016.png&quot; alt=&quot;f:id:sugimomoto:20191022150016p:plain&quot; title=&quot;f:id:sugimomoto:20191022150016p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;すると、以下のように会計 freee の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;情報が取り込まれました。ここから簡単に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;リク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを実行できます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022150024.png&quot; alt=&quot;f:id:sugimomoto:20191022150024p:plain&quot; title=&quot;f:id:sugimomoto:20191022150024p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;APIリクエストはできたでもその後プログラムからはどうすればいいの&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;リク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トはできた。でも、その後プログラムからはどうすればいいの？&lt;/h1&gt;

&lt;p&gt;さて、ここまで Postman で Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を触る方法を解説してきましたが、実際のところ最終的にはプログラムから Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を操作することがほとんどだと思います。&lt;/p&gt;

&lt;p&gt;そうなると、各種&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC&quot;&gt;プログラミング言語&lt;/a&gt;でこの Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の実行をどんな風に書けば良いのか？　といった問題にぶちあたるのではないかなと思いますが、&lt;/p&gt;

&lt;p&gt;Postmanには各種&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC&quot;&gt;プログラミング言語&lt;/a&gt;に対応したCode Snippetsを自動生成してくれる機能が提供されているのです！&lt;/p&gt;

&lt;p&gt;Code Snippetsを使うには、対象の Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; リク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを選択した状態で「Code」の文字をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022150031.png&quot; alt=&quot;f:id:sugimomoto:20191022150031p:plain&quot; title=&quot;f:id:sugimomoto:20191022150031p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;すると以下のようなダイアログが表示されて、右上のプルダウンリストから各種&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC&quot;&gt;プログラミング言語&lt;/a&gt;を選択できるようになります。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022150036.png&quot; alt=&quot;f:id:sugimomoto:20191022150036p:plain&quot; title=&quot;f:id:sugimomoto:20191022150036p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;これで対象となる言語を選択すれば、そのままリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トが実行可能なCodeが生成されるというわけです！&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191022/20191022150041.png&quot; alt=&quot;f:id:sugimomoto:20191022150041p:plain&quot; title=&quot;f:id:sugimomoto:20191022150041p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;便利ですねー。是非このあたりの機能も活用してみてほしいと思います。&lt;/p&gt;

&lt;h1 id=&quot;おわりに&quot;&gt;おわりに&lt;/h1&gt;

&lt;p&gt;Postman のことをもっと知りたいという方は、是非Postman Learning Centerにアクセスしてみてください。ここの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB&quot;&gt;チュートリアル&lt;/a&gt;を一通りやるだけでも、相当 Postman が使いこなせるようになると思います。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Flearning.getpostman.com%2F&quot; title=&quot;Postman Learning Center&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://learning.getpostman.com/&quot;&gt;learning.getpostman.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;あと、Postmanには Web  &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; を手軽に試すことができる Web &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;も提供しているので、こういうリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トってどんな風に記述すればいいのだろう？　みたいな時にはとても役立つと思います。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.postman-echo.com%2F%3Fversion%3Dlatest&quot; title=&quot;Postman Echo&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://docs.postman-echo.com/?version=latest&quot;&gt;docs.postman-echo.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</hatena:formatted-content>
        <category term="Web API" />
        <category term="CData" />
        <category term="Postman" />
        <category term="API" />
        <category term="REST" />
        <app:control>
            <app:draft>no</app:draft>
        </app:control>
    </entry>
    <entry>
        <id>tag:blog.hatena.ne.jp,2013:blog-sugimomoto-8454420450088934728-26006613450706488</id>
        <link rel="edit" href="https://blog.hatena.ne.jp/sugimomoto/kageura.hatenadiary.jp/atom/entry/26006613450706488"/>
        <link rel="alternate" type="text/html" href="http://kageura.hatenadiary.jp/entry/cdataapiserverexcel"/>
        <author>
            <name>sugimomoto</name>
        </author>
        <title>無料の API 自動生成ツールを使って、Excelファイルから REST API を生成してみる：CData API Server</title>
        <updated>2019-10-18T16:33:04+09:00</updated>
        <published>2019-10-18T16:33:04+09:00</published>
        <app:edited>2019-12-19T08:20:14+09:00</app:edited>
        <summary type="text">今月はじめに CData API Server というAPIの自動生成ツールで無料版・freeのライセンスがリリースされました！ 今日はこの CData API Server を使ってExcel ファイルから REST API を生成する方法を解説したいと思います。(ちなみに機能…</summary>
        <content type="text/x-markdown">今月はじめに [CData API Server](https://www.cdata.com/jp/apiserver/) というAPIの自動生成ツールで無料版・freeのライセンスがリリースされました！

今日はこの CData API Server を使ってExcel ファイルから REST API を生成する方法を解説したいと思います。(ちなみに機能的にはExcel だけでなく、MySQL などのRDBからもAPIの生成が可能です。というかそっちの方がメインです)

ちなみに今回作ったAPIは以下の内容で公開しています。

[https://twitter.com/sugimomoto/status/1184269451480317954?s=20:embed]

&lt;!-- more --&gt;


[:contents]

# CData API Server って何？

[CData API Server](https://www.cdata.com/jp/apiserver/) はMySQLやExcelといった様々なデータソース（その数150種類以上！）をもとにOData規格で標準化されたREST ful なAPIを生成するツールです。

[f:id:sugimomoto:20191017151103p:plain]

どのデータソースからどのデータを公開するのか？　をポチポチとクリックしていくだけで、以下のようなAPIドキュメントと一緒にGET/POST/PUT/DELETE をサポートしたREST APIを自動で生成します。

[f:id:sugimomoto:20191017151112p:plain]

あとはいろんなクライアント・プログラムから使ってもらう感じです。

[f:id:sugimomoto:20191017151119p:plain]

CData API Server はもともと年間有償ライセンスで提供されていたのですが、最近のアップデートで「SQLite」「Apache Derby」「MySQL」「Excel」のデータソースでの利用が無料になりました！

https://www.cdata.com/jp/apiserver/#purchase

[f:id:sugimomoto:20191017151128p:plain]

※注意：企業・個人のインターナル・マイクロサービスとしての利用のみ無料で、外部公開・パブリックAPIにする場合は有償ライセンスが必要になります。

なので、今回の記事ではExcelをデータソースにしたAPIの生成方法を解説したいと思います。

また、記事の後半ではAPI Serverのインストール・セットアップ方法と無料版のライセンス購入方法についても記載しています。特に難しいところは無いかな～と思うのですが、よくわからなかった場合は参考にしてみてください。

# こんな REST API を生成するよ

さて、Excelから REST APIを生成するわけですが、元になるExcelファイルが無いと始まりません。なので今回は以下のURLで公開されている O&#39;Reilly の書籍リストを元にExcelファイルを作ってみました！

https://www.oreilly.co.jp/catalog/

[f:id:sugimomoto:20191017151136p:plain]

ここからExcelにコピーアンドペーストでベローっと貼り付けて、リンク先のURLを抽出し、ついでに後々のことを考えて画像URLもISBNを元に生成しています。

最終的に出来上がったExcelファイルはこちらです。以下のURLで公開しているので、使ってみてください。

[OReillyBookList.xlsx](https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/OReillyBookList.xlsx)

[f:id:sugimomoto:20191017151147p:plain]


## 実施手順

以下のような手順でAPIが作成できます。

1. Excel データソースの接続設定を追加する
2. ExcelのシートをAPIリソースとして追加する
3. アクセス用のユーザーを追加する
4. 生成されたAPIに対してアクセスする

ざっと全体像がわかるGIFアニメも作成しておいたので、合わせて参考にしてみてください。

[https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/oreilly.gif:image=https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/oreilly.gif]

## 1. Excel データソースの接続設定を追加する

それではAPIを作っていきましょう。「接続」→「接続」をクリックすると、データソースとして登録できるサービスの一覧が表示されるのでその中から Excel を選択します。

なお、デフォルトではExcelデータソースが使えないので、 [こちら](#API-Server-にExcelデータソースの機能を追加する方法) の手順を元にコネクタをインストールしておきます。（私の環境は色々と試しているので、いっぱいデータソースがあります）

[f:id:sugimomoto:20191017151246p:plain]

接続情報を入力する画面では、Excelファイルのファイルパスを入力します。

入力後「接続テスト」をクリックし、接続成功のメッセージが出たら、設定を保存します。

[f:id:sugimomoto:20191017151257p:plain]

これで、以下のように接続情報が構成されればOKです。

[f:id:sugimomoto:20191017151306p:plain]

## 2. ExcelのシートをAPIリソースとして追加する

次に Excel のどのシートを REST API として生成するのかの設定を行います。

「リソース」タブに移動し「リソースを追加」をクリックします。

[f:id:sugimomoto:20191017151313p:plain]

まず先程作成した対象の接続情報を選択し

[f:id:sugimomoto:20191017151322p:plain]

次にExcelファイルに含まれるシートを選択します。今回のExcelファイルは1シートしかないので、以下のように一つだけがリソースとして追加できます。複数シートを一括でAPI化することも可能です。

[f:id:sugimomoto:20191017151329p:plain]

最後に対象のリソース名（URLリソース名になります）と、どの操作を許容するのか（参照・作成・更新・削除）、どのカラムを公開するのか、を選択し保存するだけでAPIの作成が完了します。

[f:id:sugimomoto:20191017151338p:plain]

以下のようにリソースが保存されていればOKです。

[f:id:sugimomoto:20191017151348p:plain]

## 3. アクセス用のユーザーを追加する

最後にAPIアクセス用のユーザーを作成します。このユーザー情報とユーザーの認証トークンを使ってAPIアクセスを行います。

「ユーザー」タブに移動し「追加」ボタンをクリック

[f:id:sugimomoto:20191017151356p:plain]

ユーザー名と有効期限（0であれば永続です）、操作権限やリクエストリミットなどを設定し、保存するだけでOKです。

[f:id:sugimomoto:20191017151404p:plain]

ユーザーが作成されると、以下のように認証用トークンも自動生成されるので、これを控えておきましょう。

[f:id:sugimomoto:20191017151409p:plain]

## 4. 生成されたAPIに対してアクセスする

それでは作成したAPIにアクセスしてみましょう。APIタブに移動すると、作成されたAPIの仕様を確認することができます。

[f:id:sugimomoto:20191017151418p:plain]

GET/POST/PUT/DELETEのエンドポイントがそれぞれ実装されていて、各メソッドに応じて、データの参照・作成・更新・削除が実施可能です。

[f:id:sugimomoto:20191017151426p:plain]

GETのリクエストURLをそのままブラウザに貼り付けると、レスポンスがJSONで返ってくることがわかります。

[f:id:sugimomoto:20191017151434p:plain]

もちろん、POSTMANなどのクライアントからも実行可能です。先程作成した認証Tokenをヘッダーx-cdata-authtokenに付与してリクエストすることでデータの取得ができます。

```
GET /api.rsc/CData_Excel_OReillyBookList/ HTTP/1.1
Host: localhost:8387
x-cdata-authtoken: 1h0Y4y3x4Q5r6l0S7y6v
```


[f:id:sugimomoto:20191017151441p:plain]

ちなみにCData API Server は各クエリパラメータをサポートしてます

$select で取得したい項目 $filter でフィルタリング $orderby で並び替え $top で上位N件取得等。

例えば2000円以下の本のタイトルと値段を取得して、値段安い順に並び替えて、TOP5を表示だと以下のようなURLクエリパラメータで取得することができます。

http://localhost:8387/api.rsc/OReillyBookList/?$select=Price,Title&amp;$filter=Price le 2000&amp;$orderby=Price&amp;$top=5

[f:id:sugimomoto:20191017151450p:plain]

もちろん、以下のようにPSOTリクエストでリソース作成を実行すると

```
POST /api.rsc/CData_Excel_OReillyBookList HTTP/1.1
Host: localhost:8387
x-cdata-authtoken: 1h0Y4y3x4Q5r6l0S7y6v
Content-Type: application/json

{
    &quot;Price&quot;: &quot;1100&quot;,
    &quot;Title&quot;: &quot;新しい本&quot;
}
```

Excelファイルに直接新しいデータが挿入されます。

[f:id:sugimomoto:20191017151458p:plain]

なので、Excelファイルをデータソースとした簡単なAPIベースのアプリケーションも作成できますね。

# 補足

以下、API Serverのダウンロード方法や補足情報、ライセンスの購入、Excelデータソースの有効化の方法をまとめておきました。

Excelデータソースだけちょっと特殊な手順が必要なので注意してください。

## API Server のダウンロード・インストール方法

CData API Server は以下のURLから入手できます。

https://www.cdata.com/jp/apiserver/

画面中央（もしくは右上）のダウンロードをクリックしてください。

[f:id:sugimomoto:20191017151507p:plain]

今回はWindows版で進めますが、Corss-Platform版であればLinux・Unixの環境でも動作させることが可能です。

[f:id:sugimomoto:20191017151513p:plain]

必要事項を記入し、ダウンロードをクリックするとダウンロードが開始されます。

[f:id:sugimomoto:20191017151519p:plain]

[f:id:sugimomoto:20191017151536p:plain]

ダウンロードが完了し、インストーラーを立ち上げるとセットアップ用のダイアログが表示されます。ほとんどデフォルトのまま進めていけますが、一部最初に管理者用のパスワードを設定するところがあるので注意してください。

[f:id:sugimomoto:20191017151541p:plain]

ライセンス契約書を読み、同意するをクリック

[f:id:sugimomoto:20191017151546p:plain]

インストール先フォルダは特に任意の場所が無ければ、デフォルトのままで大丈夫です。

[f:id:sugimomoto:20191017151550p:plain]

コンポーネントはそのままデフォルトで進めます。

[f:id:sugimomoto:20191017151555p:plain]

ここも次へをクリックします。

[f:id:sugimomoto:20191017151601p:plain]

ここの画面でCData API Serverにログインするための管理者パスワードを設定します。（APIアクセスのパスワード・認証トークンとは別なので注意してください。）

[f:id:sugimomoto:20191017151610p:plain]

これで準備完了です。インストールを進めます。

[f:id:sugimomoto:20191017151616p:plain]

インストール後「完了」をクリックすることで、API Serverが自動的に立ち上がります。

[f:id:sugimomoto:20191017151621p:plain]

先程のパスワードとユーザー名「admin」でログインできます。

[f:id:sugimomoto:20191017151626p:plain]

以下のようにステータスダッシュボードが表示されればOKです。ただ、まだライセンスは設定されていない状態なので、次の章で無償版ライセンスを入手します。（ちなみに30日間の上位ライセンスによるトライアルはそのまま実施可能です。）

[f:id:sugimomoto:20191017151633p:plain]

## 無償（Free）版ライセンスの入手方法

それではAPI Serverに設定するライセンスを入手してみたいと思います。

※ちなみに、サクッとフル機能を試したい場合は、以下の30日間トライアルの方が簡単です。こっちだと、SQL Server、PostgreSQL、OracleやMongoDBといった他のデータソースのAPI生成も試すことができます。

[f:id:sugimomoto:20191018183504p:plain]

まず、以下のURLにアクセスし、無償版の申し込みをクリックします。

https://www.cdata.com/jp/apiserver/#purchase

[f:id:sugimomoto:20191017151640p:plain]

ショッピングカート画面に行くので、内容を確認し「注文手続きへ」をクリックします。

[f:id:sugimomoto:20191017151648p:plain]

オンライン注文書の画面で会社名などを入力し「注文を送信する」をクリックすれば、

[f:id:sugimomoto:20191017151656p:plain]

無償版ライセンスの購入が完了です。

[f:id:sugimomoto:20191017151703p:plain]

以下のように注文完了メールが届き、1～2営業日以内にライセンスも発行されて届きます。

[f:id:sugimomoto:20191017151710p:plain]

ライセンスが届いたら、API Serverの管理画面、「情報」タブから「新しいライセンスをインストール」をクリックし、ライセンスを登録します。

[f:id:sugimomoto:20191017151717p:plain]

名前とメールアドレス、メールで送られてきたプロダクトキーを入力し、Terms and Confitionsを確認の上、「ライセンスをインストール」をクリックすればOKです。

[f:id:sugimomoto:20191017151725p:plain]

無事ライセンスが有効化されました。

[f:id:sugimomoto:20191017151731p:plain]

## API Server にExcelデータソースの機能を追加する方法

前述の通り、API Server はデフォルト状態でExcelをデータソースとして扱うことができません。

別途 [CData ADO.NET Provider](https://www.cdata.com/jp/ado/) から Excel ADO.NET Providerを入手して、インストールする必要があります。

[f:id:sugimomoto:20191017151738p:plain]

Excel ADO.NET Providerは以下のページから入手できます。

https://www.cdata.com/jp/drivers/excel/ado/

[f:id:sugimomoto:20191017151748p:plain]

ダウンロードは評価版をクリックしてください。

[f:id:sugimomoto:20191017151757p:plain]

必要事項を記入の上、ダウンロードをクリックすることでインストーラーを入手できます。

[f:id:sugimomoto:20191017151837p:plain]

インストーラーを実行すると、セットアップ用ダイアログが表示されます。特に特別な構成はなく、そのまますべてデフォルトで進めていくだけで大丈夫です。

[f:id:sugimomoto:20191017151845p:plain]

最初にライセンス契約書は確認し「同意する」をクリックしておきます。

[f:id:sugimomoto:20191017151852p:plain]

インストーラー先を選択し

[f:id:sugimomoto:20191017151857p:plain]

コンポーネントを選択します。必須なのはADO.NET Providerのみですが、デフォルトのままでも大丈夫です。

[f:id:sugimomoto:20191017151902p:plain]

スタートメニューフォルダを選択し

[f:id:sugimomoto:20191017151908p:plain]

ツールボックスもデフォルトで大丈夫です。

[f:id:sugimomoto:20191017151913p:plain]

あとは「インストール」をクリックすればOKです。

[f:id:sugimomoto:20191017151918p:plain]

インストール完了後、API Serverを再起動し、接続画面に移動すると「Excel」データソースが使えるようになります。

[f:id:sugimomoto:20191017151923p:plain]

ちなみに無償版の範囲外ですが、CSVやXMLなどのファイルやMongoDBやRedisなどもAPIのデータソースとして、このようにCData ADO.NET Providerを入手することで対応可能です。

## 参考情報

[CData API Server で REST ful APIを作って、SwaggerHub でさくっと API ドキュメントを公開する](http://kageura.hatenadiary.jp/entry/2019/01/22/CData_API_Server_%E3%81%A7_REST_ful_API%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%80%81SwaggerHub_%E3%81%A7%E3%81%95%E3%81%8F%E3%81%A3%E3%81%A8_API_%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88)

[CData API Server（Windows版）を使ってKintoneのWeb APIをOData形式に変換する（API Server拡張ドライバー追加方法）](http://kageura.hatenadiary.jp/entry/2017/12/26/CData_API_Server%EF%BC%88Windows%E7%89%88%EF%BC%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6Kintone%E3%81%AEWeb_API%E3%82%92OData%E5%BD%A2%E5%BC%8F%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B%EF%BC%88API_Ser)

[Azure SQL DatabaseをCData API ServerでWeb API（OData）アクセスできるように構成してみる その1 Web Apps構成編](http://kageura.hatenadiary.jp/entry/2017/11/27/Azure_SQL_Database%E3%82%92CData_API_Server%E3%81%A7Web_API%EF%BC%88OData%EF%BC%89%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E6%A7%8B%E6%88%90%E3%81%97)
</content>
        <hatena:formatted-content type="text/html" xmlns:hatena="http://www.hatena.ne.jp/info/xmlns#">&lt;p&gt;今月はじめに &lt;a href=&quot;https://www.cdata.com/jp/apiserver/&quot;&gt;CData API Server&lt;/a&gt; という&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の自動生成ツールで無料版・freeのライセンスがリリースされました！&lt;/p&gt;

&lt;p&gt;今日はこの CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Server を使って&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt; ファイルから &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/REST%20API&quot;&gt;REST API&lt;/a&gt; を生成する方法を解説したいと思います。(ちなみに機能的には&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt; だけでなく、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/MySQL&quot;&gt;MySQL&lt;/a&gt; などの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RDB&quot;&gt;RDB&lt;/a&gt;からも&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の生成が可能です。というかそっちの方がメインです)&lt;/p&gt;

&lt;p&gt;ちなみに今回作った&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;は以下の内容で公開しています。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Server（&lt;a href=&quot;https://t.co/oE8WxzNf5J&quot;&gt;https://t.co/oE8WxzNf5J&lt;/a&gt;）を使って1分くらいで作ったO&amp;#39;Reilly Book List &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を公開してみました。&lt;a href=&quot;https://t.co/7BziYVLMot&quot;&gt;https://t.co/7BziYVLMot&lt;/a&gt;&lt;br&gt;ID：user（ReadOnly）&lt;br&gt;Password：3s3E4a4r7Q7d2a1J0i4l&lt;br&gt;AuthType：Basic&lt;br&gt;&lt;br&gt;Azure WebApps 格安プランなので、あまりにアクセスがあると落ちちゃうかも。 &lt;a href=&quot;https://t.co/7Nzn0gjWHk&quot;&gt;pic.twitter.com/7Nzn0gjWHk&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kazuya Sugimoto (@sugimomoto) &lt;a href=&quot;https://twitter.com/sugimomoto/status/1184269451480317954?ref_src=twsrc%5Etfw&quot;&gt;2019年10月16日&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;ul class=&quot;table-of-contents&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;#CData-API-Server-って何&quot;&gt;CData API Server って何？&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#こんな-REST-API-を生成するよ&quot;&gt;こんな REST API を生成するよ&lt;/a&gt;&lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#実施手順&quot;&gt;実施手順&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#1-Excel-データソースの接続設定を追加する&quot;&gt;1. Excel データソースの接続設定を追加する&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#2-ExcelのシートをAPIリソースとして追加する&quot;&gt;2. ExcelのシートをAPIリソースとして追加する&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#3-アクセス用のユーザーを追加する&quot;&gt;3. アクセス用のユーザーを追加する&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#4-生成されたAPIに対してアクセスする&quot;&gt;4. 生成されたAPIに対してアクセスする&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#補足&quot;&gt;補足&lt;/a&gt;&lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#API-Server-のダウンロードインストール方法&quot;&gt;API Server のダウンロード・インストール方法&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#無償Free版ライセンスの入手方法&quot;&gt;無償（Free）版ライセンスの入手方法&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#API-Server-にExcelデータソースの機能を追加する方法&quot;&gt;API Server にExcelデータソースの機能を追加する方法&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#参考情報&quot;&gt;参考情報&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;CData-API-Server-って何&quot;&gt;CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Server って何？&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cdata.com/jp/apiserver/&quot;&gt;CData API Server&lt;/a&gt; は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/MySQL&quot;&gt;MySQL&lt;/a&gt;や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;といった様々なデータソース（その数150種類以上！）をもとにOData規格で標準化されたREST ful な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を生成するツールです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151103.png&quot; alt=&quot;f:id:sugimomoto:20191017151103p:plain&quot; title=&quot;f:id:sugimomoto:20191017151103p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;どのデータソースからどのデータを公開するのか？　をポチポチとクリックしていくだけで、以下のような&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;ドキュメントと一緒にGET/POST/PUT/DELETE をサポートした&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/REST%20API&quot;&gt;REST API&lt;/a&gt;を自動で生成します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151112.png&quot; alt=&quot;f:id:sugimomoto:20191017151112p:plain&quot; title=&quot;f:id:sugimomoto:20191017151112p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;あとはいろんなクライアント・プログラムから使ってもらう感じです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151119.png&quot; alt=&quot;f:id:sugimomoto:20191017151119p:plain&quot; title=&quot;f:id:sugimomoto:20191017151119p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Server はもともと年間有償ライセンスで提供されていたのですが、最近のアップデートで「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SQLite&quot;&gt;SQLite&lt;/a&gt;」「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Apache&quot;&gt;Apache&lt;/a&gt; Derby」「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/MySQL&quot;&gt;MySQL&lt;/a&gt;」「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;」のデータソースでの利用が無料になりました！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cdata.com/jp/apiserver/#purchase&quot;&gt;https://www.cdata.com/jp/apiserver/#purchase&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151128.png&quot; alt=&quot;f:id:sugimomoto:20191017151128p:plain&quot; title=&quot;f:id:sugimomoto:20191017151128p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;※注意：企業・個人のインターナル・マイクロサービスとしての利用のみ無料で、外部公開・パブリック&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;にする場合は有償ライセンスが必要になります。&lt;/p&gt;

&lt;p&gt;なので、今回の記事では&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;をデータソースにした&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の生成方法を解説したいと思います。&lt;/p&gt;

&lt;p&gt;また、記事の後半では&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Serverのインストール・セットアップ方法と無料版のライセンス購入方法についても記載しています。特に難しいところは無いかな～と思うのですが、よくわからなかった場合は参考にしてみてください。&lt;/p&gt;

&lt;h1 id=&quot;こんな-REST-API-を生成するよ&quot;&gt;こんな &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/REST%20API&quot;&gt;REST API&lt;/a&gt; を生成するよ&lt;/h1&gt;

&lt;p&gt;さて、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;から &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/REST%20API&quot;&gt;REST API&lt;/a&gt;を生成するわけですが、元になる&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;ファイルが無いと始まりません。なので今回は以下のURLで公開されている O&#39;Reilly の書籍リストを元に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;ファイルを作ってみました！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.oreilly.co.jp/catalog/&quot;&gt;https://www.oreilly.co.jp/catalog/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151136.png&quot; alt=&quot;f:id:sugimomoto:20191017151136p:plain&quot; title=&quot;f:id:sugimomoto:20191017151136p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ここから&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%D4%A1%BC%A5%A2%A5%F3%A5%C9%A5%DA%A1%BC%A5%B9%A5%C8&quot;&gt;コピーアンドペースト&lt;/a&gt;でベローっと貼り付けて、リンク先のURLを抽出し、ついでに後々のことを考えて画像URLもISBNを元に生成しています。&lt;/p&gt;

&lt;p&gt;最終的に出来上がった&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;ファイルはこちらです。以下のURLで公開しているので、使ってみてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/OReillyBookList.xlsx&quot;&gt;OReillyBookList.xlsx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151147.png&quot; alt=&quot;f:id:sugimomoto:20191017151147p:plain&quot; title=&quot;f:id:sugimomoto:20191017151147p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;実施手順&quot;&gt;実施手順&lt;/h2&gt;

&lt;p&gt;以下のような手順で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;が作成できます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt; データソースの接続設定を追加する&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;のシートを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;リソースとして追加する&lt;/li&gt;
&lt;li&gt;アクセス用のユーザーを追加する&lt;/li&gt;
&lt;li&gt;生成された&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;に対してアクセスする&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;ざっと全体像がわかるGIFアニメも作成しておいたので、合わせて参考にしてみてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/oreilly.gif&quot; class=&quot;http-image&quot;&gt;&lt;img src=&quot;https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/oreilly.gif&quot; class=&quot;http-image&quot; alt=&quot;https://cdatajbuilds.s3-ap-northeast-1.amazonaws.com/sugimototest/oreilly.gif&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-Excel-データソースの接続設定を追加する&quot;&gt;1. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt; データソースの接続設定を追加する&lt;/h2&gt;

&lt;p&gt;それでは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を作っていきましょう。「接続」→「接続」をクリックすると、データソースとして登録できるサービスの一覧が表示されるのでその中から &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt; を選択します。&lt;/p&gt;

&lt;p&gt;なお、デフォルトでは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;データソースが使えないので、 &lt;a href=&quot;#API-Server-%E3%81%ABExcel%E3%83%87%E3%83%BC%E3%82%BF%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AE%E6%A9%9F%E8%83%BD%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95&quot;&gt;こちら&lt;/a&gt; の手順を元にコネクタをインストールしておきます。（私の環境は色々と試しているので、いっぱいデータソースがあります）&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151246.png&quot; alt=&quot;f:id:sugimomoto:20191017151246p:plain&quot; title=&quot;f:id:sugimomoto:20191017151246p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;接続情報を入力する画面では、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;ファイルのファイルパスを入力します。&lt;/p&gt;

&lt;p&gt;入力後「接続テスト」をクリックし、接続成功のメッセージが出たら、設定を保存します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151257.png&quot; alt=&quot;f:id:sugimomoto:20191017151257p:plain&quot; title=&quot;f:id:sugimomoto:20191017151257p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;これで、以下のように接続情報が構成されればOKです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151306.png&quot; alt=&quot;f:id:sugimomoto:20191017151306p:plain&quot; title=&quot;f:id:sugimomoto:20191017151306p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-ExcelのシートをAPIリソースとして追加する&quot;&gt;2. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;のシートを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;リソースとして追加する&lt;/h2&gt;

&lt;p&gt;次に &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt; のどのシートを &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/REST%20API&quot;&gt;REST API&lt;/a&gt; として生成するのかの設定を行います。&lt;/p&gt;

&lt;p&gt;「リソース」タブに移動し「リソースを追加」をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151313.png&quot; alt=&quot;f:id:sugimomoto:20191017151313p:plain&quot; title=&quot;f:id:sugimomoto:20191017151313p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;まず先程作成した対象の接続情報を選択し&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151322.png&quot; alt=&quot;f:id:sugimomoto:20191017151322p:plain&quot; title=&quot;f:id:sugimomoto:20191017151322p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;次に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;ファイルに含まれるシートを選択します。今回の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;ファイルは1シートしかないので、以下のように一つだけがリソースとして追加できます。複数シートを一括で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;化することも可能です。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151329.png&quot; alt=&quot;f:id:sugimomoto:20191017151329p:plain&quot; title=&quot;f:id:sugimomoto:20191017151329p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;最後に対象のリソース名（URLリソース名になります）と、どの操作を許容するのか（参照・作成・更新・削除）、どのカラムを公開するのか、を選択し保存するだけで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の作成が完了します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151338.png&quot; alt=&quot;f:id:sugimomoto:20191017151338p:plain&quot; title=&quot;f:id:sugimomoto:20191017151338p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;以下のようにリソースが保存されていればOKです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151348.png&quot; alt=&quot;f:id:sugimomoto:20191017151348p:plain&quot; title=&quot;f:id:sugimomoto:20191017151348p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-アクセス用のユーザーを追加する&quot;&gt;3. アクセス用のユーザーを追加する&lt;/h2&gt;

&lt;p&gt;最後に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;アクセス用のユーザーを作成します。このユーザー情報とユーザーの認証&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ンを使って&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;アクセスを行います。&lt;/p&gt;

&lt;p&gt;「ユーザー」タブに移動し「追加」ボタンをクリック&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151356.png&quot; alt=&quot;f:id:sugimomoto:20191017151356p:plain&quot; title=&quot;f:id:sugimomoto:20191017151356p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ユーザー名と有効期限（0であれば永続です）、操作権限やリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トリミットなどを設定し、保存するだけでOKです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151404.png&quot; alt=&quot;f:id:sugimomoto:20191017151404p:plain&quot; title=&quot;f:id:sugimomoto:20191017151404p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ユーザーが作成されると、以下のように認証用&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ンも自動生成されるので、これを控えておきましょう。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151409.png&quot; alt=&quot;f:id:sugimomoto:20191017151409p:plain&quot; title=&quot;f:id:sugimomoto:20191017151409p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-生成されたAPIに対してアクセスする&quot;&gt;4. 生成された&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;に対してアクセスする&lt;/h2&gt;

&lt;p&gt;それでは作成した&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;にアクセスしてみましょう。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;タブに移動すると、作成された&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の仕様を確認することができます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151418.png&quot; alt=&quot;f:id:sugimomoto:20191017151418p:plain&quot; title=&quot;f:id:sugimomoto:20191017151418p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;GET/POST/PUT/DELETEのエンドポイントがそれぞれ実装されていて、各メソッドに応じて、データの参照・作成・更新・削除が実施可能です。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151426.png&quot; alt=&quot;f:id:sugimomoto:20191017151426p:plain&quot; title=&quot;f:id:sugimomoto:20191017151426p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;GETのリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トURLをそのままブラウザに貼り付けると、レスポンスが&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;で返ってくることがわかります。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151434.png&quot; alt=&quot;f:id:sugimomoto:20191017151434p:plain&quot; title=&quot;f:id:sugimomoto:20191017151434p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;もちろん、POSTMANなどのクライアントからも実行可能です。先程作成した認証Tokenをヘッダーx-cdata-authtokenに付与してリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トすることでデータの取得ができます。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;GET /api.rsc/CData_Excel_OReillyBookList/ HTTP/1.1
Host: localhost:8387
x-cdata-authtoken: 1h0Y4y3x4Q5r6l0S7y6v&lt;/pre&gt;


&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151441.png&quot; alt=&quot;f:id:sugimomoto:20191017151441p:plain&quot; title=&quot;f:id:sugimomoto:20191017151441p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ちなみにCData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Server は各クエリパラメータをサポートしてます&lt;/p&gt;

&lt;p&gt;$select で取得したい項目 $filter でフィルタリング $orderby で並び替え $top で上位N件取得等。&lt;/p&gt;

&lt;p&gt;例えば2000円以下の本のタイトルと値段を取得して、値段安い順に並び替えて、TOP5を表示だと以下のようなURLクエリパラメータで取得することができます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:8387/api.rsc/OReillyBookList/?$select=Price,Title&amp;$filter=Price&quot;&gt;http://localhost:8387/api.rsc/OReillyBookList/?$select=Price,Title&amp;$filter=Price&lt;/a&gt; le 2000&amp;amp;$orderby=Price&amp;amp;$top=5&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151450.png&quot; alt=&quot;f:id:sugimomoto:20191017151450p:plain&quot; title=&quot;f:id:sugimomoto:20191017151450p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;もちろん、以下のようにPSOTリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トでリソース作成を実行すると&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;POST /api.rsc/CData_Excel_OReillyBookList HTTP/1.1
Host: localhost:8387
x-cdata-authtoken: 1h0Y4y3x4Q5r6l0S7y6v
Content-Type: application/json

{
    &amp;#34;Price&amp;#34;: &amp;#34;1100&amp;#34;,
    &amp;#34;Title&amp;#34;: &amp;#34;新しい本&amp;#34;
}&lt;/pre&gt;


&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;ファイルに直接新しいデータが挿入されます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151458.png&quot; alt=&quot;f:id:sugimomoto:20191017151458p:plain&quot; title=&quot;f:id:sugimomoto:20191017151458p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;なので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;ファイルをデータソースとした簡単な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;ベースのアプリケーションも作成できますね。&lt;/p&gt;

&lt;h1 id=&quot;補足&quot;&gt;補足&lt;/h1&gt;

&lt;p&gt;以下、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Serverのダウンロード方法や補足情報、ライセンスの購入、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;データソースの有効化の方法をまとめておきました。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;データソースだけちょっと特殊な手順が必要なので注意してください。&lt;/p&gt;

&lt;h2 id=&quot;API-Server-のダウンロードインストール方法&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Server のダウンロード・インストール方法&lt;/h2&gt;

&lt;p&gt;CData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Server は以下のURLから入手できます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cdata.com/jp/apiserver/&quot;&gt;https://www.cdata.com/jp/apiserver/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;画面中央（もしくは右上）のダウンロードをクリックしてください。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151507.png&quot; alt=&quot;f:id:sugimomoto:20191017151507p:plain&quot; title=&quot;f:id:sugimomoto:20191017151507p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;今回は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Windows&quot;&gt;Windows&lt;/a&gt;版で進めますが、Corss-Platform版であれば&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;・&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Unix&quot;&gt;Unix&lt;/a&gt;の環境でも動作させることが可能です。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151513.png&quot; alt=&quot;f:id:sugimomoto:20191017151513p:plain&quot; title=&quot;f:id:sugimomoto:20191017151513p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;必要事項を記入し、ダウンロードをクリックするとダウンロードが開始されます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151519.png&quot; alt=&quot;f:id:sugimomoto:20191017151519p:plain&quot; title=&quot;f:id:sugimomoto:20191017151519p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151536.png&quot; alt=&quot;f:id:sugimomoto:20191017151536p:plain&quot; title=&quot;f:id:sugimomoto:20191017151536p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ダウンロードが完了し、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%C8%A1%BC%A5%E9&quot;&gt;インストーラ&lt;/a&gt;ーを立ち上げるとセットアップ用のダイアログが表示されます。ほとんどデフォルトのまま進めていけますが、一部最初に管理者用のパスワードを設定するところがあるので注意してください。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151541.png&quot; alt=&quot;f:id:sugimomoto:20191017151541p:plain&quot; title=&quot;f:id:sugimomoto:20191017151541p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ライセンス契約書を読み、同意するをクリック&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151546.png&quot; alt=&quot;f:id:sugimomoto:20191017151546p:plain&quot; title=&quot;f:id:sugimomoto:20191017151546p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;インストール先フォルダは特に任意の場所が無ければ、デフォルトのままで大丈夫です。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151550.png&quot; alt=&quot;f:id:sugimomoto:20191017151550p:plain&quot; title=&quot;f:id:sugimomoto:20191017151550p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;はそのままデフォルトで進めます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151555.png&quot; alt=&quot;f:id:sugimomoto:20191017151555p:plain&quot; title=&quot;f:id:sugimomoto:20191017151555p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ここも次へをクリックします。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151601.png&quot; alt=&quot;f:id:sugimomoto:20191017151601p:plain&quot; title=&quot;f:id:sugimomoto:20191017151601p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ここの画面でCData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Serverにログインするための管理者パスワードを設定します。（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;アクセスのパスワード・認証&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ンとは別なので注意してください。）&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151610.png&quot; alt=&quot;f:id:sugimomoto:20191017151610p:plain&quot; title=&quot;f:id:sugimomoto:20191017151610p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;これで準備完了です。インストールを進めます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151616.png&quot; alt=&quot;f:id:sugimomoto:20191017151616p:plain&quot; title=&quot;f:id:sugimomoto:20191017151616p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;インストール後「完了」をクリックすることで、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Serverが自動的に立ち上がります。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151621.png&quot; alt=&quot;f:id:sugimomoto:20191017151621p:plain&quot; title=&quot;f:id:sugimomoto:20191017151621p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;先程のパスワードとユーザー名「admin」でログインできます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151626.png&quot; alt=&quot;f:id:sugimomoto:20191017151626p:plain&quot; title=&quot;f:id:sugimomoto:20191017151626p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;以下のようにステータス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C0%A5%C3%A5%B7%A5%E5&quot;&gt;ダッシュ&lt;/a&gt;ボードが表示されればOKです。ただ、まだライセンスは設定されていない状態なので、次の章で無償版ライセンスを入手します。（ちなみに30日間の上位ライセンスによるトライアルはそのまま実施可能です。）&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151633.png&quot; alt=&quot;f:id:sugimomoto:20191017151633p:plain&quot; title=&quot;f:id:sugimomoto:20191017151633p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;無償Free版ライセンスの入手方法&quot;&gt;無償（Free）版ライセンスの入手方法&lt;/h2&gt;

&lt;p&gt;それでは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Serverに設定するライセンスを入手してみたいと思います。&lt;/p&gt;

&lt;p&gt;※ちなみに、サクッとフル機能を試したい場合は、以下の30日間トライアルの方が簡単です。こっちだと、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SQL%20Server&quot;&gt;SQL Server&lt;/a&gt;、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PostgreSQL&quot;&gt;PostgreSQL&lt;/a&gt;、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Oracle&quot;&gt;Oracle&lt;/a&gt;やMongoDBといった他のデータソースの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;生成も試すことができます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191018/20191018183504.png&quot; alt=&quot;f:id:sugimomoto:20191018183504p:plain&quot; title=&quot;f:id:sugimomoto:20191018183504p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;まず、以下のURLにアクセスし、無償版の申し込みをクリックします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cdata.com/jp/apiserver/#purchase&quot;&gt;https://www.cdata.com/jp/apiserver/#purchase&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151640.png&quot; alt=&quot;f:id:sugimomoto:20191017151640p:plain&quot; title=&quot;f:id:sugimomoto:20191017151640p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ショッピングカート画面に行くので、内容を確認し「注文手続きへ」をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151648.png&quot; alt=&quot;f:id:sugimomoto:20191017151648p:plain&quot; title=&quot;f:id:sugimomoto:20191017151648p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;オンライン注文書の画面で会社名などを入力し「注文を送信する」をクリックすれば、&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151656.png&quot; alt=&quot;f:id:sugimomoto:20191017151656p:plain&quot; title=&quot;f:id:sugimomoto:20191017151656p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;無償版ライセンスの購入が完了です。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151703.png&quot; alt=&quot;f:id:sugimomoto:20191017151703p:plain&quot; title=&quot;f:id:sugimomoto:20191017151703p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;以下のように注文完了メールが届き、1～2営業日以内にライセンスも発行されて届きます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151710.png&quot; alt=&quot;f:id:sugimomoto:20191017151710p:plain&quot; title=&quot;f:id:sugimomoto:20191017151710p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ライセンスが届いたら、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Serverの管理画面、「情報」タブから「新しいライセンスをインストール」をクリックし、ライセンスを登録します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151717.png&quot; alt=&quot;f:id:sugimomoto:20191017151717p:plain&quot; title=&quot;f:id:sugimomoto:20191017151717p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;名前とメールアドレス、メールで送られてきたプロダクトキーを入力し、Terms and Confitionsを確認の上、「ライセンスをインストール」をクリックすればOKです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151725.png&quot; alt=&quot;f:id:sugimomoto:20191017151725p:plain&quot; title=&quot;f:id:sugimomoto:20191017151725p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;無事ライセンスが有効化されました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151731.png&quot; alt=&quot;f:id:sugimomoto:20191017151731p:plain&quot; title=&quot;f:id:sugimomoto:20191017151731p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;API-Server-にExcelデータソースの機能を追加する方法&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Server に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;データソースの機能を追加する方法&lt;/h2&gt;

&lt;p&gt;前述の通り、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Server はデフォルト状態で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;をデータソースとして扱うことができません。&lt;/p&gt;

&lt;p&gt;別途 &lt;a href=&quot;https://www.cdata.com/jp/ado/&quot;&gt;CData ADO.NET Provider&lt;/a&gt; から &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; Providerを入手して、インストールする必要があります。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151738.png&quot; alt=&quot;f:id:sugimomoto:20191017151738p:plain&quot; title=&quot;f:id:sugimomoto:20191017151738p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; Providerは以下のページから入手できます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cdata.com/jp/drivers/excel/ado/&quot;&gt;https://www.cdata.com/jp/drivers/excel/ado/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151748.png&quot; alt=&quot;f:id:sugimomoto:20191017151748p:plain&quot; title=&quot;f:id:sugimomoto:20191017151748p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ダウンロードは評価版をクリックしてください。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151757.png&quot; alt=&quot;f:id:sugimomoto:20191017151757p:plain&quot; title=&quot;f:id:sugimomoto:20191017151757p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;必要事項を記入の上、ダウンロードをクリックすることで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%C8%A1%BC%A5%E9&quot;&gt;インストーラ&lt;/a&gt;ーを入手できます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151837.png&quot; alt=&quot;f:id:sugimomoto:20191017151837p:plain&quot; title=&quot;f:id:sugimomoto:20191017151837p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%C8%A1%BC%A5%E9&quot;&gt;インストーラ&lt;/a&gt;ーを実行すると、セットアップ用ダイアログが表示されます。特に特別な構成はなく、そのまますべてデフォルトで進めていくだけで大丈夫です。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151845.png&quot; alt=&quot;f:id:sugimomoto:20191017151845p:plain&quot; title=&quot;f:id:sugimomoto:20191017151845p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;最初にライセンス契約書は確認し「同意する」をクリックしておきます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151852.png&quot; alt=&quot;f:id:sugimomoto:20191017151852p:plain&quot; title=&quot;f:id:sugimomoto:20191017151852p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%C8%A1%BC%A5%E9&quot;&gt;インストーラ&lt;/a&gt;ー先を選択し&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151857.png&quot; alt=&quot;f:id:sugimomoto:20191017151857p:plain&quot; title=&quot;f:id:sugimomoto:20191017151857p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を選択します。必須なのは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; Providerのみですが、デフォルトのままでも大丈夫です。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151902.png&quot; alt=&quot;f:id:sugimomoto:20191017151902p:plain&quot; title=&quot;f:id:sugimomoto:20191017151902p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;スタートメニューフォルダを選択し&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151908.png&quot; alt=&quot;f:id:sugimomoto:20191017151908p:plain&quot; title=&quot;f:id:sugimomoto:20191017151908p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;ツールボックス&lt;/a&gt;もデフォルトで大丈夫です。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151913.png&quot; alt=&quot;f:id:sugimomoto:20191017151913p:plain&quot; title=&quot;f:id:sugimomoto:20191017151913p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;あとは「インストール」をクリックすればOKです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151918.png&quot; alt=&quot;f:id:sugimomoto:20191017151918p:plain&quot; title=&quot;f:id:sugimomoto:20191017151918p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;インストール完了後、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt; Serverを再起動し、接続画面に移動すると「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;」データソースが使えるようになります。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/s/sugimomoto/20191017/20191017151923.png&quot; alt=&quot;f:id:sugimomoto:20191017151923p:plain&quot; title=&quot;f:id:sugimomoto:20191017151923p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ちなみに無償版の範囲外ですが、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSV&quot;&gt;CSV&lt;/a&gt;や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/XML&quot;&gt;XML&lt;/a&gt;などのファイルやMongoDBやRedisなども&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;のデータソースとして、このようにCData &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ADO.NET&quot;&gt;ADO.NET&lt;/a&gt; Providerを入手することで対応可能です。&lt;/p&gt;

&lt;h2 id=&quot;参考情報&quot;&gt;参考情報&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://kageura.hatenadiary.jp/entry/2019/01/22/CData_API_Server_%E3%81%A7_REST_ful_API%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%80%81SwaggerHub_%E3%81%A7%E3%81%95%E3%81%8F%E3%81%A3%E3%81%A8_API_%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88&quot;&gt;CData API Server で REST ful APIを作って、SwaggerHub でさくっと API ドキュメントを公開する&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kageura.hatenadiary.jp/entry/2017/12/26/CData_API_Server%EF%BC%88Windows%E7%89%88%EF%BC%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6Kintone%E3%81%AEWeb_API%E3%82%92OData%E5%BD%A2%E5%BC%8F%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B%EF%BC%88API_Ser&quot;&gt;CData API Server（Windows版）を使ってKintoneのWeb APIをOData形式に変換する（API Server拡張ドライバー追加方法）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kageura.hatenadiary.jp/entry/2017/11/27/Azure_SQL_Database%E3%82%92CData_API_Server%E3%81%A7Web_API%EF%BC%88OData%EF%BC%89%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E6%A7%8B%E6%88%90%E3%81%97&quot;&gt;Azure SQL DatabaseをCData API ServerでWeb API（OData）アクセスできるように構成してみる その1 Web Apps構成編&lt;/a&gt;&lt;/p&gt;
</hatena:formatted-content>
        <category term="API" />
        <category term="CData" />
        <category term="Web API" />
        <category term="REST" />
        <category term="Postman" />
        <app:control>
            <app:draft>no</app:draft>
        </app:control>
    </entry>
</feed>